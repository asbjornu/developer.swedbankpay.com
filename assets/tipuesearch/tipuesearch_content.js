var tipuesearch = {"pages": [{
    "title": "Swedbank Pay Payments Invoice After Payment",
    "text": "Options after posting a payment When you detect that the payer has reached your completeUrl, you need to do a GET request on the payment resource, which contains the paymentID generated in the first step, to receive the state of the transaction. You will also be able to see the available operations after posting a payment. Payment Resource The payment resource is central to all payment instruments. All operations that target the payment resource directly produce a response similar to the example seen below. The response given contains all operations that are possible to perform in the current state of the payment. Request GET /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"payeeInfo\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"urls\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"transactions\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/invoice/core/scripts/client/px.invoice.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;operation=authorize\", \"rel\": \"view-authorization\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/invoice/payments/authorize/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"redirect-authorization\", \"contentType\": \"text/html\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"rel\": \"create-capture\", \"contentType\": \"application/json\" } ] } Property Type Description payment object The payment object contains information about the specific payment. └➔ id string The relative URI of the payment. └➔ number integer The payment number , useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. └➔ created string The ISO-8601 date of when the payment was created. └➔ updated string The ISO-8601 date of when the payment was updated. └➔ state string Ready , Pending , Failed or Aborted . Indicates the state of the payment. This field is only for status display purposes. To └➔ prices object The prices resource lists the prices related to a specific payment. └➔ prices.id string The relative URI of the current prices resource. └➔ description string(40) A textual description of maximum 40 characters of the purchase. └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like e-mail address, mobile number, customer number etc. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string nb-NO , sv-SE or en-US └➔ urls string The URI to the urls resource where all URIs related to the payment can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment can be retrieved. operations array The array of possible operations to perform └─➔ method string The HTTP method to use when performing the operation. └─➔ href string The target URI to perform the operation against. └─➔ rel string The name of the relation the operation has to the current resource. Operations The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-payment-abort aborts the payment order before any financial transactions are performed. redirect-authorization Contains the URI that is used to redirect the consumer to the Swedbank Pay Payments containing the card authorization UI. view-authorization Contains the JavaScript href that is used to embed the card authorization UI directly on the webshop/merchant site create-capture Creates a capture transaction in order to charge the reserved funds from the consumer. create-cancellation Creates a cancellation transaction that cancels a created, but not yet captured payment. Abort: It is possible to abort the process if the payment has no successful transactions. See the abort description. An invoice authorization must be followed by a capture or cancel request. For reversals, you will need to implement the reversal request. If CallbackURL is set: Whenever changes to the payment occur a Callback request will be posted to the callbackUrl, which was generated when the payment was created. Abort To abort a payment, perform the update-payment-abort operation that is returned in the payment request. You need to include the following HTTP body: Request PATCH /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Abort\", \"abortReason\": \"CancelledByConsumer\" } } Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 70100130293, \"created\": \"2019-01-09T13:11:28.371179Z\", \"updated\": \"2019-01-09T13:11:46.5949967Z\", \"instrument\": \"Invoice\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Aborted\", \"currency\": \"SEK\", \"prices\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"amount\": 0, \"description\": \"invoice Test\", \"payerReference\": \"100500\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.1.1\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"nb-NO\", \"urls\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeinfo\" }, \"metadata\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/metadata\" } }, \"operations\": [] } The response will be the payment resource with its state set to Aborted. Captures An invoice capture will generate the invoice and distribute it to the consumer. This differs from i.e. card payments, where a capture operation will fully or partially charge the consumer’s authorized amount. Create FinancingConsumer capture To capture a FinancingConsumer invoice payment, perform the create-capture operation with the following request body: POST /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"activity\": \"FinancingConsumer\", \"amount\": 13500, \"vatAmount\": 2500, \"payeeReference\": \"customer reference-unique\", \"receiptReference\": \"3245766\", \"description\": \"description for transaction\", \"itemDescriptions\": [ { \"amount\": 12500, \"description\": \"item description 1\" }, { \"amount\": 1000, \"description\": \"item description 2\" } ], \"vatSummary\": [ { \"amount\": 12500, \"vatPercent\": 2500, \"vatAmount\": 2500 }, { \"amount\": 1000, \"vatPercent\": 0, \"vatAmount\": 0 } ] } } Required Parameter name Datatype Value (with description) ✔︎ transaction.activity string FinancingConsumer. ✔︎ transaction.Amount integer Amount entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK, 5000 = 50.00 SEK. ✔︎ transaction.vatAmount integer Amount entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK, 5000 = 50.00 SEK. ✔︎ transaction.payeeReference string(50) The payeeReference is the receipt/invoice number if receiptReference is not defined, which is a unique reference with max 50 characters set by the merchant system. This must be unique for each operation and must follow the regex pattern [\\w]* (a-zA-Z0-9_).   transaction.receiptReference string(50) The receiptReference is a reference from the merchant system. If sent in, this reference is used as an invoice/receipt number. ✔︎ transaction.description string A textual description of the capture ✔︎ itemDescriptions.amount integer Total price for this order line - entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK, 5000 = 50.00 SEK. ✔︎ itemDescriptions.description string A textual description of this product ✔︎ vatSummary.amount integer Total price for this order line - entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK, 5000 = 50.00 SEK. ✔︎ vatSummary.vatAmount integer VAT Amount entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK, 5000 =50.00 SEK. ✔︎ vatSummary.vatPercent string The VAT in percent. Supported values : “0.00”, “6.00”, “8.00”, “10.00”, “12.00”, “14.00”, “15.00”, “22.00”, “24.00”, “25.00” Notes on FinancingConsumer captures: The due date is set by PayEx based on the agreement with merchant. Standard due date is 14 days. The invoice number is set by PayEx. HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"itemDescriptions\": { \"id\": \"/psp/invoice/payments/&lt;captureId&gt;/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177/itemDescriptions\" }, \"invoiceCopy\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177/invoicecopy\", \"transaction\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } Property Type Description payment string The relative URI of the payment this capture transaction resource belongs to. capture.itemDescriptions.id string The relative URI of the item descriptions resource associated with this capture transaction resource. capture.invoiceCopy string The relative URI of the downloadable invoice copy in PDF format. capture.transaction object The object representation of the transaction. Inspecting the Captures The captures resource lists the capture transactions performed on a specific invoice payment. Request GET /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"captures\": [{ \"itemDescriptions\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/7e6cdfc3-1276-44e9-9992-7cf4419750e1/itemdescriptions\" }, \"invoiceCopy\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/7e6cdfc3-1276-44e9-9992-7cf4419750e1/invoicecopy\", \"transaction\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Failed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } Capture Sequence A capture can only be performed on a successfully authorized transaction. It is possible to do a partial capture where you only capture a part of the authorized amount. You can do other captures on the same payment later, up to the total authorized amount. sequenceDiagram Merchant-&gt;&gt;PayEx: Post &lt;Invoice captures&gt; activate Merchant activate PayEx PayEx--&gt;&gt;Merchant: transaction resource deactivate Merchant deactivate PayEx Cancellations Create cancel transaction Perform the create-cancellation operation to cancel a previously authorized or partially captured invoice payment. Request POST /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"activity\": \"FinancingConsumer\", \"payeeReference\": \"customer order reference-unique\", \"description\": \"description for transaction\" } } Required Parameter name Datatype Value (with description) ✔︎ transaction.activity string FinancingConsumer. ✔︎ transaction.payeeReference string The payeeReference is the receipt/invoice number, which is a unique reference with max 50 characters set by the merchant system. This must be unique for each operation and must follow the regex pattern [\\w]* (a-zA-Z0-9_). ✔︎ transaction.description string(50) A textual description for the cancellation. The cancel resource will be returned, containing information about the newly created cancel transaction. Response { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellation\": { \"transaction\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Cancellation\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } Property Type Description payment string The relative URI of the payment this capture transaction belongs to. reversal.id string The relative URI of the created capture transaction. reversal.transaction object The object representation of the generic transaction. Inspecting the Cancellation The cancellations resource lists the cancellation transaction made on a specific payment. Request Request GET /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellations\": [{ \"transaction\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Cancellation\", \"state\": \"Failed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } Property Type Description payment string The relative URI of the payment this list of cancellation transactions belong to. cancellations.id string The relative URI of the current cancellations resource. cancellations.cancellationList array The array of the cancellation transaction objects. cancellations.cancellationList[] object The object representation of the cancellation transaction resource described below. Cancel Sequence A cancel can only be performed on a successfully authorized transaction which has not been captured yet. If you perform a cancellation after doing a partial capture, you will only cancel the remaining authorized amount. sequenceDiagram Merchant-&gt;&gt;PayEx: Post &lt;Invoice cancellations&gt; activate Merchant activate PayEx PayEx--&gt;&gt;Merchant: transaction resource deactivate Merchant deactivate PayEx Reversals Create reversal transaction The create-reversal operation will reverse a previously captured payment and refund the amount to the consumer. To reverse a payment, perform the create-reversal operation. The HTTP body of the request should look as follows: Request POST /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"activity\": \"FinancingConsumer\", \"amount\": 1500, \"vatAmount\": 0, \"payeeReference\": \"customer reference-unique\", \"receiptReference\": \"3245766\", \"description\": \"description for transaction\" } } Properties Required Property Type Description ✔︎ transaction.activity string FinancingConsumer. ✔︎ transaction.amount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK, 5000 = 50.00 SEK. ✔︎ transaction.vatAmount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK, 5000 =50.00 SEK. ✔︎ transaction.payeeReference string(50) The payeeReference is the receipt/invoice number if receiptReference is not defined, which is a unique reference with max 50 characters set by the merchant system. This must be unique for each operation and must follow the regex pattern [\\w]* (a-zA-Z0-9_).   transaction.receiptReference string(50) The receiptReference is a reference from the merchant system. If sent in, this reference is used as an invoice/receipt number. ✔︎ transaction.description string A textual description of the reversal. The reversal resource will be returned, containing information about the newly created reversal transaction. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"reversal\": { \"transaction\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } Property Type Description payment string The relative URI of the payment this capture transaction belongs to. reversal.id string The relative URI of the created capture transaction. reversal.transaction object The object representation of the generic transaction. Inspecting the Reversal The reversals resource will list the reversal transactions (one or more) on a specific payment. Request GET /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"reversal\": [{ \"transaction\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } Property Type Description payment string The relative URI of the payment that the reversal transactions belong to. reversalList array The array of reversal transaction objects. reversalList[] object The reversal transaction object representation of the reversal transaction resource described below. Reversal Sequence Reversal can only be done on an captured transaction where there are some captured amount not yet reversed. sequenceDiagram Merchant-&gt;&gt;PayEx: Post &lt;Invoice reversals&gt; activate Merchant activate PayEx PayEx--&gt;&gt;Merchant: transaction resource deactivate Merchant deactivate PayEx Back: Direct Next: Other Features",
    "tags": "",
    "url": "/payments/invoice/after-payment.html"
  },{
    "title": "Swedbank Pay MobilePay Online Payments – After Payment",
    "text": "Options after posting a payment Abort: It is possible to abort a payment if the payment has no successful transactions. If the payment shown above has a completed authorization, you will need to implement the Capture and Cancel requests. For reversals, you will need to implement the Reversal request. If CallbackURL is set: Whenever changes to the payment occur a Callback request will be posted to the callbackUrl, generated when the payment was created. Capture The captures resource lists the capture transactions performed on a specific payment. Request GET /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"captures\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"captureList\": [{ \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Required payment string The relative URI of the payment this list of capture transactions belong to. captures object The current captures resource. └➔ id string The relative URI of the current captures resource. └➔ captureList array The array of capture transaction objects. └➔ captureList[] object The capture transaction object described in the capture resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Create capture transaction A capture transaction - to withdraw money from the payer’s MobilePay - can be created after a completed authorization by performing the create-capture operation. Request POST /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"amount\": 1000, \"vatAmount\": 250, \"payeeReference\": 1234, \"description\" : \"description for transaction\" } } Required Property Type Description ✔︎ transaction object Object representing the capture transaction. ✔︎ └➔ amount integer Amount entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 DKK, 5000 = 50.00 DKK. ✔︎ └➔ vatAmount integer Amount entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 DKK, 5000 = 50.00 DKK. ✔︎ └➔ description string A textual description of the capture transaction. ✔︎ └➔ payeeReference string(50) A unique reference for the capture transaction. See payeeReference for details. The capture resource contains information about the capture transaction made against a MobilePay Online payment. You can return a specific capture transaction by adding the transaction id to the GET request. Request GET /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"captures\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"captureList\": [{ \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Required payment string The relative URI of the payment this list of capture transactions belong to. captures object The current captures resource. └➔ id string The relative URI of the current captures resource. └➔ captureList array The array of capture transaction objects. └➔ captureList[] object The capture transaction object described in the capture resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Capture Sequence Capture can only be done on a authorized transaction. It is possible to do a part-capture where you only capture a smaller amount than the authorization amount. You can later do more captures on the same payment up to the total authorization amount. sequenceDiagram participant SwedbankPay as Swedbank Pay Merchant-&gt;&gt;SwedbankPay: POST &lt;mobilepay capture&gt; Activate Merchant Activate SwedbankPay SwedbankPay--&gt;&gt;Merchant: transaction resource Deactivate SwedbankPay Deactivate Merchant Cancellations The cancellations resource lists the cancellation transactions on a specific payment. Create cancellation transaction Perform the create-cancel operation to cancel a previously created payment. You can only cancel a payment - or part of payment - not yet captured. Request POST /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"description\": \"Test Cancellation\", \"payeeReference\": \"ABC123\" } } ✔︎ Property Type Description ✔︎ transaction string The transaction object contains information about this cancellation. ✔︎ └➔ description string A textual description of the reason for the cancellation. ✔︎ └➔ payeeReference string(50) A unique reference for the cancellation transaction. See payeeReference for details. The cancel resource contains information about a cancellation transaction made against a payment. You can return a specific cancellation transaction by adding the transaction id to the GET request. Request GET /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellations\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\", \"cancellationList\": [{ \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Cancellation\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Required payment string The relative URI of the payment this list of cancellation transactions belong to. cancellations object The current cancellations resource. └➔ id string The relative URI of the current cancellations resource. └➔ cancellationList array The array of cancellation transaction objects. └➔ cancellationList[] object The cancellation transaction object described in the cancellation resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Finalize Finalizing a preauthorized payment is done as a PATCH after a successful Authorization transaction has been created. The common use-case for the finalize operation is to authorize the payment (that has the preauthorization intent) and complete all payment related activities as soon as possible - in order to complete (finalize) everything server-to-server afterwards. The only allowed activity is Finalize. To use the operation, you should perform a GET on the payment after the user returns from the redirect-authorization operation and find the operation update-authorization-finalize. Request PATCH /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"activity\": \"Finalize\" } } ✔︎ Property Type Description ✔︎ transaction.activity string Finalize Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"authorization\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"paymentToken\": \"ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"maskedPan\": \"123456xxxxxx1234\", \"expireDate\": \"mm/yyyy\", \"panToken\": \"ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"cardBrand\": \"Visa|MC\", \"cardType\": \"Credit Card|Debit Card\", \"issuingBank\": \"UTL MAESTRO\", \"countryCode\": \"999\", \"acquirerTransactionType\": \"3DSECURE|SSL\", \"acquirerStan\": \"39736\", \"acquirerTerminalId\": \"39\", \"acquirerTransactionTime\": \"2017-08-29T13:42:18Z\", \"authenticationStatus\": \"Y|A|U|N\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Authorization\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": true, \"operations\": [ { \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"edit-authorization\", \"method\": \"PATCH\" } ] } } } Property Type Description payment string The relative URI of the payment this finalize transaction resource belongs to. authorization object The object representation of the authorization transaction resource. Cancel Sequence Cancel can only be done on a authorized transaction. If you do cancel after doing a part-capture you will cancel the different between the capture amount and the authorization amount. sequenceDiagram participant SwedbankPay as Swedbank Pay Merchant-&gt;&gt;SwedbankPay: POST &lt;mobilepay cancellation&gt; Activate Merchant Activate SwedbankPay SwedbankPay--&gt;&gt;Merchant: transaction resource Deactivate SwedbankPay Deactivate Merchant Reversals The reversals resource lists the reversal transactions performed on a specific payment. Request GET /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"reversals\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\", \"reversalList\": [{ \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Required payment string The relative URI of the payment this list of reversal transactions belong to. reversals object The current reversals resource. └➔ id string The relative URI of the current reversals resource. └➔ reversalList array The array of reversal transaction objects. └➔ reversalList[] object The reversal transaction object described in the reversal resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Create reversal transaction The create-reversal operation reverses a previously created and captured payment. Request POST /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"amount\": 1000, \"vatAmount\": 0, \"description\" : \"Test Reversal\", \"payeeReference\": \"DEF456\" } } ✔︎ Property Type Description ✔︎ transaction integer The reversal transaction. ✔︎ └➔ amount integer Amount entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 DKK, 5000 = 50.00 DKK. ✔︎ └➔ vatAmount integer Amount entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 DKK, 5000 = 50.00 DKK. ✔︎ └➔ description string A textual description of the capture ✔︎ └➔ payeeReference string(50) A unique reference for the reversal transaction. See payeeReference for details. The reversal resource contains information about a reversal transaction made against a payment. You can return a specific reversal transaction by adding the transaction id to the GET request. Request GET /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"reversals\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\", \"reversalList\": [{ \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Required payment string The relative URI of the payment this list of reversal transactions belong to. reversals object The current reversals resource. └➔ id string The relative URI of the current reversals resource. └➔ reversalList array The array of reversal transaction objects. └➔ reversalList[] object The reversal transaction object described in the reversal resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Reversal Sequence Reversal can only be done on a payment where there are some captured amount not yet reversed. sequenceDiagram participant SwedbankPay as Swedbank Pay Merchant-&gt;&gt;SwedbankPay: POST &lt;mobilepay reversal&gt; Activate Merchant Activate SwedbankPay SwedbankPay--&gt;&gt;Merchant: transaction resource Deactivate SwedbankPay Deactivate Merchant Back: Redirect Next: Other Features",
    "tags": "",
    "url": "/payments/mobile-pay/after-payment.html"
  },{
    "title": "Swedbank Pay Payments Swish After Payment",
    "text": "After the payment is confirmed, the consumer will be redirected from the Swish app to the completeUrl set in the [create payment request][create-payment]. You need to retrieve payment status with GET [Sales transaction][sales-transaction] before presenting a confirmation page to the consumer. Options after posting a payment If CallbackURL is set: Whenever changes to the payment occur a Callback request will be posted to the callbackUrl, which was generated when the payment was created. You can create a reversal transactions by implementing the Reversal request. You can also access and reverse a payment through your merchant pages in the Swedbank Pay admin portal. Reversal Sequence A reversal transcation need to match the Payee reference of a completed sales transaction. sequenceDiagram activate Merchant Merchant-&gt;&gt;- SwedbankPay: POST &lt;Swish reversal&gt; activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: transaction resource Payment Resource When a payment resource is created and during its lifetime, it will have a set of operations that can be performed on it. Which operations are available will vary depending on the state of the payment resource, what the access token is authorized to do, etc. A list of possible operations for Swish Payments and their explanation is given below. Operations { \"operations\": [ { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales\", \"rel\": \"create-sale\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/swish/payments/sales/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-sale\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/swish/core/scripts/client/px.swish.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"view-sales\", \"contentType\": \"application/javascript\" } ] } Property Description href The target URI to perform the operation against. rel The name of the relation the operation has to the current resource. method The HTTP method to use when performing the operation. The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description create-sale Creates a sales transaction without redirection to a payment page. Msisdn is required in browser based scenarioes. redirect-sale Contains the redirect-URI that redirects the consumer to a Swedbank Pay hosted payment page prior to creating a sales transaction. view-sales Contains the URI of the JavaScript used to create a Hosted View iframe directly without redirecting the consumer to separate payment page. Swish transactions All Swish transactions are described below. Please note that Swish does not support Merchant Initiated Transactions for the time being. Sales The sales resource lists the sales transactions (one or more) on a specific payment. Request GET /psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"sales\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sale\", \"saleList\": [ { \"date\": \"8/13/2019 8:58:23 AM +00:00\", \"payerAlias\": \"46739000001\", \"swishPaymentReference\": \"8D0A30A7804E40479F88FFBA26111F04\", \"swishStatus\": \"PAID\", \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Sale\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"isOperational\": true, \"reconciliationNumber\": 737283, \"operations\": [] } } ] } } Create Sales transaction In browser based solutions the payers msisdn (mobile number) is required. This is managed either by sending a POST request as seen below, or by redirecting the end-user to the hosted payment page. The msisdn is only required for browser based solutions. With mobile app based solutions, the consumer uses the device that hosts the Swish app to manage the purchase, making msisdn optional. Browser-based Request POST /psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"msisdn\": \"+46739000001\" } } Browser-based Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"sale\": { \"date\": \"23.10.2017 08:39:37 +00:00\", \"paymentRequestToken\": \"LhXrK84MSpWU2RO09f8kUP-FHiBo-1pB\", \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2017-10-23T08:39:35.6478733Z\", \"updated\": \"2017-10-23T08:39:37.3788733Z\", \"type\": \"Sale\", \"state\": \"AwaitingActivity\", \"number\": 992309, \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Purchase\", \"payeeReference\": \"Postman1508747933\", \"isOperational\": true, \"operations\": [] } } } In-app Request POST /psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { } } In-app Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"sale\": { \"date\": \"23.10.2017 08:39:37 +00:00\", \"paymentRequestToken\": \"LhXrK84MSpWU2RO09f8kUP-FHiBo-1pB\", \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2017-10-23T08:39:35.6478733Z\", \"updated\": \"2017-10-23T08:39:37.3788733Z\", \"type\": \"Sale\", \"state\": \"AwaitingActivity\", \"number\": 992309, \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Purchase\", \"payeeReference\": \"Postman1508747933\", \"isOperational\": true, \"operations\": [ { \"href\": \"swish://paymentrequest?token=&lt;swishtoken&gt;&amp;callbackurl=&lt;completeUrl&gt;\", \"method\": \"GET\", \"rel\": \"redirect-app-swish\" } ] } } } The operation redirect-app-swish is only returned when using in-app flows. The payment now contains a sale transaction with the status (state) AwaitingActivity, meaning we are awaiting a response from Swish. When the consumer confirms the payment a callback request will follow from Swedbank Pay. Reversals The Reversals resource list the reversals transactions (one or more) on a specific payment. Request GET /psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"reversals\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\", \"reversalList\": [ { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"isOperational\": true, \"operations\": [] } } ] } } Property Type Description payment string The relative URI of the payment that the reversal transactions belong to. reversals object The reversal object. └➔ reversalList[] array The array of reversal transaction objects. └─➔ transaction object The reversal transaction object representation of the reversal transaction resource described below. Create Reversal transaction A reversal transaction can be created after a completed authorization by performing a request to the create-reversal operation. A callback request will follow from Swedbank Pay. Request POST /psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"amount\": 1500, \"vatAmount\": 0, \"description\" : \"Test Reversal\", \"payeeReference\": \"ABC123\" } } Required Property Type Description ✔︎ transaction object The transaction object, containing information about this reversal. ✔︎ └➔ amount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK, 5000 = 50.00 SEK ✔︎ └➔ vatAmount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK, 5000 = 50.00 SEK ✔︎ └➔ description string A textual description of the capture ✔︎ └➔ payeeReference string(35) A reference that must match the payeeReference of the sales transaction you want to reverse. See payeeReference for details. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"reversal\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"isOperational\": false, \"operations\": [] } } } Property Type Description payment string The relative URI of the payment this capture transaction belongs to. reversal object The reversal object contains information about this reversal. └➔ id string The relative URI of the created capture transaction. └➔ transaction object The object representation of the generic transaction. Capture Swish does not support capture as it is a one-phase payment method all completed payments are captured. Cancel Swish does not support cancel as cancel can only be used on two-phase payments before they are captured or reversed. Recurring Swish does not support recurring payments.",
    "tags": "",
    "url": "/payments/swish/after-payment.html"
  },{
    "title": "Swedbank Pay Payments Vipps After Payment",
    "text": "Payment Resource This section describes the general sub-resources of the API that are used to generate payment requests. Create Payment To create a Vipps payment, you perform an HTTP POST against the /psp/vipps/payments resource. An example of a payment creation request is provided below. Each individual property of the JSON document is described in the following section. Use the expand request parameter to get a response that includes one or more expanded sub-resources inlined. Request POST /psp/vipps/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"prices\": [ { \"type\": \"Vipps\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Vipps Test\", \"payerReference\": \"ABtimestamp\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"nb-NO\", \"urls\": { \"hostUrls\": [\"https://example.com\", \"https://example.net\"], \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"paymentUrl\": \"http://example.com/perform-payment\", \"callbackUrl\": \"https://api.externalintegration.payex.com/psp/payment-callback\", \"logoUrl\": \"https://example.com/path/to/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"Postmantimestamp\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" }, \"prefillInfo\": { \"msisdn\": \"+4793000001\" } } } Required Property Type Description ✔︎ payment object The payment object. ✔︎ └➔ operation string Purchase ✔︎ └➔ intent string Authorization ✔︎ └➔ currency string NOK ✔︎ └➔ prices object The prices object. ✔︎ └─➔ type string vipps ✔︎ └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 NOK. ✔︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. ✔︎ └➔ description string(40) A textual description max 40 characters of the purchase.   └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like mobile number, customer number etc. ✔︎ └➔ userAgent string The user agent reference of the consumer’s browser - see user agent ✔︎ └➔ language string nb-NO, sv-SE or en-US. ✔︎ └➔ urls object The object containing URLs relevant for the payment. ✔︎ └─➔ hostUrls array The array of URIs valid for embedding of Swedbank Pay Hosted Views. ✔︎ └─➔ completeUrl string The URI that Swedbank Pay will redirect back to when the payment page is completed. This does not indicate a successful payment, only that it has reached a completion state. A GET request needs to be performed on the payment to inspect it further.   └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled, either by the payer or by the merchant trough an abort request of the payment.   └─➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the payment menu needs to be loaded, to inspect and act on the current status of the payment.   └─➔ callbackUrl string The URI that Swedbank Pay will perform an HTTP POST request against every time a transaction is created on the payment. See callback for details.   └─➔ logoUrl string The URI that will be used for showing the customer logo. Must be a picture with at most 50px height and 400px width. Require https.   └─➔ termsOfServiceUrl string A URI that contains your terms and conditions for the payment, to be linked on the payment page. Require https. ✔︎ └➔ payeeInfo object The object containing information about the payee. ✔︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by PayEx. ✔︎ └─➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.   └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to PayEx.   └─➔ productCategory strin A product category or number sent in from the payee/merchant. This is not validated by PayEx, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems.   └─➔ prefillInfo string The mobile number that will be pre-filled in the Swedbank Pay Payments. The consumer may change this number in the UI.   └─➔ subsite string(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 72100003079, \"created\": \"2018-09-05T14:18:44.4259255Z\", \"instrument\": \"Vipps\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"NOK\", \"prices\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"amount\": 0, \"description\": \"Vipps Test\", \"payerReference\": \"AB1536157124\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.2.0\", \"userAgent\": \"Mozilla/5.0 weeeeee\", \"language\": \"nb-NO\", \"urls\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeinfo\" }, \"metadata\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/metadata\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/vipps/payments/authorize/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-authorization\" } ] } Purchase Posting a payment (operation Purchase) returns the options of aborting the payment altogether or creating an authorization transaction through the redirect-authorization hyperlink. Request { \"payment\": { \"operation\": \"Purchase\" } } Operations When a payment resource is created and during its lifetime, it will have a set of operations that can be performed on it. Which operations are available will vary depending on the state of the payment resource, what the access token is authorized to do, etc. Property Description href The target URI to perform the operation against. rel The name of the relation the operation has to the current resource. method The HTTP method to use when performing the operation. The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-payment-abort Aborts the payment before any financial transactions are performed. redirect-authorization Used to redirect the consumer to Swedbank Pay Payments and the authorization UI. create-capture Creates a capture transaction. create-cancellation Creates a cancellation transaction. create-reversal Creates a reversal transaction. Vipps transactions All Vipps after payment transactions are described below. Authorizations The authorizations resource contains information about the authorization transactions made on a specific payment. Request GET /psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"authorizations\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\", \"authorizationList\": [ { \"vippsTransactionId\": \"5619328800\", \"msisdn\": \"+4798765432\", \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2018-09-05T15:01:39.8658084Z\", \"updated\": \"2018-09-05T15:01:42.2119509Z\", \"type\": \"Authorization\", \"state\": \"Completed\", \"number\": 72100003090, \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Vipps Test\", \"payeeReference\": \"Postman1536157124\", \"isOperational\": false, \"operations\": [] } } ] } } Property Type Description payment string The relative URI of the payment this authorization transactions resource belongs to. authorizations object The authorizations object giving access to authorization information pertaining to this transaction. └➔ id string The relative URI of the current authorization transactions resource. └➔ authorizationList array The array of authorization transaction objects. └➔ authorizationList[] object The authorization transaction object described in the authorization resource below. The authorization resource contains information about an authorization transaction made on a specific payment. You can return a specific authorization transaction by adding the transaction id to the GET request. Request GET /psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"authorization\": { \"vippsTransactionId\": \"5619328800\", \"msisdn\": \"+4798765432\", \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2018-09-05T15:01:39.8658084Z\", \"updated\": \"2018-09-05T15:01:42.2119509Z\", \"type\": \"Authorization\", \"state\": \"Completed\", \"number\": 72100003090, \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Vipps Test\", \"payeeReference\": \"Postman1536157124\", \"isOperational\": false, \"operations\": [] } } } Property Type Description payment string The relative URI of the payment this authorization transaction resource belongs to. authorization string The authorization object. └➔ id string The relative URI of the current authorization transaction resource. └➔  transaction object The object representation of the generic transaction. Captures The captures resource lists the capture transactions (one or more) on a specific payment. Request GET /psp/vipps/vipps/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"captures\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"captureList\": [ { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2018-09-05T15:03:56.5180218Z\", \"updated\": \"2018-09-06T08:05:01.4179654Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"number\": 72100003092, \"amount\": 1500, \"vatAmount\": 250, \"description\": \"description for transaction\", \"payeeReference\": \"cpt1536159837\", \"isOperational\": false, \"reconciliationNumber\": 736941, \"operations\": [] } } ] } } Property Type Description payment string The relative URI of the payment this list of capture transactions belong to. captures object The captures list resource. └➔ id string The relative URI of the current captures resource. └➔ captureList array The array of capture transaction objects. └➔ captureList[] object The capture transaction object described in the capture resource below. Create capture transaction A capture transaction can be created after a completed authorization by finding the rel create-capture. Request POST /psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"amount\": 1500, \"vatAmount\": 250, \"payeeReference\": \"cpttimestamp\", \"description\" : \"description for transaction\" } } Required Property Type Description ✔︎ transaction integer The transaction object containing a Vipps transaction description. ✔︎ └➔ amount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 NOK. ✔︎ └➔ vatAmount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 NOK. ✔︎ └➔ description string A textual description of the capture transaction. ✔︎ └➔ payeeReference string(50) A unique reference for the capture transaction. See payeeReference for details. The capture resource contains information about the capture transaction made against a Vipps payment. You can return a specific capture transaction by adding the transaction id to the GET request. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2018-09-05T15:03:56.5180218Z\", \"updated\": \"2018-09-05T15:03:57.6300566Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"number\": 72100003092, \"amount\": 1500, \"vatAmount\": 250, \"description\": \"description for transaction\", \"payeeReference\": \"cpt1536159837\", \"isOperational\": false, \"operations\": [] } } } Property Type Description payment string The relative URI of the payment this capture transaction belongs to. capture string The capture object, containing a transaction object. └➔ id string The relative URI of the created capture transaction. └➔ transaction object The object representation of the generic transaction. Cancellations The cancellations resource lists the cancellation transactions on a specific payment. Request GET /psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellations\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\", \"cancellationList\": [ { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2018-09-06T10:03:43.9615Z\", \"updated\": \"2018-09-06T10:03:45.9503625Z\", \"type\": \"Cancellation\", \"state\": \"Completed\", \"number\": 72100003192, \"amount\": 2000, \"vatAmount\": 0, \"description\": \"description for transaction\", \"payeeReference\": \"testabc\", \"isOperational\": false, \"operations\": [] } } ] } } Property Type Description payment string The relative URI of the payment this list of cancellation transactions belong to. cancellations object The cancellations object. └➔ id string The relative URI of the current cancellations resource. └➔ cancellationList array The array of the cancellation transaction objects. └➔ cancellationList[] object The object representation of the cancellation transaction resource described below. Create cancellation transaction A payment may be cancelled if the rel create-cancellation is available. You can only cancel a payment, or part of it, if it has yet to be captured. To revert a capture, or part of a capture, you must perform a reversal. Performing a cancellation will cancel all remaning capture amounts on a payment. Request POST /psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"payeeReference\": \"testabc\", \"description\" : \"description for transaction\" } } Required Property Type Description ✔︎︎︎︎︎ transaction object The transaction object describing the cancellation request. ✔︎︎︎︎︎ └➔ description string A textual description of the reason for the cancellation. ✔︎︎︎︎︎ └➔ payeeReference string(50) A unique reference for the cancellation transaction. See payeeReference for details. The cancel resource contains information about a cancellation transaction made against a payment. You can return a specific cancellation transaction by adding the transaction id to the GET request. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellation\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2018-09-06T10:03:43.9615Z\", \"updated\": \"2018-09-06T10:03:45.9503625Z\", \"type\": \"Cancellation\", \"state\": \"Completed\", \"number\": 72100003192, \"amount\": 2000, \"vatAmount\": 0, \"description\": \"description for transaction\", \"payeeReference\": \"testabc\", \"isOperational\": false, \"operations\": [] } } } Property Type Description payment string The relative URI of the payment this cancellation transaction belongs to. cancellation object The cancellation resource. └➔ id string The relative URI of the current cancellation transaction resource. └➔ transaction object The object representation of the generic transaction. Reversals The reversals resource lists the reversal transactions (one or more) on a specific payment. Request GET /psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"reversals\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\", \"reversalList\": [ { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2018-09-06T10:12:54.738174Z\", \"updated\": \"2018-09-06T10:12:55.0671912Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 72100003193, \"amount\": 1500, \"vatAmount\": 250, \"description\": \"description for transaction\", \"payeeReference\": \"cpt1536228775\", \"isOperational\": false, \"operations\": [] } } ] } } Property Type Description payment string The relative URI of the payment that the reversal transactions belong to. reversals object The reversal object. └➔ reversalList array The array of reversal transaction objects. └➔ reversalList[] object The reversal transaction object representation of the reversal transaction resource described below. Create reversal transaction A reversal transaction can be created if the rel create-reversal is available. Request POST /psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"amount\": 1500, \"vatAmount\": 250, \"payeeReference\": \"cpttimestamp\", \"description\" : \"description for transaction\" } } Required Property Type Description ✔︎︎︎︎︎ transaction object The trnsaction object. ✔︎︎︎︎︎ └➔ amount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 NOK. ✔︎︎︎︎︎ └➔ vatAmount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 NOK. ✔︎︎︎︎︎ └➔ description string A textual description of the capture ✔︎︎︎︎︎ └➔ payeeReference string(50) A unique reference for the reversal transaction. See payeeReference for details. The reversal resource contains information about a reversal transaction made against a payment. You can return a specific reversal transaction by adding the transaction id to the GET request. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"reversal\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2018-09-06T10:12:54.738174Z\", \"updated\": \"2018-09-06T10:12:55.0671912Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 72100003193, \"amount\": 1500, \"vatAmount\": 250, \"description\": \"description for transaction\", \"payeeReference\": \"cpt1536228775\", \"isOperational\": false, \"operations\": [] } } } Property Type Description payment string The relative URI of the payment this capture transaction belongs to. reversal object The reversal object. └➔ id string The relative URI of the created capture transaction. └➔ transaction object The object representation of the generic transaction. Back: Seamless View Next: Other Features",
    "tags": "",
    "url": "/payments/vipps/after-payment.html"
  },{
    "title": "Swedbank Pay Checkout – After Payment",
    "text": "When the consumer has completed the entire Checkin and Payment Menu, you need to implement the relevant after-payment operations in your order system. Which these operations are and how they are executed is described below. Introduction Below is the final part of the sequence diagram illustrating how a capture operation is performed. sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:create-paymentorder-capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;PaymentInstruments that support &lt;br&gt;Authorizations. end Operations Most payment instruments are two-phase payments – in which a successful payment order will result in an authorized transaction – that must be followed up by a capture or cancellation transaction in a later stage. One-phase payments like Swish are settled directly without the option to capture or cancel. For a full list of the available operations, see the techincal reference. Operation Description create-paymentorder-capture The second part of a two-phase transaction where the authorized amount is sent from the payer to the payee. It is possible to do a part-capture on a subset of the authorized amount. Several captures on the same payment are possible, up to the total authorization amount. create-paymentorder-cancel Used to cancel authorized and not yet captured transactions. If a cancellation is performed after doing a part-capture, it will only affect the not yet captured authorization amount. create-paymentorder-reversal Used to reverse a payment. It is only possible to reverse a payment that has been captured and not yet reversed. To identify the operations that are available we need to do a GET request against the URI of paymentorder.id: Request GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; The (abbreviated) response containing an updateorder, capture, cancellation, and reversal operation should look similar to the response below: Response HTTP/1.1 200 OK Content-Type: application/json { \"paymentOrder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\" }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"update-paymentorder-updateorder\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/captures\", \"rel\": \"create-paymentorder-capture\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/cancellations\", \"rel\": \"create-paymentorder-cancel\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/reversals\", \"rel\": \"create-paymentorder-reversal\", \"contentType\": \"application/json\" } ] } Property Type Description paymentorder object The payment order object. └➔ id string The relative URI to the payment order. operations array The array of possible operations to perform, given the state of the payment order. Cancel If we want to cancel up to the total authorized (not captured) amount, we need to perform create-paymentorder-cancel against the accompanying href returned in the operations list. See the abbreviated request and response below: Request POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"payeeReference\": \"ABC123\", \"description\": \"Cancelling parts of the total amount\" } } Required Property Type Description ✔︎︎︎︎︎ transaction object The transaction object. ✔︎︎︎︎︎ └➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details. ✔︎︎︎︎︎ └➔ description string A textual description of why the transaction is cancelled. If the cancellation request succeeds, the response should be similar to the example below: Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellation\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"type\": \"Cancel\", \"state\": \"Completed\", \"amount\": 5610, \"vatAmount\": 1122, \"description\": \"Cancelling parts of the authorized payment\", \"payeeReference\": \"AB832\" } } } Property Type Description payment string The relative URI of the payment this cancellation transaction belongs to. cancellation object The cancellation object, containing information about the cancellation transaction. └➔ id string The relative URI of the cancellation transaction. └➔ transaction object The transaction object, containing information about the current transaction. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. Reversal If we want to reverse a previously captured amount, we need to perform create-paymentorder-reversal against the accompanying href returned in the operations list. See the abbreviated request and response below: Request POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"description\": \"Reversal of captured transaction\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"ABC123\", \"receiptReference\": \"3245766\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Required Property Type Description ✔︎︎︎︎︎ transaction object The transaction object. ✔︎︎︎︎︎ └➔ amount integer The amount including VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. ✔︎︎︎︎︎ └➔ vatAmount integer The amount of VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. ✔︎︎︎︎︎ └➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details. In Invoice Payments payeereference is used as an invoice/receipt number, if the receiptreference is not defined.   └➔ receiptReference string(30) A reference from the merchant system. In Invoice Payments receiptreference is used as an invoice/receipt number. ✔︎︎︎︎︎ └➔ description string Textual description of why the transaction is reversed. ✔︎︎︎︎︎ └➔ orderItems array The array of items being purchased with the order. Used to print on invoices if the payer chooses to pay with invoice, among other things. Required in capture requests if already sent with the initial creation of the Payment Order. Note that this should only contain the items to be captured from the order. ✔︎︎︎︎︎ └─➔ reference string A reference that identifies the order item. ✔︎︎︎︎︎ └─➔ name string The name of the order item. ✔︎︎︎︎︎ └─➔ type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. ✔︎︎︎︎︎ └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces. Swedbank Pay may use this field for statistics.   └─➔ itemUrl string The URL to a page that can display the purchased item, product or similar.   └─➔ imageUrl string The URL to an image of the order item.   └─➔ description string The human readable description of the order item.   └─➔ discountDescription string The human readable description of the possible discount. ✔︎︎︎︎︎ └─➔ quantity integer The 4 decimal precision quantity of order items being purchased. ✔︎︎︎︎︎ └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is a free-text field and is used for your own book keeping. ✔︎︎︎︎︎ └─➔ unitPrice integer The price per unit of order item, including VAT.   └─➔ discountPrice integer If the order item is purchased at a discounted price. This property should contain that price, including VAT. ✔︎︎︎︎︎ └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. ✔︎︎︎︎︎ └─➔ amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. ✔︎︎︎︎︎ └─➔ vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. If the reversal request succeeds, the response should be similar to the example below: Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"reversals\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"type\": \"Reversal\", \"state\": \"Completed\", \"amount\": 15610, \"vatAmount\": 3122, \"description\": \"Reversing the capture amount\", \"payeeReference\": \"ABC987\" } } } Property Type Description payment string The relative URI of the payment this reversal transaction belongs to. reversals object The reversal object, containing information about the reversal transaction. └➔ id string The relative URI of the reversal transaction. └➔ transaction object The transaction object, containing information about the current transaction. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. In Invoice Payments payeereference is used as an invoice/receipt number. info Note that all of the operations Cancel, Capture and Reversal must be implemented. Back: Capture Next: Other Features",
    "tags": "",
    "url": "/checkout/after-payment.html"
  },{
    "title": "Swedbank Pay Card Payments – After Payment",
    "text": "Options after posting a payment When you detect that the payer reach your completeUrl , you need to do a GET request on the payment resource, containing the paymentID generated in the first step, to receive the state of the transaction. You will also be able to see the available operations after posting a payment. Payment Resource The payment resource is central to all payment instruments. All operations that target the payment resource directly produce a response similar to the example seen below. The response given contains all operations that are possible to perform in the current state of the payment. Request GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"payeeInfo\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"urls\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"transactions\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/core/scripts/client/px.creditcard.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;operation=authorize\", \"rel\": \"view-authorization\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/payments/authorize/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"redirect-authorization\", \"contentType\": \"text/html\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"rel\": \"create-capture\", \"contentType\": \"application/json\" } ] } Property Type Description payment object The payment object contains information about the specific payment. └➔ id string The relative URI of the payment. └➔ number integer The payment number , useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. └➔ created string The ISO-8601 date of when the payment was created. └➔ updated string The ISO-8601 date of when the payment was updated. └➔ state string Ready , Pending , Failed or Aborted . Indicates the state of the payment. This field is only for status display purposes. To └➔ prices object The prices resource lists the prices related to a specific payment. └➔ prices.id string The relative URI of the current prices resource. └➔ description string(40) A textual description of maximum 40 characters of the purchase. └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like e-mail address, mobile number, customer number etc. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string nb-NO , sv-SE or en-US └➔ urls string The URI to the urls resource where all URIs related to the payment can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment can be retrieved. operations array The array of possible operations to perform └─➔ method string The HTTP method to use when performing the operation. └─➔ href string The target URI to perform the operation against. └─➔ rel string The name of the relation the operation has to the current resource. Operations The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-payment-abort aborts the payment order before any financial transactions are performed. redirect-authorization Contains the URI that is used to redirect the consumer to the Swedbank Pay Payments containing the card authorization UI. view-authorization Contains the JavaScript href that is used to embed the card authorization UI directly on the webshop/merchant site create-capture Creates a capture transaction in order to charge the reserved funds from the consumer. create-cancellation Creates a cancellation transaction that cancels a created, but not yet captured payment. Abort: It is possible to abort the process if the payment has no successful transactions. See the Abort description here. If the payment shown above is done as a two phase (Authorization), you will need to implement the Capture and Cancel requests. For reversals, you will need to implement the Reversal request. If CallbackURL is set: Whenever changes to the payment occur a Callback request will be posted to the callbackUrl, which was generated when the payment was created. Capture The capture transaction is the when you ensure that the funds are charged from the consumer. This step usaully takes place when the product has exchanged possession. One must first do a GET request on the payment to find the create-capture operation. Create capture transaction To create a capture transaction to withdraw money from the payer’s card, you need to perform the create-capture operation. Request POST /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"amount\": 1500, \"vatAmount\": 250, \"description\": \"Test Capture\", \"payeeReference\": \"ABC123\" } } Required Property Type Description ✔︎︎︎︎︎ transaction object The object representation of the generic transaction resource. ✔︎︎︎︎︎ └➔ amount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 100.00 NOK, 5000 50.00 SEK. ✔︎︎︎︎︎ └➔ vatAmount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 100.00 NOK, 5000 50.00 SEK. ✔︎︎︎︎︎ └➔ description string A textual description of the capture transaction. ✔︎︎︎︎︎ └➔ payeeReference string(30*) A unique reference for the capture transaction. See payeeReference for details. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1500, \"vatAmount\": 250, \"description\": \"Test Capture\", \"payeeReference\": \"ABC123\", \"isOperational\": false, \"operations\": [] } } } Property Type Description payment string The relative URI of the payment this capture transaction belongs to. capture object The capture resource contains information about the capture transaction made against a card payment. └➔ id string The relative URI of the created capture transaction. └➔ transaction object The object representation of the generic transaction resource. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized , Completed or Failed . Indicates the state of the transaction └─➔ number string The transaction number , useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational boolean true if the transaction is operational; otherwise false . └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. The captures resource list the capture transactions (one or more) on a specific payment. Request GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"captures\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"captureList\": [ { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } ] } } Property Type Description payment string The relative URI of the payment this list of capture transactions belong to. captures object The capture resource contains information about the capture transaction made against a card payment. └➔ id string The relative URI of the current captures resource. └➔ captureList array The array of capture transaction objects. └─➔ id string The relative URI of the current transaction resource. └➔ transaction object The object representation of the generic transaction resource. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized , Completed or Failed . Indicates the state of the transaction └─➔ number string The transaction number , useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational boolean true if the transaction is operational; otherwise false . └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Capture Sequence Capture can only be done on a authorized transaction. It is possible to do a part-capture where you only capture a part of the authorization amount. You can later do more captures on the same payment up to the total authorization amount. sequenceDiagram activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST [Credit card captures] activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: transaction resource Cancellations Cancel can only be done on a authorized transaction. If you do cancel after doing a part-capture you will cancel the difference between the capture amount and the authorization amount. Create cancellation transaction Perform the create-cancel operation to cancel a previously created - and not yet captured - payment. Request POST /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"description\": \"Test Cancellation\", \"payeeReference\": \"ABC123\" } } Required Property Type Description ✔︎︎︎︎︎ transaction object The object representation of the generic transaction resource. ✔︎︎︎︎︎ └➔ description string A textual description of the reason for the cancellation. ✔︎︎︎︎︎ └➔ payeeReference string(30*) A unique reference for the cancellation transaction. See payeeReference for details. The cancel resource contains information about a cancellation transaction made against a payment. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellation\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Cancellation\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test Cancellation\", \"payeeReference\": \"ABC123\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } Property Type Description payment string The relative URI of the payment this cancellation transaction belongs to. cancellation object The cancellation resource contains information about the cancellation transaction made against a card payment. └➔ id string The relative URI of the created cancellation transaction. └➔ transaction object The object representation of the generic transaction resource. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized , Completed or Failed . Indicates the state of the transaction └─➔ number string The transaction number , useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational boolean true if the transaction is operational; otherwise false . └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. The cancellations resource lists the cancellation transactions on a specific payment. Request GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\", \"cancellationList\": [{ \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Cancellation\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Description payment string The relative URI of the payment this list of cancellation transactions belong to. cancellations object The cancellation resource contains information about the cancellation transaction made against a card payment. └➔ id string The relative URI of the current cancellation resource. └➔ cancellationList array The array of cancellation transaction objects. └─➔ id string The relative URI of the current transaction resource. └➔ transaction object The object representation of the generic transaction resource. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized , Completed or Failed . Indicates the state of the transaction └─➔ number string The transaction number , useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational boolean true if the transaction is operational; otherwise false . └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Cancel Sequence sequenceDiagram activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST [creditcard cancellactions] activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: transaction resource Reversals This transaction is used when a captured payment needs to be reversed. Create reversal transaction The create-reversal operation will reverse a previously captured payment. Request POST /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Reversal\", \"payeeReference\": \"ABC123\" } } Required Property Type Description ✔︎︎︎︎︎ transaction object The object representation of the generic transaction resource. ✔︎︎︎︎︎ └➔ amount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. ✔︎︎︎︎︎ └➔ vatAmount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. ✔︎︎︎︎︎ └➔ description string A textual description of the reversal. ✔︎︎︎︎︎ └➔ payeeReference string(30*) A unique reference for the reversal transaction. See payeeReference for details. The reversal resource contains information about the newly created reversal transaction. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"reversal\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversal/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } Property Type Description payment string The relative URI of the payment this reversal transaction belongs to. reversal object The reversalresource contains information about the reversaltransaction made against a card payment. └➔ id string The relative URI of the created reversaltransaction. └➔ transaction object The object representation of the generic transaction resource. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized , Completed or Failed . Indicates the state of the transaction └─➔ number string The transaction number , useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational boolean true if the transaction is operational; otherwise false . └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. The reversals resource lists the reversal transactions (one or more) on a specific payment. Request GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"reversals\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversal\", \"reversalList\": [{ \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversal/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Description payment string The relative URI of the payment this list of reversals transactions belong to. recersals object The reversals resource contains information about the reversals transaction made against a card payment. └➔ id string The relative URI of the current reversals resource. └➔ reversalList array The array of reversals transaction objects. └─➔ id string The relative URI of the current transaction resource. └➔ transaction object The object representation of the generic transaction resource. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized , Completed or Failed . Indicates the state of the transaction └─➔ number string The transaction number , useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational boolean true if the transaction is operational; otherwise false . └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Reversal Sequence sequenceDiagram activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST [creditcard reversals] activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: transaction resource Abort To abort a payment, perform the update-payment-abort operation that is returned in the payment request. You need to include the following HTTP body: Request PATCH /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Abort\", \"abortReason\": \"CancelledByConsumer\" } } Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 70100130293, \"created\": \"2019-01-09T13:11:28.371179Z\", \"updated\": \"2019-01-09T13:11:46.5949967Z\", \"instrument\": \"Creditcard\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Aborted\", \"currency\": \"SEK\", \"prices\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"amount\": 0, \"description\": \"creditcard Test\", \"payerReference\": \"100500\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.1.1\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"nb-NO\", \"urls\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeinfo\" }, \"metadata\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/metadata\" } }, \"operations\": [] } The response will be the payment resource with its state set to Aborted. Remove payment token If you, for any reason, need to delete a paymentToken you use the Delete payment token request. warning Please note that this call does not erase the card number stored at Swedbank Pay. A card number is automatically deleted six months after a successful Delete payment token request. If you want to remove card information beforehand, you need to contact ehandelsetup@swedbankpay.dk, verkkokauppa.setup@swedbankpay.fi, ehandelsetup@swedbankpay.no or ehandelsetup@swedbankpay.se; and supply them with the relevant transaction reference or payment token. Request PATCH /psp/creditcard/payments/instrumentData/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"state\": \"Deleted\", \"tokenType\" : \"PaymentToken\", \"comment\": \"Comment on why the deletion is happening\" } Response HTTP/1.1 200 OK Content-Type: application/json { \"instrumentData\": { \"id\": \"/psp/creditcard/payments/instrumentdata/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"paymentToken\": \"afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"isDeleted\": true|false, \"isPayeeToken\": false, \"cardBrand\": \"MasterCard\", \"maskedPan\": \"123456xxxxxx1111\", \"expiryDate\": \"MM/YYYY\" } } Callback When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform a callback to inform the payee (merchant) about this update. Callback functionality is explaned in more detail here. sequenceDiagram activate SwedbankPay SwedbankPay-&gt;&gt;-Merchant: POST &lt;callbackUrl&gt; activate Merchant note left of Merchant: Callback by SwedbankPay Merchant--&gt;&gt;SwedbankPay: HTTP response Merchant-&gt;&gt;-SwedbankPay: GET [credit card payment] activate SwedbankPay note left of Merchant: First API request SwedbankPay--&gt;&gt;-Merchant: payment resource Back: Direct Next: Other Features",
    "tags": "",
    "url": "/payments/card/after-payment.html"
  },{
    "title": "Swedbank Pay Checkout – Capture",
    "text": "Capture Capture can only be done on a payment with a successful authorized transaction, and if the authorization was not done on a one-phase payment instrument. Examples of one-phase payment instruments are Swish and Vipps, while payment instruments such as Credit Card are two-phase payments, requiring a Capture to be performed. It is possible to do a part-capture where you only capture a smaller amount than the authorized amount. You can later do more captures on the same payment up to the total authorization amount. This is done by requesting the order information from the server, to get the request link to perform the capture. With this, you can request the capture with the sum to capture, and get back the status. sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:create-paymentorder-capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;PaymentInstruments that support &lt;br&gt;Authorizations. end To capture the authorized payment, we need to perform create-paymentorder-capture against the accompanying href returned in the operations list. See the abbreviated request and response below: Request POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"description\": \"Capturing the authorized payment\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"AB832\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Required Property Type Description ✔︎︎︎︎︎ transaction object The transaction object. ✔︎︎︎︎︎ └➔ description string The description of the capture transaction. ✔︎︎︎︎︎ └➔ amount integer The amount including VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. ✔︎︎︎︎︎ └➔ vatAmount integer The amount of VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. ✔︎︎︎︎︎ └➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See [payeeReference][payee-reference] for details. In Invoice Payments payeereference is used as an invoice/receipt number. ✔︎︎︎︎︎ └➔ orderItems array The array of items being purchased with the order. Used to print on invoices if the payer chooses to pay with invoice, among other things. Required in capture requests if already sent with the initial creation of the Payment Order. Note that this should only contain the items to be captured from the order. ✔︎︎︎︎︎ └─➔ reference string A reference that identifies the order item. ✔︎︎︎︎︎ └─➔ name string The name of the order item. ✔︎︎︎︎︎ └─➔ type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. ✔︎︎︎︎︎ └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces. Swedbank Pay may use this field for statistics.   └─➔ itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ └─➔ imageUrl string The URL to an image of the order item.   └─➔ description string The human readable description of the order item.   └─➔ discountDescription string The human readable description of the possible discount. ✔︎︎︎︎︎ └─➔ quantity integer The 4 decimal precision quantity of order items being purchased. ✔︎︎︎︎︎ └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is a free-text field and is used for your own book keeping. ✔︎︎︎︎︎ └─➔ unitPrice integer The price per unit of order item, including VAT.   └─➔ discountPrice integer If the order item is purchased at a discounted price. This property should contain that price, including VAT. ✔︎︎︎︎︎ └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. ✔︎︎︎︎︎ └─➔ amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. ✔︎︎︎︎︎ └─➔ vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. ✔︎︎︎︎︎ └─➔ reference string A reference that identifies the order item. ✔︎︎︎︎︎ └─➔ name string The name of the order item. ✔︎︎︎︎︎ └─➔ type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. ✔︎︎︎︎︎ └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces. Swedbank Pay may use this field for statistics. ︎︎︎ └─➔ itemUrl string The URL to a page that can display the purchased item, such as a product page ︎︎︎ └─➔ imageUrl string The URL to an image of the order item. ︎︎︎ └─➔ description string The human readable description of the order item. ︎︎︎ └─➔ discountDescription string The human readable description of the possible discount. ✔︎︎︎︎︎ └─➔ quantity decimal The 4 decimal precision quantity of order items being purchased. ✔︎︎︎︎︎ └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. ✔︎︎︎︎︎ └─➔ unitPrice integer The price per unit of order item, including VAT. ︎︎︎ └─➔ discountPrice integer If the order item is purchased at a discounted price. This property should contain that price, including VAT. ✔︎︎︎︎︎ └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. ✔︎︎︎︎︎ └─➔ amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. ✔︎︎︎︎︎ └─➔ vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. If the capture succeeds, it should respond with something like the following: Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"type\": \"Capture\", \"state\": \"Completed\", \"amount\": 15610, \"vatAmount\": 3122, \"description\": \"Capturing the authorized payment\", \"payeeReference\": \"AB832\" } } } Property Type Description payment string The relative URI of the payment this capture transaction belongs to. capture object The capture object, containing the information about the capture transaction. └➔ id string The relative URI of the created capture transaction. └➔ transaction object The transaction object, containing information about the current transaction. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. See [payeeReference][payee-reference] for details. Et voilà! Checkout should now be complete, the payment should be secure and everyone should be happy. But, sometimes you also need to implement the cancellation and reversal operations described below. Back: Payment Menu Next: After Payment",
    "tags": "",
    "url": "/checkout/capture.html"
  },{
    "title": "Swedbank Pay Checkout – Checkin",
    "text": "Swedbank Pay Checkout consists of two parts: Checkin and Payment Menu. In the sections that follow you’ll find examples of the HTTP requests, responses and HTML code you will need to implement in order to complete the Swedbank Pay Checkout integration. To finalize Checkout you first have to Checkin. To check in, the payer needs to be identified. Introduction An overview of how the process of identifying the payer through Checkin is illustrated in the below sequence diagram. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(238, 112, 35, 0.05) note left of Payer: Checkin Payer -&gt;&gt;+ Merchant: Start Checkin Merchant -&gt;&gt;+ SwedbankPay: POST /psp/consumers deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel:view-consumer-identification ① deactivate SwedbankPay Merchant --&gt;&gt;- Payer: Show Checkin on Merchant Page Payer -&gt;&gt;+ Payer: Initiate Consumer Hosted View (open iframe) ② Payer -&gt;&gt;+ SwedbankPay: Show Consumer UI page in iframe ③ deactivate Payer SwedbankPay -&gt;&gt;- Payer: Consumer identification process activate Payer Payer -&gt;&gt;+ SwedbankPay: Consumer identification process deactivate Payer SwedbankPay --&gt;&gt;- Payer: show consumer completed iframe activate Payer Payer -&gt;&gt; Payer: EVENT: onConsumerIdentified (consumerProfileRef) ④ deactivate Payer end Checkin Back End The payer will be identified with the consumers resource and will be persisted to streamline future Payment Menu processes. Payer identification is done through the initiate-consumer-session operation. Request POST /psp/consumers HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"operation\": \"initiate-consumer-session\", \"language\": \"sv-SE\", \"shippingAddressRestrictedToCountryCodes\" : [\"NO\", \"SE\", \"DK\"] } Required Property Type Description ✔︎︎︎︎︎ operation string initiate-consumer-session, the operation to perform. ✔︎︎︎︎︎ language string Selected language to be used in Checkin. Supported values are nb-NO, sv-SE and en-US ✔︎︎︎︎︎ shippingAddressRestrictedToCountryCodes string List of supported shipping countries for merchant. Using ISO-3166 standard. When the request has been sent, a response containing an array of operations that can be acted upon will be returned: Response HTTP/1.1 200 OK Content-Type: application/json { \"token\": \"7e380fbb3196ea76cc45814c1d99d59b66db918ce2131b61f585645eff364871\", \"operations\": [ { \"method\": \"GET\", \"rel\": \"redirect-consumer-identification\", \"href\": \"https://ecom.externalintegration.payex.com/consumers/sessions/7e380fbb3196ea76cc45814c1d99d59b66db918ce2131b61f585645eff364871\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"rel\": \"view-consumer-identification\", \"href\": \"https://ecom.externalintegration.payex.com/consumers/core/scripts/client/px.consumer.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"contentType\": \"application/javascript\" } ] } Property Type Description token string A session token used to initiate Checkout UI. operations array The array of operation objects to choose from, described in detail in the table below. └➔ rel string The relational name of the operation, used as a programmatic identifier to find the correct operation given the current state of the application. └➔ method string The HTTP method to use when performing the operation. └➔ contentType string The HTTP content type of the target URI. Indicates what sort of resource is to be found at the URI, how it is expected to be used and behave. └➔ href string The target URI of the operation. Checkin Front End The response from the POST of consumer information contains a few operations. The combination of rel, method and contentType should give you a clue how the operation should be performed. The view-consumer-identification operation and its application/javascript content type gives us a clue that the operation is meant to be embedded in a &lt;script&gt; element in an HTML document. warning In our example we will focus on using the view-consumer-identification solution. The redirect-consumer-identification method redirects the user to Swedbank’s own site to handle the checkin and is used in other implementations. redirect-consumer-identification should only be used in test enviroments. It is not suitable for the production environment as there is no simple way of retrieving the consumerProfileRef. HTML &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Swedbank Pay Checkout is Awesome!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"checkin\"&gt;&lt;/div&gt; &lt;div id=\"payment-menu\"&gt;&lt;/div&gt; &lt;!-- Here you can specify your own javascript file --&gt; &lt;script src=\"&lt;Your-JavaScript-File-Here&gt;\"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; info The Checkin and Payment Menu components (the two &lt;iframe&gt; elements) must be separate (one must not replace the other). In the HTML, you only need to add two &lt;div&gt; elements to place the check-in and payment menu inside of. The JavaScript will handle the rest when it comes to handling the check-in and payment menu. JavaScript var request = new XMLHttpRequest(); request.addEventListener('load', function () { // We will assume that our own backend returns the // exact same as what SwedbankPay returns. var response = JSON.parse(this.responseText); var script = document.createElement('script'); // This assumes that the operations from the response of the POST from the // payment order is returned verbatim from the server to the Ajax: var operation = response.operations.find(function (o) { return o.rel === 'view-consumer-identification'; }); script.setAttribute('src', operation.href); script.onload = function () { payex.hostedView.consumer({ // The container specifies which id the script will look for // to host the checkin component container: 'checkin', onConsumerIdentified: function onConsumerIdentified(consumerIdentifiedEvent) { // consumerIdentifiedEvent.consumerProfileRef contains the reference // to the identified consumer which we need to pass on to the // Payment Order to initialize a personalized Payment Menu. console.log(consumerIdentifiedEvent); }, onShippingDetailsAvailable: function onShippingDetailsAvailable(shippingDetailsAvailableEvent) { console.log(shippingDetailsAvailableEvent); } }).open(); }; // Appending the script to the head var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Place in your own API endpoint here. request.open('POST', '&lt;Your-Backend-Endpoint-Here&gt;', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // In this example we'll send in all of the information mentioned before, // in the request to the endpoint. request.send(JSON.stringify({ operation: 'initiate-consumer-session', language: 'sv-SE', shippingAddressRestrictedToCountryCodes: ['NO', 'SE'] })); info Note that we add the script at the end of the body. This ensures that every element (like the container &lt;div&gt; elements) has loaded in before we try to access them with our script. With the scripts loading in after the entire page is loaded, we can access the &lt;div&gt; container that the Checkin will be hosted in. After that has all loaded, you should see something like this: As you can see, the payer’s information is pre-filled as provided by the initial POST. With a consumerProfileRef safely tucked into our pocket, the Checkin is complete and we can move on to Payment Menu. If a browser refresh is performed after the payer has checked in, the payment menu must be shown even though onConsumerIdentified is not invoked. Additional events during Checkin can also be implemented in the configuration object, such as onConsumerIdentified, onShippingDetailsAvailableand onBillingDetailsAvailable. Read more about these in the Checkin events section. Note on consumer data During this stage some consumer data is stored. Read more about our Data Protection Policy for details on which information we store and its duration. Back: Introduction Next: Payment Menu",
    "tags": "",
    "url": "/checkout/checkin.html"
  },{
    "title": "Swedbank Pay Code Of Conduct",
    "text": "It is important that the projects governed by Swedbank Pay foster a collaborative, open, inclusive, positive and tolerant community. To underscore this, a CODE_OF_CONDUCT.md file from Contributor Covenant should be added to the project: Contributor Code of Conduct As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities. We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality. Examples of unacceptable behavior by participants include: The use of sexualized language or imagery Personal attacks Trolling or insulting/derogatory comments Public or private harassment Publishing other’s private information, such as physical or electronic addresses, without explicit permission Other unethical or unprofessional conduct Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team. This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting a project maintainer at opensource@payex.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Maintainers are obligated to maintain confidentiality with regard to the reporter of an incident. This Code of Conduct is adapted from the Contributor Covenant, version 1.3.0, available at http://contributor-covenant.org/version/1/3/0/ The Code of Conduct should then be referenced from the CONTRIBUTING file, for example with the following paragraphs: Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.",
    "tags": "",
    "url": "/resources/development-guidelines/code-of-conduct.html"
  },{
    "title": "Contributing",
    "text": "To make it clear exactly how outside contributors should provide their contributions to the project, a CONTRIBUTING.md file should be created at the root of the repository. Once such a file exists, GitHub will present it to users creating new pull requests, issues, etc. in the repository. Here’s an example of how such a file can look like: How to contribute To contribute to the Swedbank Pay Development Guidelines, there’s just a few things you need to know. Getting Started Read and make sure you agree with the Code of Conduct. Make sure you have a GitHub account. Then, you have three options: Submit a ticket for your issue, assuming one does not already exist. Clearly describe the issue including steps to reproduce when it is a bug. Make sure you fill in the earliest version that you know has the issue. Directly edit the file you want to change on GitHub. Fork the repository on GitHub. If you choose option 3 (forking the repository), then please read on. Making Changes Create a new branch from where you want to base your work. This is usually the master branch. Please avoid working directly on the master branch. Make commits of logical units in the new branch. Check for unnecessary whitespace with git diff --check before committing. Make sure your commit messages are well written and in the proper format. Push the branch to your forked repository (remote). Submit a pull request for the pushed branch.",
    "tags": "",
    "url": "/resources/development-guidelines/contributing.html"
  },{
    "title": "Data Protection",
    "text": "Paymentorder consumer data When creating a payment order and checking in a consumer the consumer may opt to create a profile. This will store certain data (listed below) to their profile. However if a consumer choose to not create a profile we store the consumer data as the provided data is only possible to input during this stage. To have access to this when completing a payment order, such as capturing it when shipping the order the address and name must be available on a profile, to achieve this we store the information temporarily to make sure it is available. This data is deleted after 28 days. Data stored temporarily or on a profile Billing address Country code First name Last name Legal address Social security number Social security number country code",
    "tags": "",
    "url": "/resources/data-protection.html"
  },{
    "title": "Demoshop",
    "text": "We are working on a brand new demoshop for you! In the meantime, knock yourself out with our existing demoshop",
    "tags": "",
    "url": "/resources/demoshop.html"
  },{
    "title": "Swedbank Pay Payments Swish",
    "text": "info Swish is a one-phase payment instrument supported by the major Swedish banks. In the direct scenario, Swedbank Pay receives the Swish registered mobile number directly from the merchant UI. Swedbank Pay performs a payment that the payer confirms using her Swish mobile app. Introduction When the payer starts the purchase process, you make a POST request towards Swedbank Pay with the collected Purchase information. The next step is to collect the consumer’s Swish registered mobile number and make a POST request towards Swedbank Pay to create a sales transaction. Swedbank Pay will handle the dialogue with Swish and the consumer will have to confirm the purchase in the Swish app. If callbackURL is set, you will receive a payment callback when the Swish dialogue is completed. Make a GET request to check the payment status. Purchase flow The sequence diagram below shows the three requests you have to send to Swedbank Pay to make a purchase. sequenceDiagram activate Browser Browser-&gt;&gt;-Merchant: start purchase activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST &lt;Swish payment&gt; (operation=PURCHASE) activate SwedbankPay note left of Merchant: First API request SwedbankPay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;- SwedbankPay: POST &lt;Sales Transaction&gt; (operation=create-sale) activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: sales resource activate Merchant note left of Merchant: POST containing MSISDN Merchant--x-Browser: Tell consumer to open Swish app Swish_API-&gt;&gt;Swish_App: Ask for payment confirmation activate Swish_App Swish_App--&gt;&gt;-Swish_API: Consumer confirms payment activate Swish_API Swish_API--&gt;&gt;- SwedbankPay: Payment status activate SwedbankPay SwedbankPay--&gt;&gt;-Swish_API: Callback response activate Swish_API Swish_API-&gt;&gt;-Swish_App: Start redirect activate Swish_App Swish_App--x-Browser: Redirect activate Merchant Merchant-&gt;&gt;- SwedbankPay: GET &lt;Sales transaction&gt; activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: Payment response activate Merchant Merchant--&gt;&gt;-Browser: Payment Status Operations The API requests are displayed in the purchase flow above. Swish is a one-phase payment instrument that is based on sales transactions not involving capture or cancellation operations. The options you can choose from when creating a payment with key operation set to value Purchase are listed below. General link Defining CallbackURL: When implementing a scenario, it is strongly recommended to set a [callbackURL][callback-url] in the POST request. If callbackURL is set, Swedbank Pay will send a postback request to this URL when the consumer has fulfilled the payment. Purchase Request POST /psp/swish/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Sale\", \"currency\": \"SEK\", \"prices\": [ { \"type\": \"Swish\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": \"https://example.com\", \"paymentUrl\": \"http://example.com/perform-payment\", \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"callbackUrl\": \"https://example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"ref-123456\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\" }, \"prefillInfo\": { \"msisdn\": \"+46739000001\" } }, \"swish\": { \"enableEcomOnly\": false } } Required Property Type Description   ✔︎︎︎︎︎ payment object The payment object contains information about the specific payment.   ✔︎︎︎︎︎ └➔ operation string The operation that the payment is supposed to perform. The Purchase operation is used in our example.   ✔︎︎︎︎︎ └➔ intent string Authorization.   ✔︎︎︎︎︎ └➔ currency string SEK.   ✔︎︎︎︎︎ └➔ prices object The prices resource lists the prices related to a specific payment.   ✔︎︎︎︎︎ └─➔ type string Swish   ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK 5000 = 50.00 SEK.   ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant.   ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.     └➔ payerReference string The reference to the payer (consumer/end user) from the merchant system. E.g mobile number, customer number etc.     └➔ payeeName string The payee name will be displayed to consumer when redirected to Swedbank Pay.   ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - see user agent definition   ✔︎︎︎︎︎ └➔ language string nb-NO, sv-SE or en-US.   ✔︎︎︎︎︎ └➔ urls object The urls resource lists urls that redirects users to relevant sites.   ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further.     └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with paymentUrl; only cancelUrl or paymentUrl can be used, not both.     └─➔ callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details.     └─➔ logoUrl string The URL that will be used for showing the customer logo. Must be a picture with maximum 50px height and 400px width. Require https.     └─➔ termsOfServiceUrl string A URL that contains your terms and conditions for the payment, to be linked on the payment page. Require https.   ✔︎︎︎︎︎ └➔ payeenInfo object The payeeInfo contains information about the payee.   ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay.   ✔︎︎︎︎︎ └─➔ payeeReference string(50*) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.     └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.     └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.     └─➔ orderReference String(50) The order reference should reflect the order reference found in the merchant’s systems.     └─➔ subsite String(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used.     └─➔ msisdn String Number will be prefilled on payment page, if valid. The mobile number must have a country code prefix and be 8 to 15 digits in length.     └➔ swish object An object that holds different scenarios for Swish payments.     └─➔ ecomOnlyEnabled boolean true if to only enable Swish on web based transactions.; otherwise false to also enable Swish transactions via in-app payments   Response POST /psp/swish/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 992308, \"created\": \"2017-10-23T08:38:57.2248733Z\", \"instrument\": \"Swish\", \"operation\": \"Purchase\", \"intent\": \"Sale\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"Mozilla/5.0\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeinfo\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales\", \"rel\": \"create-sale\" } ] } Create E-Commerce Sale transaction This operation creates an e-commerce sales transaction in the direct payment scenario. This is managed either by sending a POST request as seen below, or by directing the end-user to the hosted payment pages. Note that the msisdn value (the end-user’s mobile number) is required in this request. Request POST /psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"msisdn\": \"+46739000001\" } } Property Type Required transaction object The transaction object contains information about the specific transaction. └➔ msisdn string The end-user’s mobile number. It must have a country code prefix and be 8 to 15 digits in length. Request GET /psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"sales\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales\", \"saleList\": [{ \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Sale\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Required payment string The relative URI of the payment this list of sale transactions belong to. sales object The current sales resource. └➔ id string The relative URI of the current sales resource. └➔ saleList array The array of sale transaction objects. └➔ saleList[] object The sale transaction object described in the sale resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Create M-Commerce Sale transaction This operation creates an m-commerce sales transaction in the direct payment scenario. This is managed either by sending a POST request as seen below, or by directing the end-user to the hosted payment pages. Note that the msisdn value (the end-user’s mobile number) is left out in this request. The redirect-app-swish operation is only present in the m-commerce flow response. paymentRestrictedToAgeLimit must be set in create payment to be present. Request POST /psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { } } Property Type Required transaction object The transaction object contains information about the specific transaction. Response GET /psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { { \"payment\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"sale\": { \"date\": \"23.10.2017 08:39:37 +00:00\", \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales/6bf31479-623f-418a-d69e-08d519f19722\", \"transaction\": { \"id\": \"6bf31479-623f-418a-d69e-08d519f19722\", \"created\": \"2017-10-23T08:39:35.6478733Z\", \"updated\": \"2017-10-23T08:39:37.3788733Z\", \"type\": \"Sale\", \"state\": \"AwaitingActivity\", \"number\": 992309, \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Purchase\", \"payeeReference\": \"Postman1508747933\", \"isOperational\": true, \"operations\": [ { \"href\": \"swish://paymentrequest?token=LhXrK84MSpWU2RO09f8kUP-FHiBo-1pB\", \"method\": \"GET\", \"rel\": \"redirect-app-swish\" } ] } } } Property Type Required payment string The relative URI of the payment this list of sale transactions belong to. sale object The current sale resource. └➔ date string The date of the current sale resource. └➔ id string The relative URI of the current sale resource. └➔ transaction object The sale transaction object described in the sale resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, awaitingActivity, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Back: Introduction Next: Redirect",
    "tags": "",
    "url": "/payments/swish/direct.html"
  },{
    "title": "Swedbank Pay Card Payments – Direct",
    "text": "warning Section under review This section of the Developer Portal is under review and may be incomplete or contain minor errors. The Direct Payment scenario is used by customers that are compliant with PCI-DSS regulations, and is a way to implement card payments without using Swedbank Pay hosted payment page. error PCI-DSS Complicance The direct integration option requires you to collect the card data on your website, which means it must be PCI-DSS Compliant. Introduction The payer places an order and you make a POST request towards Swedbank Pay with gathered Purchase information. The action taken next is the direct-authorization operation that is returned in the first request. You POST the payer’s card data to the URL in thedirect-authorization operation. If 3-D Secure authentication is required, you will then receive a URL where you will have to redirect the payer. When the payment is completed, the payer needs to be redirected back to your merchant/webshop site. Finally you make a GET request towards Swedbank Pay with the paymentID received in the first step, which will return the purchase result. The sequence diagram below shows a high level description of a complete purchase, and the requests you have to send to Swedbank Pay. The links will take you directly to the corresponding API description. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer-&gt;&gt;+Merchant: start purchase deactivate Payer Merchant-&gt;&gt;+SwedbankPay: POST /psp/creditcard/payments deactivate Merchant note left of Merchant: First API Request SwedbankPay--&gt;&gt;+Merchant: rel: direct-authorization deactivate SwedbankPay Merchant-&gt;&gt;+SwedbankPay: GET &lt;payment.id&gt; deactivate Merchant note left of Merchant: Second API request SwedbankPay--&gt;&gt;+Merchant: rel: direct-authorization deactivate SwedbankPay Merchant--&gt;&gt;-Payer: display purchase result API Requests The API requests are displayed in the purchase flow. You can create a card payment with following operation options: Purchase Recur Payout Verify Our payment example above uses the Purchase value which is explained below. Purchase A Purchase payment is a straightforward way to charge the card of the payer. It is followed up by posting a capture, cancellation or reversal transaction. An example of an abbreviated POST request is provided below. Each individual Property of the JSON document is described in the following section. An example of an expanded POST request is available in the other features section. info To minimize the risk for a challenge request (Strong Customer Authentication – “SCA”) on card payments, it’s recommended that you add as much data as possible to the riskIndicator object in the request below. Request POST /psp/creditcard/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"prices\": [{ \"type\": \"CreditCard\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\": { \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"callbackUrl\": \"http://example.com/payment-callback\", \"logoUrl\": \"http://example.com/payment-logo.png\", \"termsOfServiceUrl\": \"http://example.com/payment-terms.pdf\", }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or123\", }, \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } } } } Required Property Type Description   ✔︎︎︎︎︎ payment object The payment object   ✔︎︎︎︎︎ └➔ operation string Determines the initial operation, that defines the type card payment created. Purchase. Used to charge a card. It is followed up by a capture or cancel operation. Recur.Used to charge a card on a recurring basis. Is followed up by a capture or cancel operation (if not Autocapture is used, that is). Payout. Used to deposit funds directly to credit card. No more requests are necessary from the merchant side. Verify. Used when authorizing a card withouth reserveing any funds. It is followed up by a verification transaction.   ✔︎︎︎︎︎ └➔ intent string Authorization. Reserves the amount, and is followed by a cancellation or capture of funds. AutoCapture. A one phase option that enable capture of funds automatically after authorization.   ✔︎︎︎︎︎ └➔ currency string NOK, SEK, DKK, USD or EUR.   ✔︎︎︎︎︎ └➔ prices array The prices resource lists the prices related to a specific payment.   ✔︎︎︎︎︎ └─➔ type string Use the generic type CreditCard if you want to enable all card brands supported by merchant contract. Use card brands like Visa (for card type Visa), MasterCard (for card type Mastercard) and others if you want to specify different amount for each card brand. If you want to use more than one amount you must have one instance in the prices node for each card brand. You will not be allowed to both specify card brands and CreditCard at the same time in this field. [See the Prices resource and prices object types for more information][price-resource].   ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest monetary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK.   ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant.   ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.     └➔ payerReference string The reference to the payer (consumer/end user) from the merchant system. E.g mobile number, customer number etc.     └➔ generatePaymentToken boolean true or false. Set this to true if you want to create a paymentToken for future use as One Click.     └➔ generateRecurrenceToken boolean true or false. Set this to true if you want to create a recurrenceToken for future use Recurring purchases (subscription payments).   ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - [see user agent definition][user-agent-definition]   ✔︎︎︎︎︎ └➔ language string nb-NO, sv-SE or en-US.   ✔︎ └➔ urls object The object containing URLs relevant for the payment.     └─➔ hostUrls array The array of URLs valid for embedding of Swedbank Pay Hosted Views. If not supplied, view-operation will not be available.   ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further.     └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with paymentUrl; only cancelUrl or paymentUrl can be used, not both.     └─➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment. Only used in Seamless Views. If both cancelUrl and paymentUrl is sent, the paymentUrl will used.     └─➔ callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details.     └─➔ logoUrl string The URL that will be used for showing the customer logo. Must be a picture with maximum 50px height and 400px width. Require https.     └─➔ termsOfServiceUrl string A URL that contains your terms and conditions for the payment, to be linked on the payment page. Require https.   ✔︎︎︎︎︎ └➔ payeeInfo string The payeeInfo object, containing information about the payee.   ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay.   ✔︎︎︎︎︎ └─➔ payeeReference string(50*) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See [payeeReference][payee-reference] for details.     └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.     └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.     └─➔ orderReference String(50) The order reference should reflect the order reference found in the merchant’s systems.     └─➔ subsite String(40) The subsite field can be used to perform [split settlement][split-settlement] on the payment. The subsites must be resolved with Swedbank Pay [reconciliation][settlement-and-reconciliation] before being used.     └➔ riskIndicator array This optional array consist of information that helps verifying the payer. Providing these fields decreases the likelyhood of having to promt for 3-D Secure authenticaiton of the payer when they are authenticating the purchacse.     └─➔ deliveryEmailAddress string Optional (increased chance for frictionless flow if set). For electronic delivery, the email address to which the merchandise was delivered.     └─➔ deliveryTimeFrameIndicator string Optional (increased chance for frictionless flow if set). Indicates the merchandise delivery timeframe.01 (Electronic Delivery)02 (Same day shipping)03 (Overnight shipping)04 (Two-day or more shipping)     └─➔ preOrderDate string Optional (increased chance for frictionless flow if set). For a pre-ordered purchase. The expected date that the merchandise will be available.FORMAT: “YYYYMMDD”     └─➔ preOrderPurchaseIndicator string Optional (increased chance for frictionless flow if set). Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.01 (Merchandise available)02 (Future availability)     └─➔ shipIndicator string Optional (increased chance for frictionless flow if set). Indicates shipping method chosen for the transaction. 01 (Ship to cardholder’s billing address)02 (Ship to another verified address on file with merchant)03 (Ship to address that is different than cardholder’s billing address)04 (Ship to Store / Pick-up at local store. Store address shall be populated in shipping address fields)05 (Digital goods, includes online services, electronic giftcards and redemption codes)06 (Travel and Event tickets, not shipped)07 (Other, e.g. gaming, digital service)     └─➔ giftCardPurchase boolean Optional (increased chance for frictionless flow if set). true if this is a purchase of a gift card.     └─➔ reOrderPurchaseIndicator string Optional (increased chance for frictionless flow if set). Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.01 (Merchandise available)02 (Future availability)     └➔ pickUpAddress object If shipIndicator set to 4, then prefil this.     └─➔ name string If shipIndicator set to 4, then prefil this.     └─➔ streetAddress string If shipIndicator set to 4, then prefil this.     └─➔ coAddress string If shipIndicator set to 4, then prefil this.     └─➔ city string If shipIndicator set to 4, then prefil this.     └─➔ zipCode string If shipIndicator set to 4, then prefil this.     └─➔ countryCode string If shipIndicator set to 4, then prefil this.   Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"instrument\": \"CreditCard\", \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"transactions\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" }, \"urls\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"settings\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" } }, \"operations\": [ { \"rel\": \"update-payment-abort\", \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"rel\": \"redirect-authorization\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/payments/authorize/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"method\": \"GET\", \"contentType\": \"text/html\" }, { \"rel\": \"view-authorization\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/core/scripts/client/px.creditcard.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } Type of authorization - Intent Authorization (two-phase): If you want the credit card to reserve the amount, you will have to specify that the intent of the Purchase is Authorization. The amount will be reserved but not charged. You will later (i.e. when you are ready to ship the purchased products) have to make a Capture or Cancel request. General No 3-D Secure and card acceptance: There are optional paramers that can be used in relation to 3-D Secure and card acceptance. By default, most credit card agreements with an acquirer will require that you use 3-D Secure for card holder authentication. However, if your agreement allows you to make a card payment without this authentication, or that specific cards can be declined, you may adjust these optional parameters when creating the payment. Defining CallbackURL: When implementing a scenario, it is optional to set a CallbackURL in the POST request. If CallbackURL is set, then Swedbank Pay will send a postback request to this URL when the consumer has fulfilled the payment. See the Callback API description here. Type of capture - Intent AutoCapture (one-phase): If you want the credit card to be charged right away, you will have to specify that the intent of the Purchase is AutoCapture. The credit card will be charged and you don’t need to do any more financial operations to this purchase. Payment Resource Payment Resource The payment resource is central to all payment instruments. All operations that target the payment resource directly produce a response similar to the example seen below. The response given contains all operations that are possible to perform in the current state of the payment. Request GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"payeeInfo\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"urls\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"transactions\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/core/scripts/client/px.creditcard.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;operation=authorize\", \"rel\": \"view-authorization\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/payments/authorize/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"redirect-authorization\", \"contentType\": \"text/html\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"rel\": \"create-capture\", \"contentType\": \"application/json\" } ] } Property Type Description payment object The payment object contains information about the specific payment. └➔ id string The relative URI of the payment. └➔ number integer The payment number , useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. └➔ created string The ISO-8601 date of when the payment was created. └➔ updated string The ISO-8601 date of when the payment was updated. └➔ state string Ready , Pending , Failed or Aborted . Indicates the state of the payment. This field is only for status display purposes. To └➔ prices object The prices resource lists the prices related to a specific payment. └➔ prices.id string The relative URI of the current prices resource. └➔ description string(40) A textual description of maximum 40 characters of the purchase. └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like e-mail address, mobile number, customer number etc. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string nb-NO , sv-SE or en-US └➔ urls string The URI to the urls resource where all URIs related to the payment can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment can be retrieved. operations array The array of possible operations to perform └─➔ method string The HTTP method to use when performing the operation. └─➔ href string The target URI to perform the operation against. └─➔ rel string The name of the relation the operation has to the current resource. Operations The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-payment-abort aborts the payment order before any financial transactions are performed. redirect-authorization Contains the URI that is used to redirect the consumer to the Swedbank Pay Payments containing the card authorization UI. view-authorization Contains the JavaScript href that is used to embed the card authorization UI directly on the webshop/merchant site create-capture Creates a capture transaction in order to charge the reserved funds from the consumer. create-cancellation Creates a cancellation transaction that cancels a created, but not yet captured payment. 3-D Secure authentication When dealing with credit card payments, 3-D Secure authentication of the cardholder is an essential topic. There are two alternative outcomes of a credit card payment: 3-D Secure enabled (by default): 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. Card supports 3-D Secure: If the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay participant IssuingBank activate Payer Payer-&gt;&gt;+Merchant: start purchase deactivate Payer Merchant-&gt;&gt;+SwedbankPay: POST /psp/creditcard/payments deactivate Merchant note left of Merchant: First API request SwedbankPay--&gt;+Merchant: payment resource deactivate SwedbankPay Merchant--&gt;&gt;+SwedbankPay: GET &lt;payment.id&gt; deactivate Merchant note left of Merchant: Second API request SwedbankPay--&gt;&gt;+Merchant: rel: direct-authorization deactivate SwedbankPay Merchant--&gt;&gt;+Payer: redirect to 3-D Secure page deactivate Merchant Payer-&gt;&gt;+IssuingBank: 3-D Secure authentication deactivate Payer note left of Payer: redirect to card issuing bank IssuingBank--&gt;&gt;+Payer: redirect to merchant deactivate IssuingBank note left of Payer: redirect back to merchant Payer-&gt;&gt;+Merchant: access merchant page deactivate Payer Merchant-&gt;&gt;+SwedbankPay: GET &lt;payment.id&gt; deactivate Merchant note left of Merchant: Third API request SwedbankPay--&gt;&gt;+Merchant: rel: redirect-authorization deactivate SwedbankPay Merchant--&gt;&gt;Payer: display purchase result deactivate Merchant Options after posting a purchase payment If the payment shown above is done as a two-phase (Authorization), you will need to implement the Capture and Cancel requests. Abort: It is possible to abort a payment if the payment has no successful transactions. For reversals, you will need to implement the Reversal request. Callback from Swedbank Pay: Whenever changes to the payment occur a Callback request will be posted to the callbackUrl, generated when the payment was created. Back: Seamless View Next: After Payment",
    "tags": "",
    "url": "/payments/card/direct.html"
  },{
    "title": "Swedbank Pay Payments Invoice Direct",
    "text": "report_problem Disclaimer Direct Invoice is about to be phased out. This section is only for merchants that currently have a contract with this integration. Direct is a payment service where Swedbank Pay helps improve cashflow by purchasing merchant invoices. Swedbank Pay receives invoice data, which is used to produce and distribute invoices to the consumer/end-user Introduction Collect all purchase information and send it in a POST request to Swedbank Pay. Include personal information (SSN and postal code) and send it to Swedbank Pay. Make a new POST request towards Swedbank Pay to retrieve the name and address of the customer. Create an authorization transaction by calculating the final price / amount. Make a third POST request with consumer data as input. Send a GET request with the paymentID to get the authorization result Make a Capture by creating a POST request By making a Capture, Swedbank Pay will generate the invoice to the consumer and the order is ready for shipping. Options before posting a payment All valid options when posting a payment with operation equal to FinancingConsumer, are described in other features.   Norway Finland Sweden operation FinancingConsumer FinancingConsumer FinancingConsumer currency NOK EUR SEK invoiceType PayExFinancingNO PayExFinancingFI PayExFinancingSE An invoice payment is always two-phased based - you create an Authorize transaction, that is followed by a Capture or Cancel request. Defining CallbackURL: When implementing a scenario, it is optional to set a CallbackURL in the POST request. If callbackURL is set Swedbank Pay will send a postback request to this URL when the consumer has fulfilled the payment. info Note that the invoice will not be created/distributed before you have made a capture request. . The Capture , Cancel, Reversal opions are described in other features. The links will take you directly to the API description for the specific request. The sequence diagram below shows a high level description of the invoice process, including the four requests you have to send to Swedbank Pay to create an authorize transaction for Sweden (SE) and Norway (NO). Note that for Finland (FI) the process is different as the Merchant needs to send a POST request with the approvedLegalAddress (SNN and postal number). Invoice flow (SE and NO) sequenceDiagram Consumer-&gt;&gt;Merchant: Start purchase (collect SSN and postal number) activate Merchant note left of Merchant: First API request Merchant-&gt;&gt;-Swedbank Pay: POST &lt;Invoice Payments&gt; (operation=FinancingConsumer) activate Swedbank Pay Swedbank Pay--&gt;&gt;-Merchant: payment resource activate Merchant note left of Merchant: Second API request Merchant--&gt;&gt;-Swedbank Pay: POST &lt;approvedLegalAddress&gt; (SNN and postal number) activate Swedbank Pay Swedbank Pay--&gt;&gt;Swedbank Pay: Update payment with consumer delivery address Swedbank Pay--&gt;&gt;-Merchant: Approved legaladdress information activate Merchant Merchant--&gt;&gt;-Consumer: Display all details and final price activate Consumer Consumer-&gt;&gt;Consumer: Input email and mobile number Consumer-&gt;&gt;-Merchant: Confirm purchase activate Merchant note left of Merchant: Third API request Merchant-&gt;&gt;-Swedbank Pay: POST &lt;invoice authorizations&gt; (Transaction Activity=FinancingConsumer) activate Swedbank Pay Swedbank Pay--&gt;&gt;-Merchant: Transaction result activate Merchant note left of Merchant: Fourth API request Merchant-&gt;&gt;-Swedbank Pay: GET &lt;invoice payments&gt; activate Swedbank Pay Swedbank Pay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Consumer: Display result Invoice Flow (FI) sequenceDiagram Consumer-&gt;&gt;Merchant: start purchase activate Merchant note left of Merchant: First API request Merchant-&gt;&gt;-Swedbank Pay: POST &lt;Invoice Payments&gt; (operation=FinancingConsumer) activate Swedbank Pay Swedbank Pay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Consumer: Display All detail and final price activate Consumer Consumer--&gt;&gt;Consumer: Input consumer data Consumer-&gt;&gt;-Merchant: Confirm purchase activate Merchant note left of Merchant: Second API request Merchant-&gt;&gt;-Swedbank Pay: POST &lt;Invoice autorizations&gt; (Transaction Activity=FinancingConsumer) activate Swedbank Pay Swedbank Pay-&gt;&gt;-Merchant: Transaction result activate Merchant note left of Merchant: Third API request Merchant-&gt;&gt;-Swedbank Pay: GET &lt;Invoice payments&gt; activate Swedbank Pay Swedbank Pay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Consumer: Display result API Requests The API requests are displayed in the purchase flow. You can complete the invoice payment with following operation options: Financing Consumer Recur Verify Our payment example below uses the FinancingConsumer value. Financing Consumer Request HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"operation\": \"FinancingConsumer\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"prices\": [ { \"type\": \"Invoice\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"payerReference\": \"SomeReference\", \"generateReccurenceToken\": false, \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"callbackUrl\": \"http://example.com/payment-callback\", \"logoUrl\": \"http://example.com/logo.png\", \"termsOfServiceUrl\": \"http://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"PR123\", \"payeeName\": \"Merchant1\", \"productCategory\": \"PC1234\", \"subsite\": \"MySubsite\" } }, \"invoice\": { \"invoiceType\": \"PayExFinancingSe\" } } Required Property Type Description ✔︎︎︎︎︎ payment object The payment object contains information about the specific payment. ✔︎︎︎︎︎ └➔ operation string The operation that the payment is supposed to perform. The FinancingConsumer operation is used in our example. Take a look at the Other Features section for a full examples of the following operation options: FinancingConsumer, Recur, Verify ✔︎︎︎︎︎ └➔ intent string Authorization is the only intent option for invoice. Reserves the amount, and is followed by a cancellation or capture of funds. ✔︎︎︎︎︎ └➔ currency string NOK, SEK, DKK, USD or EUR. ✔︎︎︎︎︎ └➔ prices object The prices resource lists the prices related to a specific payment. ✔︎︎︎︎︎ └─➔ type string Use the Invoice type here ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK 5000 = 50.00 SEK. ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.   └➔ payerReference string The reference to the payer (consumer/end user) from the merchant system. E.g mobile number, customer number etc.   └➔ generateRecurrenceToken boolean true or false. Set this to true if you want to create a recurrenceToken for future use Recurring purchases (subscription payments). ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - see user agent definition ✔︎︎︎︎︎ └➔ language string nb-NO, sv-SE or en-US. ✔︎︎︎︎︎ └➔ urls object The urls resource lists urls that redirects users to relevant sites.   └─➔ hostUrl array The array of URLs valid for embedding of Swedbank Pay Hosted Views. If not supplied, view-operation will not be available. ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further.   └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with paymentUrl; only cancelUrl or paymentUrl can be used, not both.   └─➔ callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details.   └─➔ logoUrl string The URL that will be used for showing the customer logo. Must be a picture with maximum 50px height and 400px width. Require https.   └─➔ termsOfServiceUrl string A URL that contains your terms and conditions for the payment, to be linked on the payment page. Require https. ✔︎︎︎︎︎ └➔ payeeInfo object The payeeInfo contains information about the payee. ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. ✔︎︎︎︎︎ └─➔ payeeReference string(30*) A unique reference from the merchant system, which is used as a receipt/invoice number in Invoice Payments. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.   └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.   └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference String(50) The order reference should reflect the order reference found in the merchant’s systems.   └─➔ subsite String(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"instrument\": \"Invoice\", \"created\": \"YYYY-MM-DDThh:mm:ssZ\", \"updated\": \"YYYY-MM-DDThh:mm:ssZ\", \"state\": \"Ready\", \"operation\": \"FinancingConsumer\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"amount\": 1500, \"remainingCaptureAmount\": 1000, \"remainingCancellationAmount\": 1000, \"remainingReversalAmount\": 500, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"transactions\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" }, \"payeeInfo\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"urls\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"settings\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" }, \"approvedLegalAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/approvedlegaladdress\" }, \"maskedApprovedLegalAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/maskedapprovedlegaladdress\" } }, \"operations\": [ { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"method\": \"PATCH\" }, { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\", \"rel\": \"create-authorize\", \"method\": \"POST\" }, { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/approvedlegaladdress\", \"rel\": \"create-approved-legal-address\", \"method\": \"POST\" } ] } Payment Resource The payment resource is central to all payment instruments. All operations that target the payment resource directly produce a response similar to the example seen below. The response given contains all operations that are possible to perform in the current state of the payment. Request GET /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SE\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"transactions\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" }, \"payeeInfo\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"urls\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"settings\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" }, \"approvedLegalAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/approvedlegaladdress\" }, \"maskedApprovedLegalAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/maskedapprovedlegaladdress\" } }, \"approvedLegalAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/approvedlegaladdress\" }, \"operations\": [ { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"rel\": \"create-capture\", \"method\": \"POST\" }, { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\", \"rel\": \"create-cancel\", \"method\": \"POST\" }, { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/approvedlegaladdress\", \"rel\": \"create-approved-legal-address\", \"method\": \"POST\" } ] } If a GET method is used from paymentUI with a paymentToken, the following operations can be returned, depending on state of the payment and the last transaction. HTTP/1.1 200 OK Content-Type: application/json { \"href\": \"https://example.com/cancelUrl\", \"rel\": \"redirect-merchant-cancel\", \"method\": \"GET\" } { \"href\": \"https://example.com/completeUrl\", \"rel\": \"redirect-merchant-complete\", \"method\": \"GET\" } { \"href\": \"https://example.com/cancelUrl\", \"rel\": \"redirect-merchant-cancel\", \"method\": \"GET\" } { \"href\": \"https://example.com/completeUrl\", \"rel\": \"redirect-merchant-complete\", \"method\": \"GET\" } Property Type Description payment object The payment object contains information about the specific payment. └➔ id string The relative URI of the payment. └➔ number integer The payment number , useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. └➔ created string The ISO-8601 date of when the payment was created. └➔ updated string The ISO-8601 date of when the payment was updated. └➔ state string Ready , Pending , Failed or Aborted . Indicates the state of the payment. This field is only for status display purposes. To └➔ prices object The prices resource lists the prices related to a specific payment. └➔ prices.id string The relative URI of the current prices resource. └➔ description string(40) A textual description of maximum 40 characters of the purchase. └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like e-mail address, mobile number, customer number etc. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string nb-NO , sv-SE or en-US └➔ urls string The URI to the urls resource where all URIs related to the payment can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment can be retrieved. operations array The array of possible operations to perform └─➔ method string The HTTP method to use when performing the operation. └─➔ href string The target URI to perform the operation against. └─➔ rel string The name of the relation the operation has to the current resource. Operations The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-payment-abort Aborts the payment order before any financial transactions are performed. redirect-authorization Contains the URI that is used to redirect the consumer to the Swedbank Pay Payments containing the card authorization UI. view-authorization Contains the JavaScript href that is used to embed the card authorization UI directly on the webshop/merchant site create-capture Creates a capture transaction in order to charge the reserved funds from the consumer. create-cancellation Creates a cancellation transaction that cancels a created, but not yet captured payment. Back: Seamless View Next: After Payment",
    "tags": "",
    "url": "/payments/invoice/direct.html"
  },{
    "title": "Good Commit Practice",
    "text": "The following document is a fork of OpenStack’s Git Commit Good Practice, rewritten to suit Swedbank Pay needs. It is based on experience doing code development, bug troubleshooting and code review across a number of projects using Git. Examination of other open source projects suggested they all follow a fairly common practice. It is motivated by a desire to improve the quality of the Git history in any repository. Quality is a hard term to define in computing; one person’s “Thing of Beauty” is another’s “Evil Hack”. We can, however, come up with some general guidelines for what to do, or conversely what not to do, when publishing Git commits for merge with a project. This topic can be split into two areas of concern: The structured set/split of the code changes The information provided in the commit message Executive Summary The points and examples that will be raised in this document ought to clearly demonstrate the value in splitting up changes into a sequence of individual commits, and the importance in writing good commit messages to go along with them. If these guidelines were widely applied it would result in a significant improvement in the quality of the Git history. Both a carrot and a stick will be required to effect changes. This document intends to be the carrot by alerting people to the benefits, while for anyone doing code reviews, it can act as the stick. In other words, when reviewing a change, do not simply look at the correctness of the code. Review the commit message itself and request improvements to its content. Look out for commits which are mixing multiple logical changes and require the submitter to split them into separate commits. Ensure whitespace changes are not mixed in with functional changes. Ensure no-op code refactoring is done separately from functional changes. And so on. Software source code is “read mostly, write occassionally” and thus the most important criteria is to improve the long term maintainability by the large pool of developers in the community, and not to sacrifice too much for the sake of the single author who may never touch the code again. And now the long detailed guidelines and examples of good and bad practice. Structural split of changes The cardinal rule for creating good commits is to ensure there is only one “logical change” per commit. There are many reasons why this is an important rule: The smaller the amount of code being changed, the quicker and easier it is to review and identify potential flaws. If a change is found to be flawed later, it may be necessary to revert the broken commit. This is much easier to do if there are not other unrelated code changes entangled with the original commit. When troubleshooting problems using Git’s bisect capability, small well defined changes will aid in isolating exactly where the code problem was introduced. When browsing history using Git annotate/blame, small well defined changes also aid in isolating exactly where &amp; why a piece of code came from. Things to avoid when creating commits With that in mind, there are some commonly encountered examples of bad things to avoid: Mixing formatting changes with functional code changes The formatting (code style, whitespace, etc.) changes will obscure the important functional changes, making it harder for a reviewer to correctly determine whether the change is correct. Solution: Create 2 commits, one with the formatting changes and one with the functional changes. Typically the formatting change would be done first, but that need not be a hard rule. Mixing two unrelated functional changes Again the reviewer will find it harder to identify flaws if two unrelated changes are mixed together. If it becomes necessary to later revert a broken commit, the two unrelated changes will need to be untangled, with further risk of bug creation. Sending large new features in a single giant commit It may well be the case that the code for a new feature is only useful when all of it is present. This does not, however, imply that the entire feature should be provided in a single commit. To group related code changes that for the reasons explained here are split up into several separate commits, intuitively named branches should be used instead. New features often entail refactoring existing code. It is highly desirable that any refactoring is done in commits which are separate from those implementing the new feature. This helps reviewers and test suites validate that the refactoring has no unintentional functional changes. Even the newly written code can often be split up into multiple pieces that can be independently reviewed. For example, changes which add new internal APIs/classes, can be in self-contained commits. Again this leads to easier code review. It also allows other developers to cherry-pick small parts of the work, if the entire new feature is not immediately ready for merge. Addition of new public HTTP APIs or RPC interfaces should be done in commits separate from the actual internal implementation. This will encourage the author &amp; reviewers to think about the generic API/RPC design, and not simply pick a design that is easier for their currently chosen internal implementation. If patch impacts a public HTTP, use the APIImpact flag (see including external references). The basic rule to follow is: If a code change can be split into a sequence of patches/commits, then it should be split. Less is not more. More is more. Examples of bad practice Now for some illustrations from Nova history. NB, although commit hashes are quoted for reference, author names are removed, since no single person needs to be blamed/picked on. Almost everybody is guilty of violating these good practice rules at some time or another. In addition the people who reviewed and approved these commits are just as guilty as the person who wrote/submitted them. Example 1 commit ae878fc8b9761d099a4145617e4a48cbeb390623 Author: [removed] Date: Fri Jun 1 01:44:02 2012 +0000 Refactor libvirt create calls * minimizes duplicated code for create * makes wait_for_destroy happen on shutdown instead of undefine * allows for destruction of an instance while leaving the domain * uses reset for hard reboot instead of create/destroy * makes resume_host_state use new methods instead of hard_reboot * makes rescue/unrescue not use hard reboot to recreate domain Change-Id: I2072f93ad6c889d534b04009671147af653048e7 There are at least two independent changes made in this commit. The switch to use the new reset API for the hard_reboot method. The adjustment to internal driver methods to not use hard_reboot. What is the problem with this? First there is no compelling reason why these changes needed to be made at the same time. A first commit could have included the changes to stop calling hard_reboot in various places. A second commit could have re-written the hard_reboot impl. Second, as the switch to using the libvirt ##reset## method was buried in the large code refactoring, reviewers missed the fact that this was introducing a dependency on a newer libvirt API version. This commit was identified as the culprit reasonably quickly, but a trivial revert is not possible, due to the wide variety of unrelated changes included. Example 2 commit e0540dfed1c1276106105aea8d5765356961ef3d Author: [removed] Date: Wed May 16 15:17:53 2012 +0400 blueprint lvm-disk-images Add ability to use LVM volumes for VM disks. Implements LVM disks support for libvirt driver. VM disks will be stored on LVM volumes in volume group specified by `libvirt_images_volume_group` option. Another option `libvirt_local_images_type` specify which storage type will be used. Supported values are `raw`, `lvm`, `qcow2`, `default`. If `libvirt_local_images_type` = `default`, usual logic with `use_cow_images` flag is used. Boolean option `libvirt_sparse_logical_volumes` controls which type of logical volumes will be created (sparsed with virtualsize or usual logical volumes with full space allocation). Default value for this option is `False`. Commit introduce three classes: `Raw`, `Qcow2` and `Lvm`. They contain image creation logic, that was stored in `LibvirtConnection._cache_image` and `libvirt_info` methods, that produce right `LibvirtGuestConfigDisk` configurations for libvirt. `Backend` class choose which image type to use. Change-Id: I0d01cb7d2fd67de2565b8d45d34f7846ad4112c2 This is introducing one major new feature, so on the surface it seems reasonable to use a single commit, but looking at the patch, it clearly has entangled a significant amount of code refactoring with the new LVM feature code. This makes it hard to identify likely regressions in support for QCow2/Raw images. This should have been split into at least four separate commits: Replace the use_cow_images config FLAG with the new FLAG libvirt_local_images_type, with back-compat code for support of legacy use_cow_images FLAG 2. Creation of internal “Image” class and subclasses for Raw &amp; QCow2 image type impls. Refactor libvirt driver to replace raw/qcow2 image management code, with calls to the new Image class APIs. Introduce the new “LVM” Image class implementation. Examples of good practice Example 1 commit 3114a97ba188895daff4a3d337b2c73855d4632d Author: [removed] Date: Mon Jun 11 17:16:10 2012 +0100 Update default policies for KVM guest PIT &amp; RTC timers commit 573ada525b8a7384398a8d7d5f094f343555df56 Author: [removed] Date: Tue May 1 17:09:32 2012 +0100 Add support for configuring libvirt VM clock and timers ```http Together these two changes provide support for configuring the KVM guest timers. The introduction of the new APIs for creating libvirt XML configuration have been clearly separated from the change to the KVM guest creation policy, which uses the new APIs. {:.code-header} **Example 2** ```http commit 62bea64940cf629829e2945255cc34903f310115 Author: [removed] Date: Fri Jun 1 14:49:42 2012 -0400 Add a comment to rpc.queue_get_for(). Change-Id: Ifa7d648e9b33ad2416236dc6966527c257baaf88 commit cf2b87347cd801112f89552a78efabb92a63bac6 Author: [removed] Date: Wed May 30 14:57:03 2012 -0400 Add shared_storage_test methods to compute rpcapi. ...snip... Add get_instance_disk_info to the compute rpcapi. ...snip... Add remove_volume_connection to the compute rpcapi. ...snip... Add compare_cpu to the compute rpcapi. ...snip... Add get_console_topic() to the compute rpcapi. ...snip... Add refresh_provider_fw_rules() to compute rpcapi. ...many more commits... This sequence of commits refactored the entire RPC API layer inside nova to allow pluggable messaging implementations. With such a major change in a core piece of functionality, splitting up the work into a large sequence of commits was key to be able to do meaningful code review, and track / identify possible regressions at each step of the process. Information in commit messages As important as the content of the change, is the content of the commit message describing it. When writing a commit message there are some important things to remember: Do not assume the reviewer understands what the original problem was When reading bug reports, after a number of back &amp; forth comments, it is often as clear as mud, what the root cause problem is. The commit message should have a clear statement as to what the original problem is. The bug is merely interesting historical background on how the problem was identified. It should be possible to review a proposed patch for correctness without needing to read the bug ticket. Do not assume the reviewer has access to external web services/site In 6 months time when someone is on a train/plane/coach/beach/pub troubleshooting a problem &amp; browsing Git history, there is no guarantee they will have access to the online bug tracker, or online blueprint documents. The great step forward with distributed SCM is that you no longer need to be “online” to have access to all information about the code repository. The commit message should be totally self-contained, to maintain that benefit. Do not assume the code is self-evident/self-documenting What is self-evident to one person, might be clear as mud to another person. Always document what the original problem was and how it is being fixed, for any change except the most obvious typos, or whitespace only commits. Describe why a change is being made A common mistake is to just document how the code has been written, without describing why the developer chose to do it that way. By all means describe the overall code structure, particularly for large changes, but more importantly describe the intent/motivation behind the changes. Read the commit message to see if it hints at improved code structure Often when describing a large commit message, it becomes obvious that a commit should have in fact been split into 2 or more parts. Don’t be afraid to go back and rebase the change to split it up into separate commits. Ensure sufficient information to decide whether to review When Gerrit sends out email alerts for new patch submissions there is minimal information included, principally the commit message and the list of files changes. Given the high volume of patches, it is not reasonable to expect all reviewers to examine the patches in detail. The commit message must thus contain sufficient information to alert the potential reviewers to the fact that this is a patch they need to look at. The first commit line is the most important In Git commits the first line of the commit message has special significance. It is used as email subject line, git annotate messages, gitk viewer annotations, merge commit messages and many more places where space is at a premium. As well as summarizing the change itself, it should take care to detail what part of the code is affected. eg if it affects the libvirt driver, mention ‘libvirt’ somewhere in the first line. Describe any limitations of the current code If the code being changed still has future scope for improvements, or any known limitations then mention these in the commit message. This demonstrates to the reviewer that the broader picture has been considered and what tradeoffs have been done in terms of short term goals vs. long term wishes. Do not include patch set-specific comments In other words, if you rebase your change please don’t add “Patch set 2: rebased” to your commit message. That isn’t going to be relevant once your change has merged. Please do make a note of that in Gerrit as a comment on your change, however. It helps reviewers know what changed between patch sets. This also applies to comments such as “Added unit tests”, “Fixed localization problems”, or any other such patch set to patch set changes that don’t affect the overall intent of your commit. The main rule to follow is: The commit message must contain all the information required to fully understand &amp; review the patch for correctness. Less is not more. More is more. Including external references The commit message is primarily targeted towards human interpretation, but there is always some metadata provided for machine use. For source code hosted on GitHub, a reference to an issue can be made by simply writing #&lt;issue-number&gt;. All machine targeted metadata is of secondary consequence to humans and thus it should preferably be grouped together at the end of the commit message. For simple references like GitHub issues, this is not required. Note: Although it is common practice across many open source projects using Git to include a Signed-off-by tag (generated by ‘git commit -s’), this is not required. Prior to gaining the ability to submit code, it should rather be required that all contributors sign a CLA, which serves an equivalent purpose. We encourage the use of Co-Authored-By: name name@example.com in commit messages to indicate people who worked on a particular patch. It’s a convention for recognizing multiple authors, and our projects would encourage the stats tools to observe it when collecting statistics. Summary of Git commit message structure Provide a brief description of the change in the first line. Insert a single blank line after the first line. Provide a detailed description of the change in the following lines, breaking paragraphs where needed. The first line should be limited to 50 characters and should not end with a period. Subsequent lines should be wrapped at 72 characters. vim (the default $EDITOR on most distros) can wrap automatically lines for you. In most cases you just need to copy the example vimrc file (which can be found somewhere like /usr/share/vim/vim74/vimrc_example.vim) to /.vimrc if you don’t have one already. After editing a paragraph, you can re-wrap it by pressing escape, ensuring the cursor is within the paragraph and typing gqip. Put external references at the very end of the commit message. For example: Switch libvirt get_cpu_info method over to use config APIs The get_cpu_info method in the libvirt driver currently uses XPath queries to extract information from the capabilities XML document. Switch this over to use the new config class LibvirtConfigCaps. Also provide a test case to validate the data being returned. DocImpact Closes-Bug: #1003373 Implements: blueprint libvirt-xml-cpu-model Change-Id: I4946a16d27f712ae2adf8441ce78e6c0bb0bb657 Some examples of bad practice Now for some illustrations from Nova history, again with authors names removed since no one person is to blame for these. Example 1 commit 468e64d019f51d364afb30b0eed2ad09483e0b98 Author: [removed] Date: Mon Jun 18 16:07:37 2012 -0400 Fix missing import in compute/utils.py Fixes bug 1014829 Problem: this does not mention what imports where missing and why they were needed. This info was actually in the bug tracker, and should have been copied into the commit message, so that it would provide a self-contained description. e.g.: Add missing import of 'exception' in compute/utils.py nova/compute/utils.py makes a reference to exception.NotFound, however exception has not been imported. Example 2 commit 2020fba6731634319a0d541168fbf45138825357 Author: [removed] Date: Fri Jun 15 11:12:45 2012 -0600 Present correct ec2id format for volumes and snaps Fixes bug 1013765 * Add template argument to ec2utils.id_to_ec2_id() calls Change-Id: I5e574f8e60d091ef8862ad814e2c8ab993daa366 Problem: this does not mention what the current (broken) format is, nor what the new fixed format is. Again this info was available in the bug tracker and should have been included in the commit message. Furthermore, this bug was fixing a regression caused by an earlier change, but there is no mention of what the earlier change was. e.g.: Present correct ec2id format for volumes and snaps During the volume uuid migration, done by changeset XXXXXXX, ec2 id formats for volumes and snapshots was dropped and is now using the default instance format (i-xxxxx). These need to be changed back to vol-xxx and snap-xxxx. Adds a template argument to ec2utils.id_to_ec2_id() calls Fixes bug 1013765 Example 3 commit f28731c1941e57b776b519783b0337e52e1484ab Author: [removed] Date: Wed Jun 13 10:11:04 2012 -0400 Add libvirt min version check. Fixes LP Bug #1012689. Change-Id: I91c0b7c41804b2b25026cbe672b9210c305dc29b Problem: This commit message is merely documenting what was done, and not why it was done. It should have mentioned what earlier changeset introduced the new min libvirt version. It should also have mentioned what behaviour is when the check fails. e.g.: Add libvirt version check, min 0.9.7 The commit XXXXXXXX introduced use of the 'reset' API which is only available in libvirt 0.9.7 or newer. Add a check performed at startup of the compute server against the libvirt connection version. If the version check fails the compute service will shutdown. Fixes LP Bug #1012689. Change-Id: I91c0b7c41804b2b25026cbe672b9210c305dc29b Examples of good practice Example 1 commit 3114a97ba188895daff4a3d337b2c73855d4632d Author: [removed] Date: Mon Jun 11 17:16:10 2012 +0100 Update default policies for KVM guest PIT &amp; RTC timers The default policies for the KVM guest PIT and RTC timers are not very good at maintaining reliable time in guest operating systems. In particular Windows 7 guests will often crash with the default KVM timer policies, and old Linux guests will have very bad time drift Set the PIT such that missed ticks are injected at the normal rate, ie they are delayed Set the RTC such that missed ticks are injected at a higher rate to \"catch up\" This corresponds to the following libvirt XML &lt;clock offset='utc'&gt; &lt;timer name='pit' tickpolicy='delay'/&gt; &lt;timer name='rtc' tickpolicy='catchup'/&gt; &lt;/clock&gt; And the following KVM options -no-kvm-pit-reinjection -rtc base=utc,driftfix=slew This should provide a default configuration that works acceptably for most OS types. In the future this will likely need to be made configurable per-guest OS type. Closes-Bug: #1011848 Change-Id: Iafb0e2192b5f3c05b6395ffdfa14f86a98ce3d1f Some things to note about this example commit message It describes what the original problem is (bad KVM defaults) It describes the functional change being made (the new PIT/RTC policies) It describes what the result of the change is (new the XML/QEMU args) It describes scope for future improvement (the possible per-OS type config) It uses the Closes-Bug notation Example 2 commit 31336b35b4604f70150d0073d77dbf63b9bf7598 Author: [removed] Date: Wed Jun 6 22:45:25 2012 -0400 Add CPU arch filter scheduler support In a mixed environment of running different CPU architecutres, one would not want to run an ARM instance on a X86_64 host and vice versa. This scheduler filter option will prevent instances running on a host that it is not intended for. The libvirt driver queries the guest capabilities of the host and stores the guest arches in the permitted_instances_types list in the cpu_info dict of the host. The Xen equivalent will be done later in another commit. The arch filter will compare the instance arch against the permitted_instances_types of a host and filter out invalid hosts. Also adds ARM as a valid arch to the filter. The ArchFilter is not turned on by default. Change-Id: I17bd103f00c25d6006a421252c9c8dcfd2d2c49b Some things to note about this example commit message It describes what the problem scenario is (mixed arch deployments) It describes the intent of the fix (make the schedular filter on arch) It describes the rough architecture of the fix (how libvirt returns arch) It notes the limitations of the fix (work needed on Xen)",
    "tags": "",
    "url": "/resources/development-guidelines/good-commit-practice.html"
  },{
    "title": "Swedbank Pay Payments",
    "text": "Payments is our off-the-rack assortment of payment instruments. You can pick and choose among them to tailor the instrument package best suited for your business. Is Card the only payment instrument you need? Go for Card only. Do you want Card and Invoice? Implement Card and Invoice. Want them all? Have them all. Each payment instrument is set up with a separate contract and integration. With a couple of exceptions, our payment instruments are available on three platforms. Choose between our easy-to-use PCI compliant platforms Redirect and Seamless View – or use Swedbank Pay Direct API to integrate directly. Our payment instruments and their platform availability are listed in the table below.   Payment instrument Seamless View Redirect Direct API Region Credit card ✔︎︎︎︎︎ ✔︎︎︎︎︎ ✔︎︎︎︎︎ Swedbank Pay Invoice ✔︎︎︎︎︎ ✔︎︎︎︎︎   Vipps ✔︎︎︎︎︎ ✔︎︎︎︎︎   Swish ✔︎︎︎︎︎ ✔︎︎︎︎︎ ✔︎︎︎︎︎ ︎ Mobile Pay   ✔︎︎︎︎︎   Prerequisites To start integrating Swedbank Pay Payments, you need the following: An HTTPS enabled web server. An agreement which includes Swedbank Pay Payments. Credentials (Merchant Access Token) from Swedbank Pay retrieved from Swedbank Pay Admin. Platform options Here are our three platform options at a glance. You can read more about the integration process by visiting the sections for each payment instrument. Seamless View With Seamless Views you can initiate the payment process directly in an iframe on your site. If you prefer that the consumer isn’t redirected away from you, this option enables you to embed our payment page seamlessly into your shopping experience. Redirect The Redirect platform redirects the consumers to a Swedbank Pay hosted payment page. The consumer will be redirected back to your page when the payment is completed. Direct Direct is the option where you integrate directly using our Direct API. This is an integration with the most flexibility and opportunities. If you want to offer Card Payments and choose this option, you have to be PCI-DSS compliant. The Fundamentals info All Payments APIs in the Swedbank Pay API Platform share a common foundation with a similar payment process for all payment instruments, reducing complexity and enabling a more straightforward integration. There are two main payment types, two-phase and one-phase payments. The two seem very similar from a consumer’s point of view, but there are key differences you should know about. Two-Phase Payments A two-phase payment is performed in two steps – an authorization which reserves the consumer’s funds, and a capture of the funds at a later time, usually when the goods are shipped. This is the most common payment type, and it is used by Card Payments, Vipps Payments, MobilePay payments and Invoice Payments. A capture of an invoice will not capture any funds, but trigger the invoice distribution and send it to the consumer. The payment instruments that support two-phase payments are: Card Invoice MobilePay Vipps One-Phase Payments There are two types of one-phase payments – sale and autoCapture. sale is used by payment instruments such as Swish. These payments will have a sale transaction instead of the authorization and capture. The funds will be captured from the consumer straight away. autoCapture is only available for Card Payments. The mechanics work the same way as a two-phase payment, with two separate transactions – one for the authorization and one for the capture. As the name implies, the capture transaction is performed automatically when the authorization is successful. Because of this, autoCapture should only be used when dealing with digital products, since they are shipped instantly. As the funds are captured instantly, cancel is not available for either of the one-phase payments. abort and reversal can be performed the same way as with two-phase payments. The payment instruments that support one-phase payments are: Swish Card The Payment Object The payment is the container object that holds all transactions created during the payment process. When Swedbank Pay receives the payment request body (in JSON format), a payment is created and you will be given a unique payment ID in return. The response also includes (in a true RESTful way) the URIs and operations for further actions, given the state of the payment. After creating a payment, you can: Authorize funds. An authorization transaction reserves the funds. It is possible to abort a payment before the end user has completed the payment process. And either: Capture funds. Before delivering the merchandise you need to create a capture transaction to ensure that the money is charged from the consumer credit card or properly billed by invoice. One-phase payments will combine these two in a sale or autoCapture transaction as described in the section above. Or: Cancel the authorized amount. Funds that are authorized but not yet captured, can be released back to the consumer. This is done by creating a cancel transaction. This is not available for one-phase payments. Reverse captured funds. In some cases you may need to make a reversal of captured funds. This is achieved by creating a reversal transaction. All actions after creating the payment can be done by using our APIs, or from our admin tool. abort is only available when using APIs. Please visit our demoshop to see our Payment Menu and Redirect implementation in action.",
    "tags": "",
    "url": "/payments/"
  },{
    "title": "Swedbank Pay Invoice Payments",
    "text": "Invoice Payments is one of the easiest payment service where Swedbank Pay helps improve cashflow by purchasing merchant invoices. Choose between our Direct, Redirect and Seamless view integration options. open_in_browser The Direct integration puts the control in your hands. You control the collection of the purchase information and personal information before sending them to us. Swedbank Pay receives invoice data, which is used to produce and distribute invoices to the consumer/end-user. cached Redirect is the easiest way to implement Invoice Payments. Redirect will take your consumer to a Swedbank Pay hosted payment page where they can perform a secure transaction. The consumer will be redirected back to your website after the completion of the payment. branding_watermark Seamless View is our solution for a payment experience that is integrated directly on your website. The payment process will be executed in an iframe on your page. Important steps before you launch Swedbank Pay Invoice Payments at your website Prior to launching Swedbank Pay Invoice Payments at your site, make sure that you have done the following:   Sent a merchant logo in .JPG format to the Swedish setup, Norwegian setup or Finnish setup, depending on your country. The logo will be displayed on all your invoices. Minimum accepted size is 600x200 pixels, and at least 300 DPI. Included a link to “Terms and Conditions” for Invoice. API Requests The API requests are displayed in the purchase flow below. You can create an invoice payment with the following operation options: Financing Consumer Recur Verify Our payment example uses the FinancingConsumer operation. Invoice flow This is an example of the Redirect scenario. For other integrations, take a look at the respective sections. The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The diagram also shows the steps in a purchase process. sequenceDiagram Consumer-&gt;&gt;Merchant: Start purchase activate Merchant note left of Merchant: First API request Merchant-&gt;&gt;-Swedbank Pay: POST &lt;Invoice Payment&gt; (operation=FinancingConsumer) activate Swedbank Pay Swedbank Pay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Consumer: authorization page activate Consumer note left of Consumer: redirect to Swedbank Pay Consumer-&gt;&gt;-Swedbank Pay: enter consumer details activate Swedbank Pay Swedbank Pay--&gt;&gt;-Consumer: redirect to merchant activate Consumer note left of Consumer: redirect back to Merchant Consumer-&gt;&gt;Merchant: access merchant page activate Merchant note left of Merchant: Second API request Merchant-&gt;&gt;+Swedbank Pay: GET &lt;Invoice payment&gt; Swedbank Pay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Consumer: display purchase result Next: Redirect",
    "tags": "",
    "url": "/payments/invoice/"
  },{
    "title": "Swedbank Pay Resources",
    "text": "In this section you find various resources for Swedbank Pay’s API Platform. Test Data To perform tests of the Swedbank Pay API platform, test data is required to perform various actions in our interfaces, such as in Checkin, performing payments, etc. Demoshop Our Demoshop provides a good demonstration of how our services work and which functionality they provide in a realistic webshop. Open Source Development Guidelines All Open Source Software that is developed in Swedbank Pay’s name, and under our control, including this very Developer Portal, must adhere to a set of guidelines.",
    "tags": "",
    "url": "/resources/"
  },{
    "title": "Swedbank Pay Payments Vipps",
    "text": "Vipps is the Norwegian way of paying with your mobile phone, fast and simple. Vipps is the main Norwegian payment app for mobile phones supported by the major Norwegian banks, making it one of the essential payment instruments for merchants operating in Norway. We offer it on our redirect and seamless view platforms. Purchase flow After the payment is created, the consumer pushes the payment button on Swedbank Pay’s payment page (redirect) or in the iframe (seamless view). He or she is then redirected to Vipps’ own payment page where the phone number is entered, and a push message is sent to the phone. The payment request will appear in the app and can be confirmed by the consumer. If you are using the redirect option, the consumer will be redirected back to the merchant’s site. Good To Know Payment Type Vipps is one of the instruments using two-phase payments. The authorization is done when the consumer successfully confirms in the app, and the abort, cancel, capture or reversal is done by the merchant at a later time. Read more about the different operations and the payment resource. Settlement Vipps transactions are handled, processed and settled as card transactions in our system. They are, however, tagged as Vipps transactions and have their own acquirer agreement, so the two payment instruments are settled separately. 3-D Secure As Vipps transactions are processed as card transactions, a 3-D Secure agreement is needed to complete the payment instrument setup. This information is provided to you by your acquirer when you set up your agreement with them. If you offer both Card Payments and Vipps, you will need two separate 3-D Secure agreements, one for each payment instrument. Apart from the agreement with the acquirer, no further 3-D Secure compliance is required from you as a merchant in this regard. Demoshop Vipps is unfortunately not available in our demoshop at the moment, but it will be shortly. The demoshop will use a fakeservice which enables you to test a successful purchase without using the Vipps app. Next: Redirect",
    "tags": "",
    "url": "/payments/vipps/"
  },{
    "title": "Swedbank Pay Payments Swish",
    "text": "Swish is Sweden’s main payment app and the preferred online payment method with the highest convertion rates. Swish is the main Swedish payment app for mobile phones supported by all Swedish banks, making it one of the essential payment instruments for merchants operating in Sweden. According to Kantar Sifo, it is the preferred online payment method in the age group 18-40, and the payment method with the best convertion rates. We offer both mobile phone and browser based purchase flows on our redirect and seamless view platforms, in addition to direct API integration and Payment Link. Using the direct API integration will put you in charge of determining which device is being used, and whether the e- or m-commerce flow is the most suitable. We will do this for you. Purchase Flow The following is a quick presentation of the purchase flow when using the redirect or seamless view. You can find in-depth descriptions of the separate flows in the corresponding sections. If you are using the e-commerce flow, the payer enters a Swish connected phone on Swedbank Pay’s payment page (redirect) or in the iframe (seamless view) after the payment is created. After pushing the pay button, the payer needs to open the Swish app and confirm the purchase. If you are using the redirect option, the payer will be redirected back to the merchant’s site. In the m-commerce flow, the payment page or iframe will only have a pay button, and no number input. The Swish app will be launched automatically when you push the pay button. Good To Know Payment Type Swish is one of the instruments using one-phase payments. The sale is done when the consumer successfully confirms in the app, capturing the funds instantly. The abort operation is still available, but the cancel and capture operations are not. The reversal, if needed, is done by the merchant at a later time. Read more about the different operations and the payment resource. Certificate As a part of the setup, you will need a Swish certificate. There are two ways of doing this. You can apply for Swish as part of [Swedbank Pay Settlement Service][settlement-service]), and utilize the Swedbank Pay Technical Supplier Certificate. A Swedbank Pay sales representative can assist you with this. Otherwise, you can contact one of the following banks offering Swish Handel: Danske Bank, SEB, Länsförsäkringar, Sparbanken Syd, Sparbanken Öresund, Nordea, Handelsbanken, in order to get an acquiring agreement, a Swish alias and access to Swish Certificate Management system. Demoshop You can give Swish a go in our demoshop if you like. For redirect payments, you need to toggle paymentUrl off, if you want to try seamless view, paymentUrl must be toggled on. The external integration demoshop used for testing is set up with the Merchant Swish Simulator, which enables you to test without using the Swish App. Next: Redirect",
    "tags": "",
    "url": "/payments/swish/"
  },{
    "title": "Swedbank Pay Open Source Development Guidelines",
    "text": "Introduction Swedbank Pay is committed to creating a vibrant community around its open source initiative on GitHub and will alongside its partners expose the Swedbank Pay Payment APIs in high quality client modules and libraries. The development of these modules and libraries should be as transparent and accessible to the public as possible. The consequence and meaning of this will be explained in the following chapters of this guideline. Having the source code, tests, documentation, issues and such all in one place makes the projects governing the modules and libraries easier to grasp and understand for new users. GitHub is the world’s most popular developer and source code hosting platform and offers everything we need in an easy to use package. It is therefore a great choice for hosting the source code for the open source modules and all of their related resources. Principles For an open source project to become successful, it should follow a few core principles: Transparency Being transparent is one of the most important virtues of an open source project. Being able to inspect the source code, read the documentation, view potentially reported bugs and understand the development process in an accessible and easy to understand way is critical to be able to assert the quality of the project. Being transparent also makes it apparent that we don’t have anything to hide, underlining our confidence in the quality of what we publish, which of course should be top notch. Quality An important factor to ensure the quality of any given piece of code is to test it. The test should preferably be automated and be run on every code check-in. The automation can be done through a language-native test framework like NUnit, JUnit or PHPUnit and then have a continuous integration system like Travis or TeamCity execute these tests every time code is pushed to the repository on GitHub. Code quality of course depends on a lot of other factors too, such as: Following best practice of the language and environment the code is being written in. Adhering to established style guides. Good understanding of The Principles of Object Oriented Design. A good domain architecture, modelled after Domain Driven Design. Accessibility The perhaps most important measure of success for an open source project is whether people outside of the project’s core development group contribute to it or not. The contributions can be everything from reported issues to correcting typographic errors in documentation to pull requests for minor or major code contributions. To be able to attract outside contributors, the project needs to be accessible. While accessibility is an abstract term, it can be broken down into smaller and more concrete parts that are easier to measure and understand. Is the development process for the project easy to understand? Where are outstanding features listed, who are the developers working on which features and where do they reside? How easy is it to fork the project and make a pull request that has a high chance of being merged? These are questions that should be asked and that can be answered confidently if the project is managed in a good and orderly fashion. The following list enumerates the most important aspects that a project should be governed by to be perceived as accessible: Outstanding features and bugs should be easy to find in the list of “issues” in the project’s repository. The project’s documentation should be easily accessible in or linked to from the project’s README file. The README file and associated documentation should be written in simple Markdown markup so it is easy to correct by anyone simply by using GitHub’s online Markdown editing features. How to contribute should be clearly explained in a CONTRIBUTING file. The process of contributing should be as simple as possible. The project should follow the norm and best practice of the language and environment it is written in. There should be tests in the project that are easy to get up and running on a developer machine without installing any external services, tools or libraries, unless they are handled by a package manager like NuGet. Contributed code should be checked by a continuous integration server that labels the status of pull request accordingly. If a test fails, the contributor should be alerted of its failure through GitHub’s interface. All code contributions should be run through a public continuous integration server so build failures are visible to the contributor such that he or she can fix it without any project manager’s involvement. The development and branching process should preferably be based on an existing scheme such as GitFlow or GitHub Flow. All development should be done in public. Code should be pushed to GitHub regularly, so it’s possible to see progress. For incomplete features and bugfixes, GitFlow with branch prefixes such as feature/ and hotfix/ should be used All code in development should be pushed as often as possible. Security All source code should be written in a secure way so it avoids the problems enumerated in OWASP Top 10 and SANS 25. It should preferably exist a test for each of these problems such that it is continually verified that the code does not contain any of these problems now or in the future. No source code should contain secrets, passwords or otherwise sensitive information. If such code is committed by accident, history should be rewritten through interactive rebasing as soon as possible and force-pushed. Licensing All of PayEx’ open source software should be licensed under a liberal [software license][software-license]. Copyright The copyright for code written in PayEx’ open source projects is shared between Swedbank Pay and the individual authors of the source code. This should be stated in the above mentioned LICENSE file as well as in each individual source code file and other metadata (such as .NET assembly information, etc.): Copyright © Swedbank Pay and Project Contributors How to Contribute Contributing details how we ensure that contributors to a project adheres to the rules and principles defined by the project. Code of Conduct Every project governed by Swedbank Pay or in its name should have a Code of Conduct. Release Management An essential part of any software project is having it released in one form or another so other people can use it. To be able to release software efficiently, several different strategies and methodologies need to exist and be followed. They will be described in the following chapters. Versioning To release software, it needs to be versioned. PayEx’ open source modules should be versioned according to semantic versioning. This means that whenever backward compatibility is broken, the major version should be incremented. When a new feature is added, the minor version should be incremented and when bug fixes and other minor changes are introduced, the revision number should be incremented. A version of the software should correspond to a commit in the Git repository. This commit should be tagged with the version number it represents and the commit should be in the branch corresponding with what’s being released; stable code should be in the master branch, while pre-release, alpha or beta code should be in the develop branch or in a release/ prefixed branch. If a stable version 1.2.5 of a project is to be released, the commit representing that version should be tagged in Git with the value 1.2.5 and the commit should exist in the master branch. To help with automating versioning in .NET based projects, GitVersion can be used. For most uses, GitVersionTask performs the job perfectly. It understands GitFlow and increments the version number automatically based on which branch the code being built exists on. Branching strategy To make versioning easier, the Git repository should follow GitFlow, GitHub Flow or derivates, so released and stable code is kept in the master branch, while unstable and pre-released code — if such is required — is kept in the develop branch. While they can be considered optional since all ongoing development can be done directly in the develop branch; features, hotfixes and such should preferably be done in separate branches using the GitFlow-standard branch prefixes feature, hotfix/, etc. Releases Software written for an environment that has a marketplace or other official storefront for applications (or “modules”, “extensions” and what have you) such as Apple’s App Store or Google Play, should try to publish the released software in these marketplaces. Releases should correspond to a tagged version number and a Release for the version should be created on GitHub. The GitHub Release should summarize all changes made since the last release and highlight new features, possibly by referring to blog entries or similar that describes them in more detail. To help with writing release notes, projects can use the tool GitReleaseNotes. Even if no tool is used, the release notes should adhere to the Semantic Release Notes specification.",
    "tags": "",
    "url": "/resources/development-guidelines/"
  },{
    "title": "Swedbank Pay Developer Portal",
    "text": "Welcome to the Swedbank Pay Developer Portal. Please make your choice of product to integrate below or read on for more general information about Swedbank Pay’s API platform. If you are new to Swedbank Pay’s API Platform, you are strongly advised to read through our section with fundamental technical information. Checkout Speed up checkout by allowing your customers to check-in with Swedbank Pay, and pay with their favorite payment instruments through our payment menu. Checkout Documentation Payments Identify your customer, while we take care of the payment. Choose from our uniform and wide selection of payment instruments. Payments Documentation Swedbank Pay’s API Platform is built using the REST architectural style and the request and responses come in the JSON format. The API has predictable, resource-oriented URIs and use default HTTP features, like HTTP authentication (using OAuth 2), HTTP methods and headers. These techniques are widely used and understood by most HTTP client libraries.",
    "tags": "",
    "url": "/"
  },{
    "title": "Swedbank Pay Checkout – Introduction",
    "text": "Swedbank Pay Checkout is a complete reimagination of the checkout experience, integrating seamlessly into the merchant website through highly customizable and flexible components. Visit our demoshop and try out Swedbank Pay Checkout for yourself! Swedbank Pay Checkout allows your customers to be identified with Swedbank Pay, enabling existing Swedbank Pay Checkout users to pay with their favorite payment methods in just a few simple steps. Prerequisites To start integrating Swedbank Pay Checkout, you need the following: HTTPS enabled web server. Agreement that includes Swedbank Pay Checkout. Obtained credentials (merchant Access Token) from Swedbank Pay through Swedbank Pay Admin. Please observe that Swedbank Pay Checkout encompass both the consumer and paymentmenu scope. Introduction To get started with Swedbank Pay Checkout, you should learn about its different components and how they work together. Swedbank Pay Checkout consists of two related, but disconnected concepts: Checkin and Payment Menu. Checkin identifies the consumer in our Consumer API and Payment Menu authorizes the payment with our Payment Menu API. The next step is to Capture the payment. You can either capture the total amount, or do a part-capture (as described under After Payment). Connect these steps and you have Swedbank Pay Checkout. Under, you will see a sequence diagram showing the sequence of a Swedbank Pay checkout. info Note that in this diagram, the Payer refers to the merchant front-end (website) while Merchant refers to the merchant back-end. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay participant 3rdParty rect rgba(238, 112, 35, 0.05) note left of Payer: Checkin Payer -&gt;&gt;+ Merchant: Start Checkin Merchant -&gt;&gt;+ SwedbankPay: POST /psp/consumers deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel:view-consumer-identification ① deactivate SwedbankPay Merchant --&gt;&gt;- Payer: Show Checkin on Merchant Page Payer -&gt;&gt;+ Payer: Initiate Consumer Hosted View (open iframe) ② Payer -&gt;&gt;+ SwedbankPay: Show Consumer UI page in iframe ③ deactivate Payer SwedbankPay -&gt;&gt;- Payer: Consumer identification process activate Payer Payer -&gt;&gt;+ SwedbankPay: Consumer identification process deactivate Payer SwedbankPay --&gt;&gt;- Payer: show consumer completed iframe activate Payer Payer -&gt;&gt; Payer: EVENT: onConsumerIdentified (consumerProfileRef) ④ deactivate Payer end rect rgba(138, 205, 195, 0.1) activate Payer note left of Payer: Payment Menu Payer -&gt;&gt;+ Merchant: Initiate Purchase deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: POST /psp/paymentorders (paymentUrl, consumerProfileRef) deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel:view-paymentorder deactivate SwedbankPay Merchant --&gt;&gt;- Payer: Display Payment Menu on Merchant Page activate Payer Payer -&gt;&gt; Payer: Initiate Payment Menu Hosted View (open iframe) Payer --&gt;&gt;+ SwedbankPay: Show Payment UI page in iframe deactivate Payer SwedbankPay -&gt;&gt;+ Payer: Do payment logic deactivate SwedbankPay Payer -&gt;&gt; SwedbankPay: Do payment logic deactivate Payer opt Consumer perform payment out of iFrame activate Payer Payer -&gt;&gt; Payer: Redirect to 3rd party Payer -&gt;&gt;+ 3rdParty: Redirect to 3rdPartyUrl URL deactivate Payer 3rdParty --&gt;&gt;+ Payer: Redirect back to paymentUrl (merchant) deactivate 3rdParty Payer -&gt;&gt; Payer: Initiate Payment Menu Hosted View (open iframe) Payer -&gt;&gt;+ SwedbankPay: Show Payment UI page in iframe deactivate Payer end SwedbankPay --&gt;&gt; Payer: Payment status alt If payment is completed activate Payer Payer -&gt;&gt; Payer: Event: onPaymentCompleted Payer -&gt;&gt;+ Merchant: Check payment status deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET &lt;paymentorder.id&gt; deactivate Merchant SwedbankPay -&gt;&gt;+ Merchant: rel: paid-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if paid-paymentorder operation exist) activate Payer deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET rel: paid-paymentorder deactivate Merchant SwedbankPay --&gt;&gt; Merchant: Payment Details deactivate SwedbankPay end end opt If payment is failed activate Payer Payer -&gt;&gt; Payer: Event: OnPaymentFailed Payer -&gt;&gt;+ Merchant: Check payment status deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET {paymentorder.id} deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel: failed-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if failed-paymentorder operation exist) activate Payer deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET rel: failed-paymentorder deactivate Merchant SwedbankPay --&gt;&gt; Merchant: Payment Details deactivate SwedbankPay end end activate Merchant Merchant --&gt;&gt;- Payer: Show Purchase complete opt PaymentOrder Callback (if callbackUrls is set) activate Payer deactivate Payer SwedbankPay -&gt;&gt; Merchant: POST Payment Callback end end rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:create-paymentorder-capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;PaymentInstruments that support &lt;br&gt;Authorizations. end Explanations Under, you see a list of notes that explains some of the sequences in the diagram. Checkin ① rel: view-consumer-identification is a value in one of the operations, sent as a response from Swedbank Pay to the Merchant. ② Initiate Consumer Hosted View (open iframe) creates the iframe. ③ Show Consumer UI page in iframe displays the checkin form as content inside of the iframe. ④ onConsumerIdentified (consumerProfileRef) is an event that triggers when the consumer has been identified, and delivers a property consumerProfileRef as a reference to be used in the payment menu. Payment Menu ⑤ Authorize Payment is when the payer has accepted the payment. Next: Implement Checkin",
    "tags": "",
    "url": "/checkout/"
  },{
    "title": "Swedbank Pay MobilePay Online Payments",
    "text": "MobilePay is the fast and simple way of paying with your mobile phone, reaching more than 4 million Danish end-users. MobilePay is the main Danish payment app for mobile phones, making it one of the essential payment instruments for merchants operating in Denmark. More than 4 million Danes are users of the app, and more than 100,000 merchants are accepting payments. We offer it on our redirect and seamless view platforms. Purchase flow After the payment is created, the consumer is redirected to MobilePay’s own payment page where the phone number is entered, and a push message is sent to the phone. A countdown is shown in the browser and the payment request will appear in the app, waiting to be confirmed by the consumer. If you are using the redirect option, the consumer will be redirected back to the merchant’s site. Good To Know Payment Type MobilePay Online is one of the instruments using two-phase payments. The authorization is done when the consumer successfully confirms in the app, and the abort, cancel, capture or reversal is done by the merchant at a later time. Read more about the different operations and the payment resource. Settlement MobilePay Online transactions are handled, processed and settled as card transactions in our system. They are, however, tagged as MobilePay Online transactions and have their own acquirer agreement, so the two payment instruments are settled separately. 3-D Secure As MobilePay Online transactions are processed as card transactions, a 3-D Secure agreement is needed to complete the payment instrument setup. This information is provided to you by your acquirer when you set up your agreement with them. If you offer both Card Payments and MobilePay Online, you will need two separate 3-D Secure agreements, one for each payment instrument. Apart from the agreement with the acquirer, no further 3-D Secure compliance is required from you as a merchant in this regard. Demoshop MobilePay Online is unfortunately not available in our demoshop at the moment, but it will be in the future. The demoshop in the test environments will use a fakeservice which enables you to test a successful purchase without using the MobilePay app. Next: Redirect",
    "tags": "",
    "url": "/payments/mobile-pay/"
  },{
    "title": "Swedbank Pay Card Payments – Introduction",
    "text": "Card Payments is the most popular, versatile and global way to initate a transaction with a customer. Choose between our Seamless View, Redirect, or Direct integration options. branding_watermark Seamless View is our solution for a payment experience that is integrated directly on your website. The payment process will be executed in an iframe on your page. cached Redirect will take the consumer to a Swedbank Pay hosted payment page where they can perform a safe transaction. The consumer will be redirected back to your website after the completion of the payment. open_in_browser Direct integration is a way to implement card payments without using Swedbank Pay hosted payment pages. This option allow you to collect the card data on your page. That implies that the process must be PCI-DSS Compliant When properly set up in your merchant/webshop site and the payer starts the purchase process, you need to make a POST request towards Swedbank Pay with your Purchase information. This will generate a payment object with a unique paymentID. You either receive a Redirect URL to a Swedbank Pay hosted page (Redirect integration) or a JavaScript source in response (Seamless View integration). You need to redirect the payer’s browser to that specified URL, or embed the script source on your site to create a Hosted View in an iframe; so that she can enter the credit card details in a secure Swedbank Pay hosted environment. Swedbank Pay will handle 3-D Secure authentication when this is required. Swedbank Pay will redirect the payer’s browser to - or display directly in the iframe - one of two specified URLs, depending on whether the payment session is followed through completely or cancelled beforehand. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. When you detect that the payer reach your completeUrl , you need to do a GET request, containing the id of the payment generated in the first step, to receive the state of the transaction. You will redirect the payer to Swedbank Pay hosted pages to collect the credit card information. Operations The API requests are displayed in the purchase flow. You can create a card payment with following operation options: Purchase Recur Payout Verify Unscheduled Purchase Our payment example below uses the Purchase operation. Intent The intent of the payment identifies how and when the charge will be effectuated. This determines the type of transaction used during the payment process. Authorization (two-phase): If you want the credit card to reserve the amount, you will have to specify that the intent of the purchase is Authorization. The amount will be reserved but not charged. You will (i.e. when you are ready to ship the purchased products) have to make a capture or cancel request later on to fulfill the transaction. AutoCapture (one-phase): If you want the credit card to be charged right away, you will have to specify that the intent of the purchase is AutoCapture. This is only allowed if the consumer purchases digital products. The credit card will be charged automatically after authorization and you don’t need to do any more financial operations to fulfill the transaction. Purchase Flow The sequence diagram below shows a high level description of a complete purchase, and the requests you have to send to Swedbank Pay. The links will take you directly to the corresponding API description. When dealing with card payments, 3-D Secure authentication of the cardholder is an essential topic. There are three alternative outcome of a card payment: 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer-&gt;&gt;-Merchant: start purchase activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST /psp/creditcard/payments activate SwedbankPay note left of Merchant: First API Request SwedbankPay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Payer: authorization page activate Payer note left of Payer: redirect to SwedbankPay&lt;br&gt;(If Redirect scenario) Payer-&gt;&gt;-Merchant: access merchant page activate Merchant Merchant-&gt;&gt;-SwedbankPay: GET &lt;payment.id&gt; activate SwedbankPay note left of Merchant: Second API request SwedbankPay--&gt;&gt;-Merchant: rel: redirect-authorization activate Merchant Merchant--&gt;&gt;-Payer: display purchase result activate Payer sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer-&gt;&gt;-Merchant: start purchase activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST /psp/creditcard/payments activate SwedbankPay note left of Payer: First API request SwedbankPay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Payer: authorization page activate Payer Payer-&gt;&gt;-SwedbankPay: access authorization page activate SwedbankPay note left of Payer: redirect to SwedbankPay&lt;br&gt;(If Redirect scenario) SwedbankPay--&gt;&gt;-Payer: display purchase information activate Payer Payer-&gt;&gt;Payer: input creditcard information Payer-&gt;&gt;-SwedbankPay: submit creditcard information activate SwedbankPay opt Card supports 3-D Secure SwedbankPay--&gt;&gt;-Payer: redirect to IssuingBank activate Payer Payer-&gt;&gt;IssuingBank: 3-D Secure authentication process activate IssuingBank Payer-&gt;&gt;-SwedbankPay: access authentication page end SwedbankPay--&gt;&gt;-Payer: redirect to merchant activate Payer note left of Payer: redirect back to merchant&lt;br&gt;(If Redirect scenario) Payer-&gt;&gt;-Merchant: access merchant page activate Merchant Merchant-&gt;&gt;-SwedbankPay: GET &lt;payment.id&gt; activate SwedbankPay note left of Merchant: Second API request SwedbankPay--&gt;&gt;-Merchant: rel: redirect-authorization activate Merchant Merchant--&gt;&gt;-Payer: display purchase result opt Callback is set activate SwedbankPay SwedbankPay-&gt;&gt;SwedbankPay: Payment is updated SwedbankPay-&gt;&gt;-Merchant: POST Payment Callback end Next: Redirect",
    "tags": "",
    "url": "/payments/card/"
  },{
    "title": "Licence",
    "text": "Licensing The licensing of PayEx’ open source software should be one approved by the Open Source Initiative and preferably one that is compatible with closed source, enterprise software. The MIT License is therefore a good fit and should be chosen when possible: The MIT License (MIT) Copyright (c) 2019 Swedbank Pay and Project Contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. The license should be placed in a file called LICENSE in the root of the repository and preferably be included as a header in all source code files in the same repository.",
    "tags": "",
    "url": "/resources/development-guidelines/licence.html"
  },{
    "title": "Swedbank Pay Payments Swish Other Features",
    "text": "Payment Resource The payment resource is central to all payment instruments. All operations that target the payment resource directly produce a response similar to the example seen below. The response given contains all operations that are possible to perform in the current state of the payment. Request GET /psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"payeeInfo\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"urls\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"transactions\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"captures\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" } { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"rel\": \"create-capture\", \"contentType\": \"application/json\" } ] } Property Type Description payment object The payment object contains information about the specific payment. └➔ id string The relative URI of the payment. └➔ number integer The payment number , useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. └➔ created string The ISO-8601 date of when the payment was created. └➔ updated string The ISO-8601 date of when the payment was updated. └➔ state string Ready , Pending , Failed or Aborted . Indicates the state of the payment. This field is only for status display purposes. To └➔ prices object The prices resource lists the prices related to a specific payment. └➔ prices.id string The relative URI of the current prices resource. └➔ description string(40) A textual description of maximum 40 characters of the purchase. └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like e-mail address, mobile number, customer number etc. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string nb-NO , sv-SE or en-US └➔ urls string The URI to the urls resource where all URIs related to the payment can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment can be retrieved. operations array The array of possible operations to perform └─➔ method string The HTTP method to use when performing the operation. └─➔ href string The target URI to perform the operation against. └─➔ rel string The name of the relation the operation has to the current resource. Operations The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-payment-abort aborts the payment order before any financial transactions are performed. create-capture Creates a capture transaction in order to charge the reserved funds from the consumer. create-cancellation Creates a cancellation transaction that cancels a created, but not yet captured payment. Payment States And Transaction States Both payments and transactions can be in several different states during the course of a purchase. You can find a short description of each state below. Payments ready means that the payment has been created successfully, and is now ready for further transaction operations, like authorization, sale or abort. failed means that something went wrong during the payment process, and no further transactions can be created if the payment is in this state. Examples of possible failures are triggering of anti-fraud protection or if the payer reaches the maximum number of attempts for a given payment. aborted means that the merchant has aborted the payment before the end user has fulfilled the payment process. This is done by calling the PATCH function for abort operations. pending is the state of a payment when a transaction is in an initialized state. See more below. As long as a payment is pending, no further transactions can be done. Transactions ìntialized is the transaction state when something unexpected occured, and it is impossible to determine the exact status of the transaction. An example of this can be a network failure. No further actions can be done on a payment with a transaction in this state. completed means that the transaction has reached its intended purpose. An authorization will be completed when the funds have been authorized, a capture will be completed when the funds have been captured and a reversal will be completed when the payer has been refunded. failed means that the transaction has failed. The state is final for that specific transaction, but given that the payment is operational, it is possible to perform more transactions on the same payment, i.e. retry the authorization with another card. If the payer reaches the maximum amount of retries, the payment itself will be set to failed. awaitingActivity is in use for a selection of payment instruments. A transaction reaches this state when a payer is sent away from Swedbank Pay to do a confirmation or verification. Examples of this can be payment apps like Swish, Vipps or MobilePay, or 3-D Secure verifications for card payments. Create Payment To create a Swish payment, you perform an HTTP POST against the /psp/swish/payments resource. An example of a payment creation request is provided below. Each individual property of the JSON document is described in the following section. Use the [expand][technical-reference-expand] request parameter to get a response that includes one or more expanded sub-resources inlined. Request POST /psp/swish/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Sale\", \"currency\": \"SEK\", \"prices\": [{ \"type\": \"Swish\", \"amount\": 1500, \"vatAmount\": 0 }], \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": [\"https://example.com\", \"https://example.net\"], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"callbackUrl\": \"https://example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"ref-123456\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\" }, \"prefillInfo\": { \"msisdn\": \"+46739000001\" }, \"swish\": { \"ecomOnlyEnabled\": false } } } Required Property Type Description ✔︎ payment object The paymentobject. ✔︎ └➔ operation string Purchase ✔︎ └➔ intent string Sale ✔︎ └➔ currency string SEK ✔︎ └➔ prices object The prices object contains information about what is being bought in this payment. ✔︎ └─➔ type string Swish ✔︎ └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g.10000=100.00 SEK 5000=50.00 SEK ✔︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. ✔︎ └➔ description string(40) A textual description max 40 characters of the purchase.   └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like mobile number, customer number etc. ✔︎ └➔ userAgent string The user agent reference of the consumer’s browser - [see user agent definition][user-agent] ✔︎ └➔ language string nb-NO, sv-SE or en-US. ✔︎ └➔ urls object The URLS object contains information about what urls this payment should use. ✔︎ └─➔ hostUrls array The array of URIs valid for embedding of Swedbank Pay Hosted Views. ✔︎ └─➔ completeUrl string The URI that Swedbank Pay will redirect back to when the payment page is completed. This does not indicate a successful payment, only that it has reached a completion state. A GET request needs to be performed on the payment to inspect it further. ✔︎ └─➔ cancelUrl string The URI that Swedbank Pay will redirect back to when the user presses the cancel button in the payment page.   └─➔ callbackUrl string The URI that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details.   └─➔ logoUrl string The URI that will be used for showing the customer logo. Must be a picture with at most 50px height and 400px width. Require https.   └─➔ termsOfServiceUrl string A URI that contains your terms and conditions for the payment, to be linked on the payment page. Require https. ✔︎ └➔ payeeInfo object A object containing info about the payee. ✔︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by PayEx. ✔︎ └─➔ payeeReference string(35) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See [payeeReference][technical-reference-payeeReference] for details.   └➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to PayEx.   └➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by PayEx, but will be passed through the payment process and may be used in the settlement process.   └➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems.   └➔ subsite string(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used.   └➔ prefillInfo.msisdn string Number will be prefilled on payment page, if valid. The mobile number must have a country code prefix and be 8 to 15 digits in length.   └➔ swish.ecomOnlyEnabled boolean true if to only enable Swish on browser based transactions.; otherwise false to also enable Swish transactions via mobile app. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 992308, \"created\": \"2017-10-23T08:38:57.2248733Z\", \"instrument\": \"Swish\", \"operation\": \"Purchase\", \"intent\": \"Sale\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeinfo\" } }, \"operations\": [ { \"method\": \"POST\", \"href\": \"http://api.externalintegration.payex.com/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales\", \"rel\": \"create-sale\" } } Mobile Number Validation eCommerce All international mobile numbers are supported. To be valid, the number input must be with a country code prefix and consist of 8 to 15 characters. Digits are the only characters allowed, and the regex used is \\\\+[1-9]\\\\d{7,14}. A valid Swedish mobile number would be +46739000001, a valid Norwegian mobile number would be +4792345678. mCommerce No number input is needed in the mCommerce flow. The payer’s mobile number must be connected to a Swish account. Settlement and Reconciliation Reconciliation is an important step in an economic transaction. When a payment is reconciled, captured amounts for the payment are matched against the corresponding settlement. The information needed to reconcile captured funds - the balance report and transactions list - are available for all merchants using Swedbank Pay. By default you receive these files by e-mail, but it is also possible to get them via FTP access. Contact omni.client@swedbankpay.se for further inquiries regarding this. The settlement frequency is defined in the agreement and you will receive a report for each payout and/or invoice. Settlement There are two main alternatives for settlement - either we handle the settlement process for you, or you handle the process yourself : Swedbank Pay handles the settlement process Swedbank Pay handles the settlement process on your behalf, (called “Redovisningsservice”). Swedbank Pay transfers the net amount to you directly. Swedbank Pay Checkout When choosing Swedbank Pay Checkout we always handle the settlement process for you, gathering all your eCommerce payments in one place. Straighforward and time efficient. You handle the settlement process yourself If you will handle the settlement yourself, then Swedbank Pay will send you an invoice with the relevant fees, in addition to the report and transactions lists. Your acquirer will transfer settled funds to you. Balance Report The Balance Report (a .pdf file) specifies the total sales for a specific period, including fees and VAT. The report contains three parts: a payment summary and specifications for sales and for fees. Payment Summary Provides a summary of the Amount sold, Fees and VAT. If Swedbank Pay handles the settlement process, the Transferedamount - shown in the balance report summary is equivalent to the disbursement on the bank statement (the remaining total amount after fees). Sales specification Provides a specification over sales for the given period. The sales total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each sales row specify Quantity, Sum sales and Amount to pay out, the last one is only eligble if Swedbank Pay handles the Settlement process. Fees specification Provides a specification over fees for the given period. The fees total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each fees row specify Quantity (sales), Amount (sales), Unit price, Provision and fee Amount. If you handle the settlement process yourselves you will receive a separat invoice for fees. Transactions List The Transaction List (provided in .xlsx and .xml formats) specifies all transactions for a specific period, including a summary of transactions grouped by payment instrument. Both formats contain the same information, but the xml file is meant for computer processing while the excel workbook is meant for human interaction. The first row contains the name of the Swedbank Pay company (e.g. Swedbank Pay Solutions AB) that the merchant has the contract with, and the balance report number. The header fields contain a summary of the transactions displayed in the body. Header fields Field Type Description Prefix String The Prefix used for transactions, only eligible if merchant uses prefix. Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). ServiceType String The service type of the service used (e.g. Creditcard). Service String The service used (e.g. Creditcard). NoOfDebet Decimal Total number of debit transactions for the given service. NoOfCredit Decimal Total number of credit transactions for the given service. Amount Decimal Total amount for the given service (e.g 100.00). FromDate ISO 8601 The earlistest transaction date, YYYY-MM-DD. ToDate ISO 8601 The latest transaction date, YYYY-MM-DD. Body fields Field Type Description Swedbank Pay Batch Number Decimal A batch number common to all types of transactions processed by PayEx. Transaction Number Decimal A unique identifier of the transaction, can be traced in Swedbank Pay Admin user interface. Order id String A unique identifier of the order, as sent from the merchant to PayEx. Transactions that are related to the same order are associated with this ID. Date Created ISO 8601 Transaction capture date/time. YYYY-MM-DD hh:mm:ss. Date Modified ISO 8601 Transaction settle date/time. YYYY-MM-DD hh:mm:ss. Provider String The service provider (e.g. Babs, Swedbank). Type String The service type of the related transaction (e.g. Creditcard). Amount Decimal Total amount of the related transaction (e.g 100.00). Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). Product Number String A product number, as sent by merchant to PayEx. Description String A textual description of the transaction, as sent by merchant to PayEx. VAT Amount Decimal VAT Amount for the given transaction (e.g 100.00). VAT Percentage Decimal VAT Percentage for the given transaction. Credit Card Batch Number Decimal The reference number from the credit card processor. Reference Decimal The transaction reference from processor. Swedbank Pay Account Number Decimal The Account number given, shown in Swedbank Pay admin. Referenced Transaction Number Decimal Transaction number for the Authoriation transaction for a two-stage transaction or the number of the debit transaction if it is a credit transaction. Sales Channel String The channel through which the transaction was sent to Swedbank Pay (e.g Transaction via eCommerce APIs). Brand String If eligible, Branding information as sent by merchant to PayEx. Point Of Sale String If eligible, POS information as sent by merchant to PayEx. Reconciliation To do the reconciliation, you need to match the information in your system against the information provided by Swedbank Pay in the balance report and transaction list. Below is a sequence diagram detailing the interaction. sequenceDiagram participant SwedbankPay as Swedbank Pay activate Merchant activate SwedbankPay Merchant--&gt;&gt;SwedbankPay: Online payment transactions deactivate Merchant deactivate SwedbankPay activate Merchant SwedbankPay-&gt;&gt;Merchant: Balance Report (PDF-file) note left of Merchant: files are sent by e-mail or file transfer SwedbankPay-&gt;&gt;Merchant: Transaction list (XLSX-file) SwedbankPay-&gt;&gt;Merchant: Transaction list (XML-file) deactivate Merchant There are two ways for you to match the information from your system with the information given in the reconciliation files from Swedbank Pay: You can use information generated by your system (you will have to set a unique payeeReference when you make the transaction), or You can use the transaction number generated by Swedbank Pay (this is called transaction number and is returned from Swedbank Pay after you have created the transaction). A credit card transaction is made when you either make a capture or a reversal. In the input data for making a capture, you will set the payeeReference. The unique value of this field is the same as the field called OrderID in the reconciliation file. { \"transaction\": { \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Reversal\", \"payeeReference\": \"ABC123\" } } When you receive the response from Swedbank Pay, the response will include transaction.number. This is the same as the field called TransactionNo in the reconciliation file. { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1500, \"vatAmount\": 250, \"description\": \"Test Capture\", \"payeeReference\": \"ABC123\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } payeeReference sent to Swedbank Pay is equal to OrderId in the reconciliation file. capture.transaction.number returned from Swedbank Pay is equal to TransactionNo in reconciliation file. Samples The content of the files depends on the type of agreement you have made with Swedbank Pay. For some payment instruments, only option A is available, while for other payment instruments, only option B is available. The sample files can be downloaded below. Option A: Swedbank Pay handles the settlement process PDF Balance Report for Swedbank Pay Checkout PDF Balance Report XLSX Transaction List XML Transaction List Option B: You will handle the settlement process yourself PDF Balance Report XLSX Transaction List XML Transaction List Split Settlement The prefix split is the easy way of doing settlements for companies with multiple sub merchants. With only a few easy steps, you can make the settlement process more efficient with regards to invoicing, payouts and setup for both your sub merchants and yourself. In short, it is a settlement feature where a company with a website or an app can attach specific prefix numbers to sub merchants selling their goods or services through the company. The prefix number is used to match the transactions and the merchant, so the settlement is automatically split between the sub merchants. If you run a site selling tickets to concerts, theatres, sporting events etc., each venue gets its own prefix number. If you run a funeral home, the sub merchants can be everything from flower delivery to charities. What we need from you as a company Send us a KYC form for each sub merchant you want to include. We will also do a KYC check on your sub merchants, providing extra security for you. Give every sub merchant who sells goods/services at your website or in your app a unique prefix number. This needs to be included in the KYC form you send to us. We recommend using the same customer number they have in your system. Attach the prefix number to all the goods/services the sub merchant sells through your website or app, so the goods/services can be matched to the correct merchant in our back office system. A partner agreement is needed for the automatic deduction of revenue cuts and fees. How it works We set up the sub merchant prefix in our systems. The prefix number is added in the subsite field in the API call when you create the payment for the goods or service. The customer selects payment instrument and completes the payment. The payment goes into the client funds account. Swedbank Pay matches the transaction and the merchant using the prefix number. The settlement is split and connected to the correct merchant. Revenue cuts for the super merchant and fees from Swedbank Pay are deducted automatically. Payout to the sub merchant is done. The upsides Since the sub merchants are connected to Swedbank Pay through the super merchant instead of having separate setups, this means that you: Only need one agreement for credit card, Vipps, Swish, MobilePay, invoice and payment gateway. Only need one acquiring agreement. Only need one Vipps/Swish certificate. Can add more payment instruments easily, as it only has to be done once. Can set up new sub merchants quickly, as the only thing needed is a KYC form and a prefix number. This shortens the setup time for both you and us to a matter of hours. The automatic settlement split and deduction of fees and revenue cuts minimizes the work for your accounting department, as you do not have to invoice your sub merchants. The prefix split is available with all the payment instruments we offer on our eCom platform. Good to know With regards to admin functions, we offer a full integration towards our admin system. This way, you do not have to log in to Swedbank Pay Admin to perform these operations. Captures and cancels Captures and cancels are done by the super merchant the same way as any other normal flow. Reversals In cases where you need to do reversals, this will be performed by the super merchant. The reversal amount will be charged from the sub merchants prefix. If the sub merchants balance is 0 (zero), the super merchant will be invoiced. The super merchant will in turn have to invoice this amount to the sub merchant. Payment Link The implementation sequence for this scenario is a variant of the purchase sequence. The consumer is not redirected to the Payments directly but will instead receive a payment link via mail/SMS. When the consumer clicks on the link, a payment window opens. Introduction The Payment Link can be implemented for payment instruments listed below, using the Redirect platform and Swedbank Pay hosted payment page. Credit card MobilePay Swish Vipps When the consumer/end-user starts the purchase process in your merchant or webshop site, you need to make a POST request towards Swedbank Pay with your Purchase information. You receive a Payment Link (same as redirect URL) in response. You have to distribute the Payment Link to the consumer through your order system, using channels like e-mail or SMS. info When sending information in e-mail/SMS, it is strongly recommended that you add information about your terms and conditions, including purchase information and price. See recommendations in the next section. When the consumer clicks on the Payment Link, the Swedbank Pay payment page will open, letting the consumer enter the payment details (varying depending on payment instrument) in a secure Swedbank Pay hosted environment. When paying with credit card and if required, Swedbank Pay will handle 3-D Secure authentication. After completion, Swedbank Pay will redirect the browser back to your merchant/webshop site. If callbackURL is set the merchant system will receive a callback from Swedbank Pay, enabling you to make a GET request towards Swedbank Pay with the id of the payment received in the first step, which will return the purchase result. E-mail And SMS Recommendations When you as a merchant sends an e-mail or SMS to the consumer about the Payment Link, it is recommended to include contextual information that help the consumer understand what will happen when clicking on the Payment Link. We recommend that you include following information: The name of the merchant/shop that initiates the payment An understandable product description, describing what kind of service the consumer will pay for. Some order-id (or similar) that exists in the merchant order system. The price and currency. Details about shipping method and expected delivery (if physical goods will be sent to the consumer). Directions to (a link to a page) the merchant’s terms and conditions (such as return policy) and information of how the consumer can contact the merchant. Details informing the consumer that he or she accepts the Terms &amp; Conditions when clicking on the Payment Link. Receipt Recommendations We recommend that you send an e-mail or SMS confirmation with a receipt to the consumer when the payment has been fulfilled. API Requests The API requests depend on the payment instrument you are using when implementing the Payment Link scenario, see purchase flow. One-phase payment instruments will not implement capture, cancellation or reversal. The options you can choose from when creating a payment with key operation set to Purchase are listed below. Screenshots When clicking the payment link, the consumer will be directed to a payment page, similar to the examples below, where payment information can be entered. Options All valid options when posting in a payment with operation Purchase, are described in each payment instrument’s respective API reference. Please see the general sequence diagrams for more information about payments in one-phase (e.g. Swish and credit card with autocapture) and two-phase (e.g. Credit card, MobilePay, Vipps). Authorization When using two-phase flows you reserve the amount with an authorization, you will have to specify that the intent of the purchase is Authorize. The amount will be reserved but not charged. You will later (i.e. when you are ready to ship the purchased products) have to make a Capture or Cancel request. Capture Capture can only be performed on a payment with a successfully authorized transaction. It is possible to do a part-capture where you only capture a smaller amount than the authorized amount. You can later do more captures on the same payment up to the total authorization amount. If you want the credit card to be charged right away, you will have to specify that the intent of the purchase is AutoCapture. The credit card will be charged and you don’t need to do any more financial operations to this purchase. Cancel Cancel can only be done on a authorized transaction. If you do cancel after doing a part-capture you will cancel the difference between the captured amount and the authorized amount. Reversal Reversal can only be done on a payment where there are some captured amount not yet reversed. General When implementing the Payment Link scenario, it is optional to set a callbackURL in the POST request. If callbackURL is set Swedbank Pay will send a request to this URL when the consumer as fulfilled the payment. See the Callback API description here. Purchase flow The sequence diagrams display the high level process of the purchase, from generating a Payment Link to receiving a Callback. This in a generalized flow as well as a specific 3-D Secure enabled credit card scenario. info Please note that the the callback may come either before, after or in the same moment as the consumer are being redirected to the status page at the merchant site when the purchase is fulfilled. Don’t rely on the callback being timed at any specific moment. When dealing with credit card payments, 3-D Secure authentication of the cardholder is an essential topic. There are three alternative outcome of a credit card payment: 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. sequenceDiagram activate Consumer Consumer-&gt;&gt;-MerchantOrderSystem: consumer starts purchase activate MerchantOrderSystem MerchantOrderSystem-&gt;&gt;-Merchant: start purchase process activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST [payment] (operation=PURCHASE) activate SwedbankPay note left of Merchant: First API request SwedbankPay--&gt;&gt;-Merchant: payment resource with payment URL activate Merchant Merchant--&gt;&gt;-MerchantOrderSystem: Payment URL sent to order system activate MerchantOrderSystem MerchantOrderSystem--&gt;&gt;-Consumer: Distribute Payment URL through e-mail/SMS activate Consumer note left of Consumer: Payment Link in e-mail/SMS Consumer-&gt;&gt;-SwedbankPay: Open link and enter payment information activate SwedbankPay opt Card supports 3-D Secure SwedbankPay--&gt;&gt;-Consumer: redirect to IssuingBank activate Consumer Consumer-&gt;&gt;IssuingBank: 3-D Secure authentication process Consumer-&gt;&gt;-SwedbankPay: access authentication page activate SwedbankPay end SwedbankPay--&gt;&gt;-Consumer: redirect to merchant site activate Consumer note left of SwedbankPay: redirect back to merchant Consumer-&gt;&gt;-Merchant: access merchant page activate Merchant Merchant-&gt;&gt;-SwedbankPay: GET [payment] activate SwedbankPay note left of Merchant: Second API request SwedbankPay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Consumer: display purchase result Options after posting a payment If the payment enable a two-phase flow (Authorize), you will need to implement the Capture and Cancel requests. It is possible to “abort” the validity of the Payment Link. See the Abort description here. For reversals, you will need to implement the Reversal request. When implementing the Payment Link scenario, it is optional to set a callbackURL in the POST request. If callbackURL is set Swedbank Pay will send a postback request to this URL when the consumer as fulfilled the payment. See the Callback API description here. Prices The prices resource lists the prices related to a specific payment. Request GET /psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"prices\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\", \"priceList\": [ { \"type\": \"VISA\", \"amount\": 2350, \"vatAmount\": 0 }, { \"type\": \"MasterCard\", \"amount\": 2350, \"vatAmount\": 0 } ] } } Property Type Description payment string The relative URI of the payment the prices resource belongs to. prices object The prices resource. └➔ id string The relative URI of the current prices resource. └➔ priceList array The array of price objects. Note: Even if you specifiy CreditCard in the input message the system will return all your configured card brands instead when you expan the priceList. └─➔ type string The type of the price object. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. Prices Object Types Each payment instrument have one or more prices object types. This is most relevant when using card based payments as each type correspond to a card brand or bank respectively. Swish Payments Type Description Swish Always Swish PayeeInfo The payeeinfo resource contains information about the payee (i.e. a merchant, a corporation etc) related to a specific payment. Request GET /psp/paymentorder/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/paymentorder/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"payeeInfo\": { \"id\": \"/psp/paymentorder/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\", \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"EN1234\", \"payeeName\": \"TestMerchant1\", \"productCategory\": \"EF1234\", \"orderReference\": \"or-123456\" } } Property Type Description payment string The URI of the payment which the payeeinfo belongs to. └➔ id string The URI of the current payeeinfo resource. └➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay └➔ payeeReference string(50) A unique reference set by the merchant system. See below for details └➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay. └➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. You therefore need to ensure that the value given here is valid in the settlement. └➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. PayeeReference The payeeReference given when creating transactions and payments has some specific processing rules depending on specifications in the contract. It must be unique for every operation, used to ensure exactly-once delivery of a transactional operation from the merchant system. Its length and content validation is dependent on whether the transaction.number or the payeeReference is sent to the acquirer. If you select Option A in the settlement process (Swedbank Pay will handle the settlement), Swedbank Pay will send the transaction.number to the acquirer and the payeeReference may have the format of string(30). If you select Option B in the settlement process (you will handle the settlement yourself), Swedbank Pay will send the payeeReference to the acquirer and it will be limited to the format of string(12) and all characters must be digits. Expansion The payment resource contain the ID of related sub-resources in its response properties. These sub-resources can be expanded inline by using the request parameter expand. This is an effective way to limit the number of necessary calls to the API, as you return several properties related to a Payment resource in a single request. info Note that the expand parameter is available to all API requests but only applies to the request response. This means that you can use the expand parameter on a POST or PATCHrequest to get a response containing the target resource including expanded properties. This example below add the urls and authorizations property inlines to the response, enabling you to access information from these sub-resources. Expansion GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1?$expand=urls,authorizations HTTP/1.1 Host: api.externalintegration.payex.com To avoid unnecessary overhead, you should only expand the nodes you need info about. Transactions A payment contains sub-resources in the form of transactions. Most operations performed on a payment ends up as a transaction. The different types of operations that alter the state of the payment by creating a transaction is described below. The transactions resource will list the transactions (one or more) on a specific payment. Request GET /psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"transactions\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\", \"transactionList\": [{ \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Sale\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test authorization\", \"payeeReference\": \"PR1004\", \"failedReason\": \"\", \"isOperational\": true, \"operations\": [] }] } } Property Type Description payment string The relative URI of the payment this list of transactions belong to. transactions object The transactions object. └➔ id string The relative URI of the current transactions resource. └➔ transactionList array The array of transaction objects. └➔ transactionList[] object The transaction object (described in the transaction resource below). Transaction The transaction resource contains the generic details of a transaction on a specific payment. When a transaction is created it will have one of three states: Initialized - if there is some error where the source is undeterminable (network failure, etc), the transaction will remain Initialized. The corresponding state of the payment order will in this case be set to pending. No further transactions can be created. Completed - if everything went ok the transaction will follow through to completion. Failed - if the transaction has failed (i.e. a denial from the acquiring bank) it is possible to retry (i.e the consumer tries using another credit card) up to a maximum amount of retries (in that case which the payment order gets the state failed as well). Request GET /psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"transaction\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": true, \"operations\": [] } } Property Type Description payment string The relative URI of the payment this transaction belongs to. transaction object The transaction object. └➔ id string The relative URI of the current transaction resource. └➔ created string The ISO-8601 date and time of when the transaction was created. └➔ updated string The ISO-8601 date and time of when the transaction was created. └➔ type string Indicates the transaction type. └➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └➔ description string A human readable description of maximum 40 characters of the transaction. └➔ payeeReference string A unique reference for the transaction. └➔ failedReason string The human readable explanation of why the payment failed. └➔ isOperational bool true if the transaction is operational; otherwise false. └➔ operations array The array of operations that are possible to perform on the transaction in its current state. Callback When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform a callback to inform the payee (merchant) about this update. Setting a callbackUrl in the HTTP POST API is optional, but highly recommended. If a payer closes the browser window, a network error or something else happens that prevents the payer from being redirect from Swedbank Pay back to the merchant website, the callback is what ensures that you receive information about what happened with the payment. When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform an asynchronous server-to-server callback to inform the payee (merchant) about this update. Swedbank Pay will make an HTTP POST to the callbackUrl that was specified when the payee (merchant) created the payment. When the callbackUrl receives such a callback, an HTTP GET request must be made on the payment or on the transaction. The retrieved payment or transaction resource will give you the necessary information about the recent change/update. The callback will be retried if it fails. Below are the retry timings, in seconds from the initial transaction time: 30 seconds 60 seconds 360 seconds 432 seconds 864 seconds 1265 seconds The callback is sent from the following IP address: 82.115.146.1 A callback should return a 200 OK response. Payment Instrument Callback { \"payment\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 222222222 }, \"transaction\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/&lt;transaction type&gt;/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"number\": 333333333 } } Parameter Description &lt;transaction type&gt; authorizations, captures, cancellations, reversals The sequence diagram below shows the HTTP POST you will receive from Swedbank Pay, and the two GET requests that you make to get the updated status. sequenceDiagram Participant Merchant Participant SwedbankPay as Swedbank Pay activate SwedbankPay SwedbankPay-&gt;&gt;+Merchant: POST &lt;callbackUrl&gt; deactivate SwedbankPay note left of Merchant: Callback by Swedbank Pay Merchant--&gt;&gt;+SwedbankPay: HTTP response Merchant-&gt;&gt;+SwedbankPay: GET swish payment deactivate Merchant note left of Merchant: First API request SwedbankPay--&gt;&gt;+Merchant: payment resource deactivate SwedbankPay Problem messages When performing unsuccessful operations, the eCommerce API will respond with a problem message. We generally use the problem message type and status code to identify the nature of the problem. The problem name and description will often help narrow down the specifics of the problem. Swish API errors All Swish error types will have the following URI in front of type: https://api.externalintegration.payex.com/psp/errordetail/&lt;errortype&gt; inputerror Caused By: MSISDN is invalid. Payer’s MSISDN is not enrolled at Swish. Example response inputerror HTTP/1.1 400 Bad Request Content-Type: application/json { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/inputerror\", \"title\": \"Input error\", \"status\": 400, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"Msisdn is invalid.\" } configerror Caused By: Payee alias is missing or not correct. PaymentReference is invalid. Amount value is missing or not a valid number. Amount is less than agreed minimum. Amount value is too large. Invalid or missing currency. Wrong formatted message. Amount value is too large, or amount exceeds the amount of the original payment minus any previous refunds. Counterpart is not activated. Payee not enrolled. Example response configerror HTTP/1.1 403 Forbidden Content-Type: application/json { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/configerror\", \"title\": \"Config error\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"Payee alias is missing or not correct.\" } swishdeclined Caused By: Original payment not found or original payment is more than than 13 months old. It appears that merchant’s organization number has changed since sale was made. The MSISDN of the original payer seems to have changed owner. Transaction declined. Could be that the payer has exceeded their swish limit or have insufficient founds. Payment request not cancellable. Example response swishdeclined HTTP/1.1 403 Forbidden Content-Type: application/json { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/swishdeclined\", \"title\": \"Swish Declined\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The MSISDN of the original payer seems to have changed owner.\" } swisherror Caused By: Bank system processing error. Swish timed out waiting for an answer from the banks after payment was started. Example response swisherror HTTP/1.1 502 Bad Gateway Content-Type: application/json { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/swisherror\", \"title\": \"Error in Swish\", \"status\": 502, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"Bank system processing error.\" } swishalreadyinuse Caused By: The payer’s Swish is already in use. Example response swishalreadyinuse HTTP/1.1 403 Forbidden Content-Type: application/json { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/swishalreadyinuse\", \"title\": \"Error in Swish\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The payer's Swish is already in use.\" } swishtimeout Caused By: Swish timed out before the payment was started. Example response swishtimeout HTTP/1.1 403 Forbidden Content-Type: application/json { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/swishtimeout\", \"title\": \"Swish Timed Out\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"Swish timed out before the payment was started.\" } bankidcancelled Caused By: The payer cancelled BankID authorization. Example response bankidcancelled HTTP/1.1 409 Conflict Content-Type: application/json { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/bankidcancelled\", \"title\": \"BankID Authorization Cancelled\", \"status\": 409, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The payer cancelled BankID authorization.\" } bankidalreadyinuse Caused By: The payer’s BankID is already in use Example response bankidalreadyinuse HTTP/1.1 409 Conflict Content-Type: application/json { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/bankidalreadyinuse\", \"title\": \"BankID Already in Use\", \"status\": 409, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The payer's BankID is already in use.\" } bankiderror Caused By: Something went wrong with the payer’s BankID authorization. Example response bankiderror HTTP/1.1 502 Bad Gateway Content-Type: application/json { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/bankiderror\", \"title\": \"BankID error\", \"status\": 502, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"Something went wrong with the payer's BankID authorization.\" } socialsecuritynumbermismatch Caused By: The payer’s social security number does not match with the one required by this payment. Example response socialsecuritynumbermismatch HTTP/1.1 403 Forbidden Content-Type: application/json { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/socialsecuritynumbermismatch\", \"title\": \"Social Security Number Mismatch\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The payer's social security number does not match with the one required by this payment.\" } paymentagelimitnotmet Caused By: The payer does not meet the payment’s age limit. Example response paymentagelimitnotmet HTTP/1.1 403 Forbidden Content-Type: application/json { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/paymentagelimitnotmet\", \"title\": \"Payment Age Limit Not Met\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The payer does not meet the payment's age limit.\" } usercancelled Caused By: The payer cancelled the payment in the Swish app. Example response usercancelled HTTP/1.1 403 Forbidden Content-Type: application/json { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/usercancelled\", \"title\": \"User Cancelled\", \"status\": 403, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"The payer cancelled the payment in the Swish app.\" } systemerror Example response systemerror HTTP/1.1 500 Internal Server Error Content-Type: application/json { \"sessionId\": \"570ad610-3bd5-43d2-a270-ca1510562972\", \"type\": \"https://api.payex.com/psp/errordetail/systemerror\", \"title\": \"Error in System\", \"status\": 500, \"instance\": \"https://api.payex.com/psp/swish/payments/0cf55e0f-9931-476b-249d-08d7a3ee4e14/sales\", \"detail\": \"A system error occurred. We are working on it.\" }",
    "tags": "",
    "url": "/payments/swish/other-features.html"
  },{
    "title": "Swedbank Pay MobilePay Online Payments – Other Features",
    "text": "Payment Resource The payment resource is central to all payment instruments. All operations that target the payment resource directly produce a response similar to the example seen below. The response given contains all operations that are possible to perform in the current state of the payment. Request GET /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"payeeInfo\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"urls\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"transactions\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/mobilepay/core/scripts/client/px.mobilepay.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;operation=authorize\", \"rel\": \"view-authorization\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/mobilepay/payments/authorize/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"redirect-authorization\", \"contentType\": \"text/html\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"rel\": \"create-capture\", \"contentType\": \"application/json\" } ] } Property Type Description payment object The payment object contains information about the specific payment. └➔ id string The relative URI of the payment. └➔ number integer The payment number , useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. └➔ created string The ISO-8601 date of when the payment was created. └➔ updated string The ISO-8601 date of when the payment was updated. └➔ state string Ready , Pending , Failed or Aborted . Indicates the state of the payment. This field is only for status display purposes. To └➔ prices object The prices resource lists the prices related to a specific payment. └➔ prices.id string The relative URI of the current prices resource. └➔ description string(40) A textual description of maximum 40 characters of the purchase. └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like e-mail address, mobile number, customer number etc. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string nb-NO , sv-SE or en-US └➔ urls string The URI to the urls resource where all URIs related to the payment can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment can be retrieved. operations array The array of possible operations to perform └─➔ method string The HTTP method to use when performing the operation. └─➔ href string The target URI to perform the operation against. └─➔ rel string The name of the relation the operation has to the current resource. Operations The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-payment-abort aborts the payment order before any financial transactions are performed. redirect-authorization Contains the URI that is used to redirect the consumer to the Swedbank Pay Payments containing the card authorization UI. view-authorization Contains the JavaScript href that is used to embed the card authorization UI directly on the webshop/merchant site create-capture Creates a capture transaction in order to charge the reserved funds from the consumer. create-cancellation Creates a cancellation transaction that cancels a created, but not yet captured payment. Create Payment To create a MobilePay Online payment, you perform an HTTP POST against the /psp/mobilepay/payments resource. Please read the [general information][general-http-info] on how to compose a valid HTTP request before proceeding. An example of a payment creation request is provided below. Each individual Property of the JSON document is described in the following section. Use the [expand][technical-reference-expand] request parameter to get a response that includes one or more expanded sub-resources inlined. Request POST /psp/mobilepay/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"DKK\", \"prices\": [ { \"type\": \"Visa\", \"amount\": 1500, \"vatAmount\": 0, \"FeeAmount\": 5 }, { \"type\": \"MasterCard\", \"amount\": 1500, \"vatAmount\": 0, \"FeeAmount\": 10 } ], \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"da-DK\", \"urls\": { \"hostUrls\": [\"https://example.com\", \"https://example.net\"], \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"callbackUrl\": \"http://example.com/payment-callback\" }, \"payeeInfo\": { \"payeeId\": \"12345678-1234-1234-1234-123456789012\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" }, \"prefillInfo\": { \"msisdn\": \"+4522222222\" } }, \"mobilepay\": { \"shoplogoUrl\": \"https://example.com/shop-logo.png\" } } Required Property Data type Description ✔︎︎︎︎︎ payment object The payment object. ✔︎︎︎︎︎ └➔ operation string Purchase ✔︎︎︎︎︎ └➔ intent string Authorization ✔︎︎︎︎︎ └➔ currency string NOK, SEK, DKK, USD or EUR. ✔︎︎︎︎︎ └➔ prices object The prices object. ✔︎︎︎︎︎ └─➔ type string Visa (for card type Visa), MC (for card type Mastercard) ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 DKK, 5000 = 50.00 DKK. ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant.   └─➔ feeAmount integer If the amount given includes Fee, this may be displayed for the user in the payment page (redirect only). ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.   └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like mobile number, customer number etc. ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - see user agent definition ✔︎︎︎︎︎ └➔ language string nb-NO, sv-SE or en-US. ✔︎︎︎︎︎ └➔ urls object The URLs object containing the urls used for this payment. ✔︎︎︎︎︎ └─➔ completeUrl string The URI that Swedbank Pay will redirect back to when the payment page is completed. This does not indicate a successful payment, only that it has reached a completion state. A GET request needs to be performed on the payment to inspect it further. ✔︎︎︎︎︎ └─➔ cancelUrl string The URI that Swedbank Pay will redirect back to when the user presses the cancel button in the payment page.   └─➔ callbackUrl string The URI that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details. ✔︎︎︎︎︎ └➔ payeeInfo object This object contains the identificators of the payee of this payment. ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. ✔︎︎︎︎︎ └─➔ payeeReference string(50) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.   └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.   └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference String(50) The order reference should reflect the order reference found in the merchant’s systems.   └─➔ subsite String(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used.   └➔ prefillInfo.msisdn string umber will be prefilled on payment page, if valid.   └➔ mobilepay.shoplogoUrl string URI to logo that will be visible at MobilePay Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"prices\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 75100000121, \"created\": \"2018-09-11T10:58:27.4236127Z\", \"updated\": \"2018-09-11T10:58:30.8254419Z\", \"instrument\": \"MobilePay\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"DKK\", \"amount\": 3000, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.2.0\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"da-DK\", \"transactions\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"urls\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeinfo\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://https://api.externalintegration.payex.com/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\" }, { \"method\": \"GET\", \"href\": \"https://https://ecom.externalintegration.payex.com/mobilepay/payments/authorize/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"redirect-authorization\" } ] } Property Data type Description payment object The payment object contains information about the retrieved payment. └➔ id string The relative URI to the payment. └➔ number integer The payment number, useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. └➔ created string The ISO-8601 date of when the payment was created. └➔ updated string The ISO-8601 date of when the payment was updated. └➔ instrument string The instrument used └➔ operation string Purchase └➔ intent string The intent sent in on request └➔ state string Ready, Pending, Failed or Aborted. Indicates the state of the payment. This field is only for status display purposes. └➔ currency string The currency used └➔ description string(40) A textual description of maximum 40 characters of the purchase. └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like mobile number, customer number etc. └➔ initiatingSystemUserAgent string The system user agent used └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string nb-NO, sv-SE or en-US └➔ urls string The URI to the urls resource where all URIs related to the payment can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment can be retrieved. Purchase Posting a payment (operation Purchase) returns the options of aborting the payment altogether or creating an authorization transaction through the redirect-authorization hyperlink. Use the expand request parameter to get a response that includes one or more expanded sub-resources inlined. { \"payment\": { \"operation\": \"Purchase\" } } Operations When a payment resource is created and during its lifetime, it will have a set of operations that can be performed on it. Which operations are available will vary depending on the state of the payment resource, what the access token is authorized to do, etc. A list of possible operations and their explanation is given below. { \"payment\": {}, \"operations\": [ { \"href\": \"http://https://api.externalintegration.payex.com/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"method\": \"PATCH\" }, { \"href\": \"https://https://ecom.externalintegration.payex.com/mobilepay/payments/authorize/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"redirect-authorization\", \"method\": \"GET\" }, { \"href\": \"https://https://api.externalintegration.payex.com/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"rel\": \"create-capture\", \"method\": \"POST\" }, { \"href\": \"https://https://api.externalintegration.payex.com/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\", \"rel\": \"create-cancellation\", \"method\": \"POST\" }, { \"href\": \"https://https://api.externalintegration.payex.com/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\", \"rel\": \"create-reversal\", \"method\": \"POST\" }, ] } Property Description href The target URI to perform the operation against. rel The name of the relation the operation has to the current resource. method The HTTP method to use when performing the operation. The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-payment-abort Aborts the payment before any financial transactions are performed. create-authorization Create an authorization transaction. redirect-authorization Used to redirect the consumer to the MobilePay Online authorization UI. create-capture Creates a capture transaction. create-cancellation Creates a cancellation transaction. create-reversal Creates a reversal transaction. MobilePay Online transactions All MobilePay Online specific transactions are described below. Authorizations The authorizations resource contains information about the authorization transactions made on a specific payment. Request GET /psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"authorizations\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\", \"authorizationList\": [{ \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Authorization\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Required payment string The relative URI of the payment this list of authorization transactions belong to. authorizations object The current authorizations resource. └➔ id string The relative URI of the current authorizations resource. └➔ authorizationList array The array of authorization transaction objects. └➔ authorizationList[] object The authorization transaction object described in the authorization resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. You can return a specific autorization transaction by adding the transaction id to the GETrequest. Request GET /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ HTTP/1.1 Host: https://api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"authorization\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"paymentToken\": \"afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"maskedPan\": \"123456xxxxxx1234\", \"expireDate\": \"mm/yyyy\", \"panToken\": \"ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"cardBrand\": \"Visa\", \"cardType\": \"Credit Card\", \"issuingBank\": \"UTL MAESTRO\", \"countryCode\": \"999\", \"acquirerTransactionType\": \"3DSECURE\", \"acquirerStan\": \"39736\", \"acquirerTerminalId\": \"39\", \"acquirerTransactionTime\": \"2017-08-29T13:42:18Z\", \"authenticationStatus\": \"Y\", \"transaction\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Authorization\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [{ \"href\": \"https://api.externalintegration.payex.com/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"edit-authorization\", \"method\": \"PATCH\" }] } } } Property Type Description payment string The relative URI of the payment this authorization transaction resource belongs to. authorization string The current authorization transaction resource. └➔ id string The relative URI of the current authorization transaction resource. └➔ paymentToken string The payment token created for the card used in the authorization. └➔ maskedPan string The masked PAN number of the card. └➔ expireDate string The month and year of when the card expires. └➔ panToken string The token representing the specific PAN of the card. └➔ cardBrand string Visa, MC, etc. The brand of the card. └➔ cardType string Credit Card or Debit Card. Indicates the type of card used for the authorization. └➔ issuingBank string The name of the bank that issued the card used for the authorization. └➔ countryCode string The country the card is issued in. └➔ acquirerTransactionType string 3DSECURE or SSL. Indicates the transaction type of the acquirer. └➔ acquirerStan string The System Trace Audit Number assigned by the acquirer to uniquely identify the transaction. └➔ acquirerTerminalId string The ID of the acquirer terminal. └➔ acquirerTransactionTime string The ISO-8601 date and time of the acquirer transaction. └➔ authenticationStatus string Y, A, U or N. Indicates the status of the authentication. └➔ transaction object The object representation of the generic transaction resource. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Create authorization transaction The authorization transaction is initiated by redirecting the end-user/consumer to the hyperlink returned in the redirect-authorization request. Captures The captures resource lists the capture transactions (one or more) on a specific payment. Request GET /psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"captures\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"captureList\": [{ \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Required payment string The relative URI of the payment this list of capture transactions belong to. captures object The current captures resource. └➔ id string The relative URI of the current captures resource. └➔ captureList array The array of capture transaction objects. └➔ captureList[] object The capture transaction object described in the capture resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Create capture transaction A capture transaction - to withdraw money from the payer’s MobilePay - can be created after a completed authorization by performing the create-capture operation. Request POST /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"amount\": 1000, \"vatAmount\": 250, \"payeeReference\": 1234, \"description\" : \"description for transaction\" } } Required Property Type Description ✔︎︎︎︎︎ transaction object The currenct capture object. ✔︎︎︎︎︎ └➔ amount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 DKK, 5000 = 50.00 DKK. ✔︎︎︎︎︎ └➔ vatAmount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 DKK, 5000 = 50.00 DKK. ✔︎︎︎︎︎ └➔ description string A textual description of the capture transaction. ✔︎︎︎︎︎ └➔ payeeReference string(50) A unique reference for the capture transaction. See payeeReference for details. The capture resource contains information about the capture transaction made against a MobilePay Online payment. You can return a specific capture transaction by adding the transaction id to the GET request. Request GET /psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"captures\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"captureList\": [{ \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Required payment string The relative URI of the payment this list of capture transactions belong to. captures object The current captures resource. └➔ id string The relative URI of the current captures resource. └➔ captureList array The array of capture transaction objects. └➔ captureList[] object The capture transaction object described in the capture resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Cancellations The cancellations resource lists the cancellation transactions on a specific payment. Request GET /psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellations\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\", \"cancellationList\": [{ \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Cancellation\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Required payment string The relative URI of the payment this list of cancellation transactions belong to. cancellations object The current cancellations resource. └➔ id string The relative URI of the current cancellations resource. └➔ cancellationList array The array of cancellation transaction objects. └➔ cancellationList[] object The cancellation transaction object described in the cancellation resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Create cancellation transaction Perform the create-cancel operation to cancel a previously created payment. You can only cancel a payment - or part of payment - not yet captured. Request POST /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"description\": \"Test Cancellation\", \"payeeReference\": \"ABC123\" } } Required Property Type Description ✔︎︎︎︎︎ transaction object The current cancellation. ✔︎︎︎︎︎ └➔ description string A textual description of the reason for the cancellation. ✔︎︎︎︎︎ └➔ payeeReference string(50) A unique reference for the cancellation transaction. See payeeReference for details. The cancel resource contains information about a cancellation transaction made against a payment. You can return a specific cancellation transaction by adding the transaction id to the GET request. Request GET /psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellations\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\", \"cancellationList\": [{ \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Cancellation\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Required payment string The relative URI of the payment this list of cancellation transactions belong to. cancellations object The current cancellations resource. └➔ id string The relative URI of the current cancellations resource. └➔ cancellationList array The array of cancellation transaction objects. └➔ cancellationList[] object The cancellation transaction object described in the cancellation resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Reversals The reversals resource lists the reversal transactions (one or more) on a specific payment. Request GET /psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"reversals\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\", \"reversalList\": [{ \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Required payment string The relative URI of the payment this list of reversal transactions belong to. reversals object The current reversals resource. └➔ id string The relative URI of the current reversals resource. └➔ reversalList array The array of reversal transaction objects. └➔ reversalList[] object The reversal transaction object described in the reversal resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Create reversal transaction The create-reversal operation reverses a previously created and captured payment. Request POST /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"amount\": 1000, \"vatAmount\": 0, \"description\" : \"Test Reversal\", \"payeeReference\": \"DEF456\" } } Required Property Type Description ✔︎ transaction object The current reversal transaction object ✔︎ └➔ amount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 DKK, 5000 = 50.00 DKK. ✔︎ └➔ vatAmount integer Amount Entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 DKK, 5000 = 50.00 DKK. ✔︎ └➔ description string A textual description of the capture ✔︎ └➔ payeeReference string(50) A unique reference for the reversal transaction. See payeeReference for details. The reversal resource contains information about a reversal transaction made against a payment. You can return a specific reversal transaction by adding the transaction id to the GET request. Request GET /psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"reversals\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\", \"reversalList\": [{ \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/mobile-pay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } }] } } Property Type Required payment string The relative URI of the payment this list of reversal transactions belong to. reversals object The current reversals resource. └➔ id string The relative URI of the current reversals resource. └➔ reversalList array The array of reversal transaction objects. └➔ reversalList[] object The reversal transaction object described in the reversal resource below. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. └─➔ failedReason string The human readable explanation of why the payment failed. └─➔ isOperational bool true if the transaction is operational; otherwise false. └─➔ operations array The array of operations that are possible to perform on the transaction in its current state. Capture Sequence Capture can only be perfomed on a payment with a successfully authorized transaction. It is possible to do a part-capture where you only capture a smaller amount than the authorized amount. You can later do more captures on the same payment up to the total authorization amount. sequenceDiagram Merchant-&gt;&gt;PayEx: POST &lt;mobilepay capture&gt; Activate Merchant Activate PayEx PayEx--&gt;&gt;Merchant: transaction resource Deactivate PayEx Deactivate Merchant Cancel Sequence Cancel can only be done on a authorized transaction. If you do cancel after doing a part-capture you will cancel the difference between the captured amount and the authorized amount. sequenceDiagram Merchant-&gt;&gt;PayEx: POST &lt;mobilepay cancellation&gt; Activate Merchant Activate PayEx PayEx--&gt;&gt;Merchant: transaction resource Deactivate PayEx Deactivate Merchant Reversal Sequence Reversal can only be done on a payment where there are some captured amount not yet reversed. sequenceDiagram Merchant-&gt;&gt;PayEx: POST &lt;mobilepay reversal&gt; Activate Merchant Activate PayEx PayEx--&gt;&gt;Merchant: transaction resource Deactivate PayEx Deactivate Merchant Abort a payment To abort a payment, perform the update-payment-abort operation that is returned in the payment request. You need to include the following HTTP body: Request PATCH /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Abort\", \"abortReason\": \"CancelledByConsumer\" } } Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 70100130293, \"created\": \"2019-01-09T13:11:28.371179Z\", \"updated\": \"2019-01-09T13:11:46.5949967Z\", \"instrument\": \"CreditCard\", \"operation\": \"Purchase\", \"intent\": \"AutoCapture\", \"state\": \"Aborted\", \"currency\": \"DKK\", \"prices\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"amount\": 0, \"description\": \"creditcard Test\", \"payerReference\": \"100500\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.1.1\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"nb-NO\", \"urls\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeinfo\" }, \"metadata\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/metadata\" } }, \"operations\": [] } The response will be the payment resource with its state set to Aborted. Settlement and Reconciliation Reconciliation is an important step in an economic transaction. When a payment is reconciled, captured amounts for the payment are matched against the corresponding settlement. The information needed to reconcile captured funds - the balance report and transactions list - are available for all merchants using Swedbank Pay. By default you receive these files by e-mail, but it is also possible to get them via FTP access. Contact omni.client@swedbankpay.se for further inquiries regarding this. The settlement frequency is defined in the agreement and you will receive a report for each payout and/or invoice. Settlement There are two main alternatives for settlement - either we handle the settlement process for you, or you handle the process yourself : Swedbank Pay handles the settlement process Swedbank Pay handles the settlement process on your behalf, (called “Redovisningsservice”). Swedbank Pay transfers the net amount to you directly. Swedbank Pay Checkout When choosing Swedbank Pay Checkout we always handle the settlement process for you, gathering all your eCommerce payments in one place. Straighforward and time efficient. You handle the settlement process yourself If you will handle the settlement yourself, then Swedbank Pay will send you an invoice with the relevant fees, in addition to the report and transactions lists. Your acquirer will transfer settled funds to you. Balance Report The Balance Report (a .pdf file) specifies the total sales for a specific period, including fees and VAT. The report contains three parts: a payment summary and specifications for sales and for fees. Payment Summary Provides a summary of the Amount sold, Fees and VAT. If Swedbank Pay handles the settlement process, the Transferedamount - shown in the balance report summary is equivalent to the disbursement on the bank statement (the remaining total amount after fees). Sales specification Provides a specification over sales for the given period. The sales total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each sales row specify Quantity, Sum sales and Amount to pay out, the last one is only eligble if Swedbank Pay handles the Settlement process. Fees specification Provides a specification over fees for the given period. The fees total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each fees row specify Quantity (sales), Amount (sales), Unit price, Provision and fee Amount. If you handle the settlement process yourselves you will receive a separat invoice for fees. Transactions List The Transaction List (provided in .xlsx and .xml formats) specifies all transactions for a specific period, including a summary of transactions grouped by payment instrument. Both formats contain the same information, but the xml file is meant for computer processing while the excel workbook is meant for human interaction. The first row contains the name of the Swedbank Pay company (e.g. Swedbank Pay Solutions AB) that the merchant has the contract with, and the balance report number. The header fields contain a summary of the transactions displayed in the body. Header fields Field Type Description Prefix String The Prefix used for transactions, only eligible if merchant uses prefix. Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). ServiceType String The service type of the service used (e.g. Creditcard). Service String The service used (e.g. Creditcard). NoOfDebet Decimal Total number of debit transactions for the given service. NoOfCredit Decimal Total number of credit transactions for the given service. Amount Decimal Total amount for the given service (e.g 100.00). FromDate ISO 8601 The earlistest transaction date, YYYY-MM-DD. ToDate ISO 8601 The latest transaction date, YYYY-MM-DD. Body fields Field Type Description Swedbank Pay Batch Number Decimal A batch number common to all types of transactions processed by PayEx. Transaction Number Decimal A unique identifier of the transaction, can be traced in Swedbank Pay Admin user interface. Order id String A unique identifier of the order, as sent from the merchant to PayEx. Transactions that are related to the same order are associated with this ID. Date Created ISO 8601 Transaction capture date/time. YYYY-MM-DD hh:mm:ss. Date Modified ISO 8601 Transaction settle date/time. YYYY-MM-DD hh:mm:ss. Provider String The service provider (e.g. Babs, Swedbank). Type String The service type of the related transaction (e.g. Creditcard). Amount Decimal Total amount of the related transaction (e.g 100.00). Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). Product Number String A product number, as sent by merchant to PayEx. Description String A textual description of the transaction, as sent by merchant to PayEx. VAT Amount Decimal VAT Amount for the given transaction (e.g 100.00). VAT Percentage Decimal VAT Percentage for the given transaction. Credit Card Batch Number Decimal The reference number from the credit card processor. Reference Decimal The transaction reference from processor. Swedbank Pay Account Number Decimal The Account number given, shown in Swedbank Pay admin. Referenced Transaction Number Decimal Transaction number for the Authoriation transaction for a two-stage transaction or the number of the debit transaction if it is a credit transaction. Sales Channel String The channel through which the transaction was sent to Swedbank Pay (e.g Transaction via eCommerce APIs). Brand String If eligible, Branding information as sent by merchant to PayEx. Point Of Sale String If eligible, POS information as sent by merchant to PayEx. Reconciliation To do the reconciliation, you need to match the information in your system against the information provided by Swedbank Pay in the balance report and transaction list. Below is a sequence diagram detailing the interaction. sequenceDiagram participant SwedbankPay as Swedbank Pay activate Merchant activate SwedbankPay Merchant--&gt;&gt;SwedbankPay: Online payment transactions deactivate Merchant deactivate SwedbankPay activate Merchant SwedbankPay-&gt;&gt;Merchant: Balance Report (PDF-file) note left of Merchant: files are sent by e-mail or file transfer SwedbankPay-&gt;&gt;Merchant: Transaction list (XLSX-file) SwedbankPay-&gt;&gt;Merchant: Transaction list (XML-file) deactivate Merchant There are two ways for you to match the information from your system with the information given in the reconciliation files from Swedbank Pay: You can use information generated by your system (you will have to set a unique payeeReference when you make the transaction), or You can use the transaction number generated by Swedbank Pay (this is called transaction number and is returned from Swedbank Pay after you have created the transaction). A credit card transaction is made when you either make a capture or a reversal. In the input data for making a capture, you will set the payeeReference. The unique value of this field is the same as the field called OrderID in the reconciliation file. { \"transaction\": { \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Reversal\", \"payeeReference\": \"ABC123\" } } When you receive the response from Swedbank Pay, the response will include transaction.number. This is the same as the field called TransactionNo in the reconciliation file. { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1500, \"vatAmount\": 250, \"description\": \"Test Capture\", \"payeeReference\": \"ABC123\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } payeeReference sent to Swedbank Pay is equal to OrderId in the reconciliation file. capture.transaction.number returned from Swedbank Pay is equal to TransactionNo in reconciliation file. Samples The content of the files depends on the type of agreement you have made with Swedbank Pay. For some payment instruments, only option A is available, while for other payment instruments, only option B is available. The sample files can be downloaded below. Option A: Swedbank Pay handles the settlement process PDF Balance Report for Swedbank Pay Checkout PDF Balance Report XLSX Transaction List XML Transaction List Option B: You will handle the settlement process yourself PDF Balance Report XLSX Transaction List XML Transaction List Split Settlement The prefix split is the easy way of doing settlements for companies with multiple sub merchants. With only a few easy steps, you can make the settlement process more efficient with regards to invoicing, payouts and setup for both your sub merchants and yourself. In short, it is a settlement feature where a company with a website or an app can attach specific prefix numbers to sub merchants selling their goods or services through the company. The prefix number is used to match the transactions and the merchant, so the settlement is automatically split between the sub merchants. If you run a site selling tickets to concerts, theatres, sporting events etc., each venue gets its own prefix number. If you run a funeral home, the sub merchants can be everything from flower delivery to charities. What we need from you as a company Send us a KYC form for each sub merchant you want to include. We will also do a KYC check on your sub merchants, providing extra security for you. Give every sub merchant who sells goods/services at your website or in your app a unique prefix number. This needs to be included in the KYC form you send to us. We recommend using the same customer number they have in your system. Attach the prefix number to all the goods/services the sub merchant sells through your website or app, so the goods/services can be matched to the correct merchant in our back office system. A partner agreement is needed for the automatic deduction of revenue cuts and fees. How it works We set up the sub merchant prefix in our systems. The prefix number is added in the subsite field in the API call when you create the payment for the goods or service. The customer selects payment instrument and completes the payment. The payment goes into the client funds account. Swedbank Pay matches the transaction and the merchant using the prefix number. The settlement is split and connected to the correct merchant. Revenue cuts for the super merchant and fees from Swedbank Pay are deducted automatically. Payout to the sub merchant is done. The upsides Since the sub merchants are connected to Swedbank Pay through the super merchant instead of having separate setups, this means that you: Only need one agreement for credit card, Vipps, Swish, MobilePay, invoice and payment gateway. Only need one acquiring agreement. Only need one Vipps/Swish certificate. Can add more payment instruments easily, as it only has to be done once. Can set up new sub merchants quickly, as the only thing needed is a KYC form and a prefix number. This shortens the setup time for both you and us to a matter of hours. The automatic settlement split and deduction of fees and revenue cuts minimizes the work for your accounting department, as you do not have to invoice your sub merchants. The prefix split is available with all the payment instruments we offer on our eCom platform. Good to know With regards to admin functions, we offer a full integration towards our admin system. This way, you do not have to log in to Swedbank Pay Admin to perform these operations. Captures and cancels Captures and cancels are done by the super merchant the same way as any other normal flow. Reversals In cases where you need to do reversals, this will be performed by the super merchant. The reversal amount will be charged from the sub merchants prefix. If the sub merchants balance is 0 (zero), the super merchant will be invoiced. The super merchant will in turn have to invoice this amount to the sub merchant. One-Click Payments One-Click Payments utilize a previously generated payment token to prefill payment details for credit card or invoice payments pages - which means that the payer don’t need to enter these details for every purchase. Introduction For credit card and financing invoice payments the payment flow and implementation varies from your default only being the use of a paymentToken. The details in this section describe explicitly the parameters that must be set to enable one-click purchases. Payment Url For our Seamless Views, the property called paymentUrl will be used when the consumer is redirected out of the Seamless View (the iframe). The consumer is redirected out of frame when at the 3-D Secure verification for credit card payments. The URL should represent the page of where the Payment Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the Seamless View was added to in order to initiate the payment process. info Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment as the one that initiated the payment process originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer. API Requests To Generate paymentToken When making the initial purchase request, you need to generate a paymentToken. You can do this either by by setting the generatePaymentToken property to true (see example below) when doing a card purchase, or set the initial operation to Verify. generatePaymentToken property { \"generatePaymentToken\": true } Finding paymentToken value When the initial purchase is followed through, a paymentToken will linked to the payment. You can return the value by making a GET request towards payment resource (expanding either the authorizations or verifications sub-resource), after the consumer successfully has completed the purchase. The two examples are provided below. Request Towards Authorizations Resource GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Request Towards Verifications Resource GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/verifications HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; You need to store the paymentToken from the response in your system and keep track of the corresponding consumer-ID in your system. Returning Purchases When a known consumer (where you have attained a consumer-ID or similar) returns to your system, you can use the payment token, using already stored payment data, to initiate one-click payments. You will need to make a standard purchase, following the sequence as specified in the Redirect or Seamless View scenarios for credit card and financing invoice. When making the first POST request you insert the paymentToken property. This must be the paymentToken you received in the initial purchase, where you specified the generatePaymentToken to true. See the Other Feature sections for how to create a card and invoice payment. Abbreviated code example: Request POST /psp/creditcard/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"paymentToken\": \"afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\" }, \"creditCard\": { \"noCVC\": true } } Required Property Type Description ✔︎︎︎︎︎ payment object The payment object. ✔︎︎︎︎︎ └➔ operation string Determines the initial operation, that defines the type card payment created. Purchase. Used to charge a card. It is followed up by a capture or cancel operation. Recur.Used to charge a card on a recurring basis. Is followed up by a capture or cancel operation (if not Autocapture is used, that is). Payout. Used to deposit funds directly to credit card. No more requests are necessary from the merchant side. Verify. Used when authorizing a card withouth reserveing any funds. It is followed up by a verification transaction. ✔︎︎︎︎︎ └➔ intent string The intent of the payment identifies how and when the charge will be effectuated. This determine the type transactions used during the payment process. Authorization. Reserves the amount, and is followed by a cancellation or capture of funds. AutoCapture. A one phase-option that enable capture of funds automatically after authorization. ✔︎︎︎︎︎ └➔ paymentToken string The paymentToken value received in GET response towards the Payment Resource is the same paymentToken generated in the initial purchase request. The token allow you to use already stored card data to initiate one-click payments.   └➔ creditCard object An object that holds different scenarios for card payments.   └─➔ noCvc boolean true if the CVC field should be disabled for this payment in the case a stored card is used; otherwise false per default. To use this feature it has to be enabled on the contract with Swedbank Pay. info When redirecting to Swedbank Pay the payment page will be prefilled with the payer’s card details. See example below. Delete payment token If you, for any reason, need to delete a paymentToken you use the Delete payment token request. warning Please note that this call does not erase the card number stored at Swedbank Pay. A card number is automatically deleted six months after a successful Deletepayment token request. If you want card information removed at an earlier date, you need to contact ehandelsetup@swedbankpay.dk, verkkokauppa.setup@swedbankpay.fi, ehandelsetup@swedbankpay.no or ehandelsetup@swedbankpay.se; and supply them with the relevant transaction reference or payment token. Request PATCH /psp/creditcard/payments/instrumentData/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"state\": \"Deleted\", \"tokenType\": \"PaymentToken\", \"comment\": \"Comment on why the deletion is happening\" } Response HTTP/1.1 200 OK Content-Type: application/json { \"instrumentData\": { \"id\": \"/psp/creditcard/payments/instrumentdata/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"paymentToken\": \"afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"isDeleted\": true, \"isPayeeToken\": false, \"cardBrand\": \"Visa\", \"maskedPan\": \"123456xxxxxx1111\", \"expiryDate\": \"MM/YYYY\" } } Payment Link The implementation sequence for this scenario is a variant of the purchase sequence. The consumer is not redirected to the Payments directly but will instead receive a payment link via mail/SMS. When the consumer clicks on the link, a payment window opens. Introduction The Payment Link can be implemented for payment instruments listed below, using the Redirect platform and Swedbank Pay hosted payment page. Credit card MobilePay Swish Vipps When the consumer/end-user starts the purchase process in your merchant or webshop site, you need to make a POST request towards Swedbank Pay with your Purchase information. You receive a Payment Link (same as redirect URL) in response. You have to distribute the Payment Link to the consumer through your order system, using channels like e-mail or SMS. info When sending information in e-mail/SMS, it is strongly recommended that you add information about your terms and conditions, including purchase information and price. See recommendations in the next section. When the consumer clicks on the Payment Link, the Swedbank Pay payment page will open, letting the consumer enter the payment details (varying depending on payment instrument) in a secure Swedbank Pay hosted environment. When paying with credit card and if required, Swedbank Pay will handle 3-D Secure authentication. After completion, Swedbank Pay will redirect the browser back to your merchant/webshop site. If callbackURL is set the merchant system will receive a callback from Swedbank Pay, enabling you to make a GET request towards Swedbank Pay with the id of the payment received in the first step, which will return the purchase result. E-mail And SMS Recommendations When you as a merchant sends an e-mail or SMS to the consumer about the Payment Link, it is recommended to include contextual information that help the consumer understand what will happen when clicking on the Payment Link. We recommend that you include following information: The name of the merchant/shop that initiates the payment An understandable product description, describing what kind of service the consumer will pay for. Some order-id (or similar) that exists in the merchant order system. The price and currency. Details about shipping method and expected delivery (if physical goods will be sent to the consumer). Directions to (a link to a page) the merchant’s terms and conditions (such as return policy) and information of how the consumer can contact the merchant. Details informing the consumer that he or she accepts the Terms &amp; Conditions when clicking on the Payment Link. Receipt Recommendations We recommend that you send an e-mail or SMS confirmation with a receipt to the consumer when the payment has been fulfilled. API Requests The API requests depend on the payment instrument you are using when implementing the Payment Link scenario, see purchase flow. One-phase payment instruments will not implement capture, cancellation or reversal. The options you can choose from when creating a payment with key operation set to Purchase are listed below. Screenshots When clicking the payment link, the consumer will be directed to a payment page, similar to the examples below, where payment information can be entered. Options All valid options when posting in a payment with operation Purchase, are described in each payment instrument’s respective API reference. Please see the general sequence diagrams for more information about payments in one-phase (e.g. Swish and credit card with autocapture) and two-phase (e.g. Credit card, MobilePay, Vipps). Authorization When using two-phase flows you reserve the amount with an authorization, you will have to specify that the intent of the purchase is Authorize. The amount will be reserved but not charged. You will later (i.e. when you are ready to ship the purchased products) have to make a Capture or Cancel request. Capture Capture can only be performed on a payment with a successfully authorized transaction. It is possible to do a part-capture where you only capture a smaller amount than the authorized amount. You can later do more captures on the same payment up to the total authorization amount. If you want the credit card to be charged right away, you will have to specify that the intent of the purchase is AutoCapture. The credit card will be charged and you don’t need to do any more financial operations to this purchase. Cancel Cancel can only be done on a authorized transaction. If you do cancel after doing a part-capture you will cancel the difference between the captured amount and the authorized amount. Reversal Reversal can only be done on a payment where there are some captured amount not yet reversed. General When implementing the Payment Link scenario, it is optional to set a callbackURL in the POST request. If callbackURL is set Swedbank Pay will send a request to this URL when the consumer as fulfilled the payment. See the Callback API description here. Purchase flow The sequence diagrams display the high level process of the purchase, from generating a Payment Link to receiving a Callback. This in a generalized flow as well as a specific 3-D Secure enabled credit card scenario. info Please note that the the callback may come either before, after or in the same moment as the consumer are being redirected to the status page at the merchant site when the purchase is fulfilled. Don’t rely on the callback being timed at any specific moment. When dealing with credit card payments, 3-D Secure authentication of the cardholder is an essential topic. There are three alternative outcome of a credit card payment: 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. sequenceDiagram activate Consumer Consumer-&gt;&gt;-MerchantOrderSystem: consumer starts purchase activate MerchantOrderSystem MerchantOrderSystem-&gt;&gt;-Merchant: start purchase process activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST [payment] (operation=PURCHASE) activate SwedbankPay note left of Merchant: First API request SwedbankPay--&gt;&gt;-Merchant: payment resource with payment URL activate Merchant Merchant--&gt;&gt;-MerchantOrderSystem: Payment URL sent to order system activate MerchantOrderSystem MerchantOrderSystem--&gt;&gt;-Consumer: Distribute Payment URL through e-mail/SMS activate Consumer note left of Consumer: Payment Link in e-mail/SMS Consumer-&gt;&gt;-SwedbankPay: Open link and enter payment information activate SwedbankPay opt Card supports 3-D Secure SwedbankPay--&gt;&gt;-Consumer: redirect to IssuingBank activate Consumer Consumer-&gt;&gt;IssuingBank: 3-D Secure authentication process Consumer-&gt;&gt;-SwedbankPay: access authentication page activate SwedbankPay end SwedbankPay--&gt;&gt;-Consumer: redirect to merchant site activate Consumer note left of SwedbankPay: redirect back to merchant Consumer-&gt;&gt;-Merchant: access merchant page activate Merchant Merchant-&gt;&gt;-SwedbankPay: GET [payment] activate SwedbankPay note left of Merchant: Second API request SwedbankPay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Consumer: display purchase result Options after posting a payment If the payment enable a two-phase flow (Authorize), you will need to implement the Capture and Cancel requests. It is possible to “abort” the validity of the Payment Link. See the Abort description here. For reversals, you will need to implement the Reversal request. When implementing the Payment Link scenario, it is optional to set a callbackURL in the POST request. If callbackURL is set Swedbank Pay will send a postback request to this URL when the consumer as fulfilled the payment. See the Callback API description here. Recurring payments A recurring payment enables you to charge a credit card without any consumer interaction. When an initial payment token is generated subsequent payments is made through server-to-server requests. Prerequisites Prior to making any server-to-server requests, you need to supply the payment instrument details and a payment token to Swedbank Pay by initial purchase or card verification. There are two ways to initiate recurring payments procedures, depending on if you want to make an initial charge or not: Initiate a recurring payment flow and charge the credit card. This is done by creating a “Purchase Payment” and generating a recurrence token. Initiate a recurring payment flow without charging the credit card. This is done by creating a “Verify Payment” and generating a recurrence token. Generate RecurrenceToken When posting a Purchase payment, you need to make sure that the property generateRecurrenceToken is set to true Property \"generateRecurrenceToken\": true When posting a Verify payment, a payment token will be generated automatically. Creating a Payment You need to POST a Purchase payment / and generate a recurrence token (safekeep for later recurring use). You need to POST a Verify payment, that will automatically generate a recurrence token (for later recurring use). Retrieve Recurrence Token The recurrence token can then be retrieved by doing a GET request against the payment. You need to store this recurrenceToken in your system and keep track of the corresponding consumer-ID. Delete Recurrence Token You can delete a created recurrence token. Please see technical reference for details here. Recurring purchases When you have a Recurrence token stored away. You can use the same token in a subsequent recurring payment POST. This will be a server-to-server affair, as we have both payment instrument details and recurrence token from the initial payment. info Please note that this POSTrequest is made directly on the payment level, and will not create a payment order. Options after a payment You have the following options after a server-to-server Recur payment POST. Autorization (intent) Authorization (two-phase): If you want the credit card to reserve the amount, you will have to specify that the intent of the purchase is Authorization. The amount will be reserved but not charged. You will later (i.e. when you are ready to ship the purchased products) have to make a Capture or Cancel request. Capture (intent) AutoCapture (one-phase): If you want the credit card to be charged right away, you will have to specify that the intent of the purchase is AutoCapture. This is only allowed if the consumer purchases digital products. The credit card will be charged and you don’t need to do any more financial operations to this purchase.​​​​​ General Defining CallbackURL: When implementing a scenario, it is optional to set a CallbackURL in the POST request. If callbackURL is set Swedbank Pay will send a postback request to this URL when the consumer has fulfilled the payment. Verify A Verify payment lets you post verifications to confirm the validity of card information, without reserving or charging any amount. This option is often used to initiate a recurring payment flow where you do not want to charge the consumer right away. info Please note that all boolean credit card attributes involving rejection of certain card types are optional and set on contract level. Request POST /psp/creditcard/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Verify\", \"currency\": \"NOK\", \"description\": \"Test Verification\", \"payerReference\": \"AB1234\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"generatePaymentToken\": true, \"generateRecurrenceToken\": false, \"urls\": { \"hostUrls\": [ \"https://example.com\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"paymentUrl\": \"http://example.com/perform-payment\", \"logoUrl\": \"https://example.com/payment-logo.png\", \"termsOfServiceUrl\": \"https://example.com/payment-terms.html\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" } }, \"creditCard\": { \"rejectCreditCards\": false, \"rejectDebitCards\": false, \"rejectConsumerCards\": false, \"rejectCorporateCards\": false } } Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"operation\": \"Verify\", \"state\": \"Ready\", \"currency\": \"NOK\", \"amount\": 0, \"description\": \"Test Verification\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"nb-NO\", \"transactions\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"verifications\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/verifications\" }, \"urls\" : { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\" : { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"settings\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" } }, \"operations\": [ { \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"href\": \"https://ecom.externalintegration.payex.com/creditcard/payments/verification/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-verification\", \"method\": \"GET\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/core/scripts/client/px.creditcard.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"view-verification\", \"contentType\": \"application/javascript\" }, { \"method\": \"POST\", \"href\": \"https://ecom.externalintegration.payex.com/psp/creditcard/confined/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/verifications\", \"rel\": \"direct-verification\", \"contentType\": \"application/json\" } ] } Callback When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform a callback to inform the payee (merchant) about this update. Setting a callbackUrl in the HTTP POST API is optional, but highly recommended. If a payer closes the browser window, a network error or something else happens that prevents the payer from being redirect from Swedbank Pay back to the merchant website, the callback is what ensures that you receive information about what happened with the payment. When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform an asynchronous server-to-server callback to inform the payee (merchant) about this update. Swedbank Pay will make an HTTP POST to the callbackUrl that was specified when the payee (merchant) created the payment. When the callbackUrl receives such a callback, an HTTP GET request must be made on the payment or on the transaction. The retrieved payment or transaction resource will give you the necessary information about the recent change/update. The callback will be retried if it fails. Below are the retry timings, in seconds from the initial transaction time: 30 seconds 60 seconds 360 seconds 432 seconds 864 seconds 1265 seconds The callback is sent from the following IP address: 82.115.146.1 A callback should return a 200 OK response. Payment Instrument Callback { \"payment\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 222222222 }, \"transaction\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/&lt;transaction type&gt;/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"number\": 333333333 } } Parameter Description &lt;transaction type&gt; authorizations, captures, cancellations, reversals The sequence diagram below shows the HTTP POST you will receive from Swedbank Pay, and the two GET requests that you make to get the updated status. sequenceDiagram Participant Merchant Participant SwedbankPay as Swedbank Pay activate SwedbankPay SwedbankPay-&gt;&gt;+Merchant: POST &lt;callbackUrl&gt; deactivate SwedbankPay note left of Merchant: Callback by Swedbank Pay Merchant--&gt;&gt;+SwedbankPay: HTTP response Merchant-&gt;&gt;+SwedbankPay: GET mobilepay payment deactivate Merchant note left of Merchant: First API request SwedbankPay--&gt;&gt;+Merchant: payment resource deactivate SwedbankPay Transactions A payment contains sub-resources in the form of transactions. Most operations performed on a payment ends up as a transaction. The different types of operations that alter the state of the payment by creating a transaction is described below. The transactions resource will list the transactions (one or more) on a specific payment. Request GET /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"transactions\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\", \"transactionList\": [{ \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Authorization\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test authorization\", \"payeeReference\": \"PR1004\", \"failedReason\": \"\", \"isOperational\": true, \"operations\": [] }] } } Property Type Description payment string The relative URI of the payment this list of transactions belong to. transactions object The transactions object. └➔ id string The relative URI of the current transactions resource. └➔ transactionList array The array of transaction objects. └➔ transactionList[] object The transaction object (described in the transaction resource below). Transaction The transaction resource contains the generic details of a transaction on a specific payment. When a transaction is created it will have one of three states: Initialized - if there is some error where the source is undeterminable (network failure, etc), the transaction will remain Initialized. The corresponding state of the payment order will in this case be set to pending. No further transactions can be created. Completed - if everything went ok the transaction will follow through to completion. Failed - if the transaction has failed (i.e. a denial from the acquiring bank) it is possible to retry (i.e the consumer tries using another credit card) up to a maximum amount of retries (in that case which the payment order gets the state failed as well). Request GET /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"transaction\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": true, \"operations\": [] } } Property Type Description payment string The relative URI of the payment this transaction belongs to. transaction object The transaction object. └➔ id string The relative URI of the current transaction resource. └➔ created string The ISO-8601 date and time of when the transaction was created. └➔ updated string The ISO-8601 date and time of when the transaction was created. └➔ type string Indicates the transaction type. └➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └➔ description string A human readable description of maximum 40 characters of the transaction. └➔ payeeReference string A unique reference for the transaction. └➔ failedReason string The human readable explanation of why the payment failed. └➔ isOperational bool true if the transaction is operational; otherwise false. └➔ operations array The array of operations that are possible to perform on the transaction in its current state. Prices The prices resource lists the prices related to a specific payment. Request GET /psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"prices\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\", \"priceList\": [ { \"type\": \"VISA\", \"amount\": 2350, \"vatAmount\": 0 }, { \"type\": \"MasterCard\", \"amount\": 2350, \"vatAmount\": 0 } ] } } Property Type Description payment string The relative URI of the payment the prices resource belongs to. prices object The prices resource. └➔ id string The relative URI of the current prices resource. └➔ priceList array The array of price objects. Note: Even if you specifiy CreditCard in the input message the system will return all your configured card brands instead when you expan the priceList. └─➔ type string The type of the price object. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. Prices Object Types Each payment instrument have one or more prices object types. This is most relevant when using card based payments as each type correspond to a card brand or bank respectively. MobilePay Payments Type Description Mobilepay Always MobilePay PayeeInfo The payeeinfo resource contains information about the payee (i.e. a merchant, a corporation etc) related to a specific payment. Request GET /psp/paymentorder/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/paymentorder/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"payeeInfo\": { \"id\": \"/psp/paymentorder/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\", \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"EN1234\", \"payeeName\": \"TestMerchant1\", \"productCategory\": \"EF1234\", \"orderReference\": \"or-123456\" } } Property Type Description payment string The URI of the payment which the payeeinfo belongs to. └➔ id string The URI of the current payeeinfo resource. └➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay └➔ payeeReference string(50) A unique reference set by the merchant system. See below for details └➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay. └➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. You therefore need to ensure that the value given here is valid in the settlement. └➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. PayeeReference The payeeReference given when creating transactions and payments has some specific processing rules depending on specifications in the contract. It must be unique for every operation, used to ensure exactly-once delivery of a transactional operation from the merchant system. Its length and content validation is dependent on whether the transaction.number or the payeeReference is sent to the acquirer. If you select Option A in the settlement process (Swedbank Pay will handle the settlement), Swedbank Pay will send the transaction.number to the acquirer and the payeeReference may have the format of string(30). If you select Option B in the settlement process (you will handle the settlement yourself), Swedbank Pay will send the payeeReference to the acquirer and it will be limited to the format of string(12) and all characters must be digits. Back: After Payment",
    "tags": "",
    "url": "/payments/mobile-pay/other-features.html"
  },{
    "title": "Swedbank Pay Invoice Payments – Other Features",
    "text": "API requests The API requests are displayed in the invoice flow. The options you can choose from when creating a payment with key operation set to value FinancingConsumer are listed below. Options before posting a payment   Norway FInland Sweden operation FinancingConsumer FinancingConsumer FinancingConsumer currency NOK EUR SEK invoiceType PayExFinancingNO PayExFinancingFI PayExFinancingSE An invoice payment is always two-phased based -  you create an Authorize transaction, that is followed by a Capture or Cancel request. Defining CallbackURL: When implementing a scenario, it is optional to set a CallbackURL in the request. If callbackURL is set PayEx will send a postback request to this URL when the consumer has fulfilled the payment. See the Callback API description here. Authorizations The authorizations resource will list the authorization transactions made on a specific payment. Request GET /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"authorizations\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\", \"authorizationList\": [ { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"consumer\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/consumer\" }, \"legalAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/legaladdress\" }, \"billingAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/billingaddress\" }, \"transaction\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Authorization\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [ { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\", \"rel\": \"create-authorization\", \"contentType\": \"application/json\" }, { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"edit-authorization\", \"method\": \"PATCH\" } ] } } ] } } Create Authorization transaction To create an authorization transaction, perform the create-authorization operation as returned in a previously created invoice payment. Request POST /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"activity\": \"FinancingConsumer\" }, \"consumer\": { \"socialSecurityNumber\": \"socialSecurityNumber\", \"customerNumber\": \"123456\", \"name\": \"Olivia Nyhuus\", \"email\": \"olivia.nyhuus@payex.com\", \"msisdn\": \"+4798765432\", \"ip\": \"127.0.0.1\" }, \"legalAddress\": { \"addressee\": \"Olivia Nyhuus\", \"streetAddress\": \"SaltnesToppen 43\", \"zipCode\": \"1642\", \"city\": \"Saltnes\", \"countryCode\": \"no\" }, \"billingAddress\": { \"addressee\": \"Olivia Nyhuus\", \"coAddress\": \"Bernt Nyhuus\", \"streetAddress\": \"SaltnesToppen 43\", \"zipCode\": \"1642\", \"city\": \"Saltnes\", \"countryCode\": \"no\" } } Required Property Data type Description ✔︎︎︎︎︎ transaction.activity string FinancingConsumer ✔︎︎︎︎︎ consumer object The consumer object. ✔︎︎︎︎︎ └➔ socialSecurityNumber string The social security number (national identity number) of the consumer. Format Sweden: YYMMDD-NNNN. Format Norway: DDMMYYNNNNN. Format Finland: DDMMYYNNNNN   └➔ customerNumber string The customer number in the merchant system.   └➔ email string The e-mail address of the consumer. ✔︎︎︎︎︎ └➔ msisdn string The mobile phone number of the consumer. Format Sweden: +46707777777. Format Norway: +4799999999. Format Finland: +358501234567 ✔︎︎︎︎︎ └➔ ip string The IP address of the consumer. ✔︎︎︎︎︎ legalAddress object The legal address object containing information about the consumers legal addres. ✔︎︎︎︎︎ └➔ addressee string The full (first and last) name of the consumer.   └➔ coAddress string The CO-address (if used)   └➔ streetAddress string The street address of the consumer. ✔︎︎︎︎︎ └➔ zipCode string The postal code (ZIP code) of the consumer. ✔︎︎︎︎︎ └➔ city string The city to the consumer. ✔︎︎︎︎︎ └➔ countryCode string SE, NO, or FI. The country code of the consumer. ✔︎︎︎︎︎ billingAddress object The billing address object containing information about the consumers billing addres. ✔︎︎︎︎︎ └➔ addressee string The full (first and last) name of the consumer.   └➔ coAddress string The CO-address (if used) ✔︎︎︎︎ ︎ └➔ streetAddress string The street address to the consumer. ✔︎︎︎︎︎ └➔ zipCode string The postal number (ZIP code) to the consumer. ✔︎︎︎︎︎ └➔ city string The city to the consumer. ✔︎︎︎︎︎ └➔ countryCode string SE, NO, or FI. info Note: The legal address must be the registered address of the consumer. The authorization resource will be returned, containing information about the newly created authorization transaction. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"authorization\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"consumer\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/consumer\" }, \"legalAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/legaladdress\" }, \"billingAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/billingaddress\" }, \"transaction\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Authorization\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [ { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"edit-authorization\", \"method\": \"PATCH\" } ] } } } Payment Resource Payment Resource The payment resource is central to all payment instruments. All operations that target the payment resource directly produce a response similar to the example seen below. The response given contains all operations that are possible to perform in the current state of the payment. Request GET /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"payeeInfo\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"urls\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"transactions\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/invoice/core/scripts/client/px.invoice.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;operation=authorize\", \"rel\": \"view-authorization\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/invoice/payments/authorize/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"redirect-authorization\", \"contentType\": \"text/html\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"rel\": \"create-capture\", \"contentType\": \"application/json\" } ] } Property Type Description payment object The payment object contains information about the specific payment. └➔ id string The relative URI of the payment. └➔ number integer The payment number , useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. └➔ created string The ISO-8601 date of when the payment was created. └➔ updated string The ISO-8601 date of when the payment was updated. └➔ state string Ready , Pending , Failed or Aborted . Indicates the state of the payment. This field is only for status display purposes. To └➔ prices object The prices resource lists the prices related to a specific payment. └➔ prices.id string The relative URI of the current prices resource. └➔ description string(40) A textual description of maximum 40 characters of the purchase. └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like e-mail address, mobile number, customer number etc. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string nb-NO , sv-SE or en-US └➔ urls string The URI to the urls resource where all URIs related to the payment can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment can be retrieved. operations array The array of possible operations to perform └─➔ method string The HTTP method to use when performing the operation. └─➔ href string The target URI to perform the operation against. └─➔ rel string The name of the relation the operation has to the current resource. Operations The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-payment-abort aborts the payment order before any financial transactions are performed. redirect-authorization Contains the URI that is used to redirect the consumer to the Swedbank Pay Payments containing the card authorization UI. view-authorization Contains the JavaScript href that is used to embed the card authorization UI directly on the webshop/merchant site create-capture Creates a capture transaction in order to charge the reserved funds from the consumer. create-cancellation Creates a cancellation transaction that cancels a created, but not yet captured payment. Payment States And Transaction States Both payments and transactions can be in several different states during the course of a purchase. You can find a short description of each state below. Payments ready means that the payment has been created successfully, and is now ready for further transaction operations, like authorization, sale or abort. failed means that something went wrong during the payment process, and no further transactions can be created if the payment is in this state. Examples of possible failures are triggering of anti-fraud protection or if the payer reaches the maximum number of attempts for a given payment. aborted means that the merchant has aborted the payment before the end user has fulfilled the payment process. This is done by calling the PATCH function for abort operations. pending is the state of a payment when a transaction is in an initialized state. See more below. As long as a payment is pending, no further transactions can be done. Transactions ìntialized is the transaction state when something unexpected occured, and it is impossible to determine the exact status of the transaction. An example of this can be a network failure. No further actions can be done on a payment with a transaction in this state. completed means that the transaction has reached its intended purpose. An authorization will be completed when the funds have been authorized, a capture will be completed when the funds have been captured and a reversal will be completed when the payer has been refunded. failed means that the transaction has failed. The state is final for that specific transaction, but given that the payment is operational, it is possible to perform more transactions on the same payment, i.e. retry the authorization with another card. If the payer reaches the maximum amount of retries, the payment itself will be set to failed. awaitingActivity is in use for a selection of payment instruments. A transaction reaches this state when a payer is sent away from Swedbank Pay to do a confirmation or verification. Examples of this can be payment apps like Swish, Vipps or MobilePay, or 3-D Secure verifications for card payments. Create Payment Within the invoice payments part of the eCommerce API, you can create four kinds of payments (FinancingConsumer, Verify, and Recur), and you can inspect and alter the details of the individual transactions within the payment. To create a invoice payment, you perform an HTTP POST against the payments resource. There are four different kinds of payment that can be created. These are identified with the value of the operation property. Each kind are documented in their own section below. Request POST /psp/invoice/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"&lt;operation&gt;\", \"intent\": \"&lt;intent&gt;\" } } Required Property Type Description ✔︎︎︎︎︎ payment object The payment object. ✔︎︎︎︎︎ └➔ operation string Determines the initial operation, that defines the type invoice payment created. FinancingConsumer. Used to create a new invoice to be sent to the payer. Recur. Used to charge a card on a recurring basis. Is followed up by a capture or cancel operation (if not Autocapture is used, that is). Verify. Used when authorizing a card withouth reserveing any funds. It is followed up by a verification transaction. ✔︎︎︎︎︎ └➔ intent string The intent of the payment identifies how and when the charge will be effectuated. This determine the type transactions used during the payment process. Authorization. Reserves the amount, and is followed by a cancellation or capture of funds. Financing Consumer A FinancingConsumer payment is an invoice. Request POST /psp/invoice/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"FinancingConsumer\", \"intent\": \"&lt;intent&gt;\", \"currency\": \"NOK\", \"prices\": [ { \"type\": \"Invoice\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"payerReference\": \"SomeReference\", \"generateRecurrenceToken\": \"false\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\": { \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"callbackUrl\": \"http://example.com/payment-callback\", \"logoUrl\": \"http://example.com/logo.png\", \"termsOfServiceUrl\": \"http://fexample.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"PR123\", \"payeeName\": \"Merchant1\", \"productCategory\": \"PC1234\", \"subsite\": \"MySubsite\" } }, \"invoice\": { \"invoiceType\": \"PayExFinancingNo\" } } Recur A recur payment is a payment that references a recurrenceToken created through a previous payment in order to charge the same card. Request POST /psp/invoice/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Recur\", \"intent\": \"Authorization\", \"recurrenceToken\": \"7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"currency\": \"NOK\", \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Recurrence\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\": { \"callbackUrl\": \"https://example.com/payment-callback\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" } } } Verify info The Verify operation lets you post verification payments, which are used to confirm validity of card information without reserving or charging any amount. Introduction to Verify This option is commonly used when initiating a subsequent recurring invoice payment flow - where you do not want to charge the consumer right away. Verification through Swedbank Pay Payments When properly set up in your merchant/webshop site and the payer initiates a verification operation, you make a POST request towards Swedbank Pay with your Verify information. This will generate a payment object with a unique paymentID. You either receive a Redirect URL to a hosted page or a JavaScript source in response. You need to redirect the payer’s browser to that specified URL, or embed the script source on your site to create a Seamless View in an iframe; so that she can enter the payment details in a secure Swedbank Pay hosted environment. Swedbank Pay will redirect the payer’s browser to - or display directly in the iframe - one of two specified URLs, depending on whether the payment session is followed through completely or cancelled beforehand. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. When you detect that the payer reach your completeUrl , you need to do a GET request to receive the state of the transaction. Finally you will make a GET request towards Swedbank Pay with the paymentID received in the first step, which will return the payment result and a paymentToken that can be used for subsequent recurring server-to-server based payments. Screenshots You will redirect the consumer/end-user to Swedbank Pay hosted pages to collect the payment information. API Requests The API requests are displayed in the Verification flow. The options you can choose from when creating a payment with key operation set to Value Verify are listed below. Request POST /psp/invoice/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Verify\", \"currency\": \"NOK\", \"description\": \"Test Verification\", \"payerReference\": \"AB1234\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"generatePaymentToken\": true, \"generateRecurrenceToken\": false, \"urls\": { \"hostUrls\": [ \"https://example.com\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"paymentUrl\": \"http://example.com/perform-payment\", \"logoUrl\": \"https://example.com/payment-logo.png\", \"termsOfServiceUrl\": \"https://example.com/payment-terms.html\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" } }, \"invoice\": { \"invoiceType\": \"PayExFinancingNo\" } } Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"operation\": \"Verify\", \"state\": \"Ready\", \"currency\": \"NOK\", \"amount\": 0, \"description\": \"Test Verification\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"nb-NO\", \"transactions\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"verifications\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/verifications\" }, \"urls\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"settings\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" } }, \"operations\": [ { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/approvedlegaladdress\", \"rel\": \"create-approved-legal-address\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\", \"rel\": \"create-authorization\", \"contentType\": \"application/json\" }, { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/invoice/payments/authorize/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-authorization\", \"contentType\": \"text/html\" } ] } Verification flow The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The links will take you directly to the API description for the specific request. The diagram also shows in high level, the sequence of the process of a complete purchase. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay participant IssuingBank activate Payer Payer-&gt;&gt;+Merchant: start verification deactivate Payer Merchant-&gt;&gt;+SwedbankPay: POST /psp/invoice/payments(operation=VERIFY) deactivate Merchant note left of Payer: First API request SwedbankPay--&gt;+Merchant: payment resource deactivate SwedbankPay Merchant--&gt;&gt;+Payer: redirect to verification page deactivate Merchant Payer-&gt;&gt;+SwedbankPay: access verification page deactivate Payer note left of Payer: redirect to SwedbankPay&lt;br&gt;(If Redirect scenario) SwedbankPay--&gt;&gt;+Payer: display purchase information deactivate SwedbankPay Payer-&gt;&gt;Payer: input invoice information Payer-&gt;&gt;+SwedbankPay: submit invoice information deactivate Payer SwedbankPay--&gt;&gt;+Payer: redirect to merchant deactivate SwedbankPay note left of Payer: redirect back to merchant&lt;br&gt;(If Redirect scenario) Payer-&gt;&gt;+Merchant: access merchant page Merchant-&gt;&gt;+SwedbankPay: GET /psp/invoice/payments/&lt;paymentorder.id&gt; deactivate Merchant note left of Merchant: Second API request SwedbankPay--&gt;&gt;+Merchant: rel: redirect-authorization deactivate SwedbankPay Merchant--&gt;&gt;Payer: display purchase result deactivate Merchant opt Callback is set activate SwedbankPay SwedbankPay-&gt;&gt;SwedbankPay: Payment is updated SwedbankPay-&gt;&gt;Merchant: POST Payment Callback deactivate SwedbankPay end Create authorization transaction The redirect-authorization operation redirects the consumer to Swedbank Pay Payments where the payment is authorized. Request POST /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"activity\": \"FinancingConsumer\" }, \"consumer\": { \"socialSecurityNumber\": \"26026708248\", \"customerNumber\": \"123456\", \"email\": \"olivia.nyhuus@payex.com\", \"msisdn\": \"+4798765432\", \"ip\": \"127.0.0.1\" }, \"legalAddress\": { \"addressee\": \"Olivia Nyhuus\", \"streetAddress\": \"SaltnesToppen 43\", \"zipCode\": \"1642\", \"city\": \"Saltnes\", \"countryCode\": \"no\" }, \"billingAddress\": { \"addressee\": \"Olivia Nyhuus\", \"streetAddress\": \"SaltnesToppen 43\", \"zipCode\": \"1642\", \"city\": \"Saltnes\", \"countryCode\": \"no\" } } Required Property Type Description ✔︎︎︎︎︎ transaction object The transaction object.   └➔ activity string Only the value \"FinancingConsumer\" or \"AccountsReceivableConsumer\"   consumer object The consumer object.   └➔ socialSecurityNumber string The social security number of the consumer.   └➔ customerNumber string Customer number of the consumer.   └➔ email string The customer email address.   └➔ msisdn string The MSISDN of the consumer.   └➔ ip string The IP address of the consumer.   legalAddress object The Address object.   └➔ addressee string The full name of the addressee of this invoice   └➔ coAddress string The co Address of the addressee.   └➔ streetAddress string The street address of the addresse.   └➔ zipCode string The zip code of the addresse.   └➔ city string The city name of the addresse.   └➔ countryCode string The country code of the addresse.   billingAddress object The BillingAddress object for the billing address of the addresse.   └➔ addressee string The full name of the billing address adressee.   └➔ coAddress string The co address of the billing address adressee.   └➔ streetAddress string The street address of the billing address adressee.   └➔ zipCode string The zip code of the billing address adressee.   └➔ city string The city name of the billing address adressee.   └➔ countryCode string The country code of the billing address adressee. Response { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"authorization\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"consumer\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/consumer\" }, \"legalAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/legaladdress\" }, \"billingAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/billingaddress\" }, \"transaction\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Authorization\", \"state\": \"Failed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"ExternalResponseError\", \"failedActivityName\": \"Authorize\", \"failedErrorCode\": \"ThirdPartyErrorCode\", \"failedErrorDescription\": \"ThirdPartyErrorMessage\", \"isOperational\": \"TRUE\", \"activities\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177/activities\" }, \"operations\": [ { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"edit-authorization\", \"method\": \"PATCH\" } ] } } } Property Type Description payment string The relative URI of the payment this transaction belongs to. authorization object The transaction object. └➔ id string The relative URI of the current transaction resource. └➔ created string The ISO-8601 date and time of when the transaction was created. └➔ updated string The ISO-8601 date and time of when the transaction was created. └➔ type string Indicates the transaction type. └➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └➔ description string A human readable description of maximum 40 characters of the transaction. └➔ payeeReference string The payeeReference is the receipt/invoice number and is a unique reference for each transaction. └➔ failedReason string The human readable explanation of why the payment failed. └➔ isOperational bool true if the transaction is operational; otherwise false. └➔ operations array The array of operations that are possible to perform on the transaction in its current state. The authorization resource contains information about an authorization transaction made towards a payment, as previously described. Transactions A payment contains sub-resources in the form of transactions. Most operations performed on a payment ends up as a transaction. The different types of operations that alter the state of the payment by creating a transaction is described below. The transactions resource will list the transactions (one or more) on a specific payment. Request GET /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"transactions\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\", \"transactionList\": [{ \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Authorization\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test authorization\", \"payeeReference\": \"PR1004\", \"failedReason\": \"\", \"isOperational\": true, \"operations\": [] }] } } Property Type Description payment string The relative URI of the payment this list of transactions belong to. transactions object The transactions object. └➔ id string The relative URI of the current transactions resource. └➔ transactionList array The array of transaction objects. └➔ transactionList[] object The transaction object (described in the transaction resource below). Transaction The transaction resource contains the generic details of a transaction on a specific payment. When a transaction is created it will have one of three states: Initialized - if there is some error where the source is undeterminable (network failure, etc), the transaction will remain Initialized. The corresponding state of the payment order will in this case be set to pending. No further transactions can be created. Completed - if everything went ok the transaction will follow through to completion. Failed - if the transaction has failed (i.e. a denial from the acquiring bank) it is possible to retry (i.e the consumer tries using another credit card) up to a maximum amount of retries (in that case which the payment order gets the state failed as well). Request GET /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"transaction\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": true, \"operations\": [] } } Property Type Description payment string The relative URI of the payment this transaction belongs to. transaction object The transaction object. └➔ id string The relative URI of the current transaction resource. └➔ created string The ISO-8601 date and time of when the transaction was created. └➔ updated string The ISO-8601 date and time of when the transaction was created. └➔ type string Indicates the transaction type. └➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └➔ description string A human readable description of maximum 40 characters of the transaction. └➔ payeeReference string A unique reference for the transaction. └➔ failedReason string The human readable explanation of why the payment failed. └➔ isOperational bool true if the transaction is operational; otherwise false. └➔ operations array The array of operations that are possible to perform on the transaction in its current state. Callback When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform a callback to inform the payee (merchant) about this update. Setting a callbackUrl in the HTTP POST API is optional, but highly recommended. If a payer closes the browser window, a network error or something else happens that prevents the payer from being redirect from Swedbank Pay back to the merchant website, the callback is what ensures that you receive information about what happened with the payment. When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform an asynchronous server-to-server callback to inform the payee (merchant) about this update. Swedbank Pay will make an HTTP POST to the callbackUrl that was specified when the payee (merchant) created the payment. When the callbackUrl receives such a callback, an HTTP GET request must be made on the payment or on the transaction. The retrieved payment or transaction resource will give you the necessary information about the recent change/update. The callback will be retried if it fails. Below are the retry timings, in seconds from the initial transaction time: 30 seconds 60 seconds 360 seconds 432 seconds 864 seconds 1265 seconds The callback is sent from the following IP address: 82.115.146.1 A callback should return a 200 OK response. Payment Instrument Callback { \"payment\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 222222222 }, \"transaction\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/&lt;transaction type&gt;/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"number\": 333333333 } } Parameter Description &lt;transaction type&gt; authorizations, captures, cancellations, reversals The sequence diagram below shows the HTTP POST you will receive from Swedbank Pay, and the two GET requests that you make to get the updated status. sequenceDiagram Participant Merchant Participant SwedbankPay as Swedbank Pay activate SwedbankPay SwedbankPay-&gt;&gt;+Merchant: POST &lt;callbackUrl&gt; deactivate SwedbankPay note left of Merchant: Callback by Swedbank Pay Merchant--&gt;&gt;+SwedbankPay: HTTP response Merchant-&gt;&gt;+SwedbankPay: GET invoice payment deactivate Merchant note left of Merchant: First API request SwedbankPay--&gt;&gt;+Merchant: payment resource deactivate SwedbankPay Payment Link The implementation sequence for this scenario is a variant of the purchase sequence. The consumer is not redirected to the Payments directly but will instead receive a payment link via mail/SMS. When the consumer clicks on the link, a payment window opens. Introduction The Payment Link can be implemented for payment instruments listed below, using the Redirect platform and Swedbank Pay hosted payment page. Credit card MobilePay Swish Vipps When the consumer/end-user starts the purchase process in your merchant or webshop site, you need to make a POST request towards Swedbank Pay with your Purchase information. You receive a Payment Link (same as redirect URL) in response. You have to distribute the Payment Link to the consumer through your order system, using channels like e-mail or SMS. info When sending information in e-mail/SMS, it is strongly recommended that you add information about your terms and conditions, including purchase information and price. See recommendations in the next section. When the consumer clicks on the Payment Link, the Swedbank Pay payment page will open, letting the consumer enter the payment details (varying depending on payment instrument) in a secure Swedbank Pay hosted environment. When paying with credit card and if required, Swedbank Pay will handle 3-D Secure authentication. After completion, Swedbank Pay will redirect the browser back to your merchant/webshop site. If callbackURL is set the merchant system will receive a callback from Swedbank Pay, enabling you to make a GET request towards Swedbank Pay with the id of the payment received in the first step, which will return the purchase result. E-mail And SMS Recommendations When you as a merchant sends an e-mail or SMS to the consumer about the Payment Link, it is recommended to include contextual information that help the consumer understand what will happen when clicking on the Payment Link. We recommend that you include following information: The name of the merchant/shop that initiates the payment An understandable product description, describing what kind of service the consumer will pay for. Some order-id (or similar) that exists in the merchant order system. The price and currency. Details about shipping method and expected delivery (if physical goods will be sent to the consumer). Directions to (a link to a page) the merchant’s terms and conditions (such as return policy) and information of how the consumer can contact the merchant. Details informing the consumer that he or she accepts the Terms &amp; Conditions when clicking on the Payment Link. Receipt Recommendations We recommend that you send an e-mail or SMS confirmation with a receipt to the consumer when the payment has been fulfilled. API Requests The API requests depend on the payment instrument you are using when implementing the Payment Link scenario, see purchase flow. One-phase payment instruments will not implement capture, cancellation or reversal. The options you can choose from when creating a payment with key operation set to Purchase are listed below. Screenshots When clicking the payment link, the consumer will be directed to a payment page, similar to the examples below, where payment information can be entered. Options All valid options when posting in a payment with operation Purchase, are described in each payment instrument’s respective API reference. Please see the general sequence diagrams for more information about payments in one-phase (e.g. Swish and credit card with autocapture) and two-phase (e.g. Credit card, MobilePay, Vipps). Authorization When using two-phase flows you reserve the amount with an authorization, you will have to specify that the intent of the purchase is Authorize. The amount will be reserved but not charged. You will later (i.e. when you are ready to ship the purchased products) have to make a Capture or Cancel request. Capture Capture can only be performed on a payment with a successfully authorized transaction. It is possible to do a part-capture where you only capture a smaller amount than the authorized amount. You can later do more captures on the same payment up to the total authorization amount. If you want the credit card to be charged right away, you will have to specify that the intent of the purchase is AutoCapture. The credit card will be charged and you don’t need to do any more financial operations to this purchase. Cancel Cancel can only be done on a authorized transaction. If you do cancel after doing a part-capture you will cancel the difference between the captured amount and the authorized amount. Reversal Reversal can only be done on a payment where there are some captured amount not yet reversed. General When implementing the Payment Link scenario, it is optional to set a callbackURL in the POST request. If callbackURL is set Swedbank Pay will send a request to this URL when the consumer as fulfilled the payment. See the Callback API description here. Purchase flow The sequence diagrams display the high level process of the purchase, from generating a Payment Link to receiving a Callback. This in a generalized flow as well as a specific 3-D Secure enabled credit card scenario. info Please note that the the callback may come either before, after or in the same moment as the consumer are being redirected to the status page at the merchant site when the purchase is fulfilled. Don’t rely on the callback being timed at any specific moment. When dealing with credit card payments, 3-D Secure authentication of the cardholder is an essential topic. There are three alternative outcome of a credit card payment: 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. sequenceDiagram activate Consumer Consumer-&gt;&gt;-MerchantOrderSystem: consumer starts purchase activate MerchantOrderSystem MerchantOrderSystem-&gt;&gt;-Merchant: start purchase process activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST [payment] (operation=PURCHASE) activate SwedbankPay note left of Merchant: First API request SwedbankPay--&gt;&gt;-Merchant: payment resource with payment URL activate Merchant Merchant--&gt;&gt;-MerchantOrderSystem: Payment URL sent to order system activate MerchantOrderSystem MerchantOrderSystem--&gt;&gt;-Consumer: Distribute Payment URL through e-mail/SMS activate Consumer note left of Consumer: Payment Link in e-mail/SMS Consumer-&gt;&gt;-SwedbankPay: Open link and enter payment information activate SwedbankPay opt Card supports 3-D Secure SwedbankPay--&gt;&gt;-Consumer: redirect to IssuingBank activate Consumer Consumer-&gt;&gt;IssuingBank: 3-D Secure authentication process Consumer-&gt;&gt;-SwedbankPay: access authentication page activate SwedbankPay end SwedbankPay--&gt;&gt;-Consumer: redirect to merchant site activate Consumer note left of SwedbankPay: redirect back to merchant Consumer-&gt;&gt;-Merchant: access merchant page activate Merchant Merchant-&gt;&gt;-SwedbankPay: GET [payment] activate SwedbankPay note left of Merchant: Second API request SwedbankPay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Consumer: display purchase result Options after posting a payment If the payment enable a two-phase flow (Authorize), you will need to implement the Capture and Cancel requests. It is possible to “abort” the validity of the Payment Link. See the Abort description here. For reversals, you will need to implement the Reversal request. When implementing the Payment Link scenario, it is optional to set a callbackURL in the POST request. If callbackURL is set Swedbank Pay will send a postback request to this URL when the consumer as fulfilled the payment. See the Callback API description here. PayeeInfo The payeeinfo resource contains information about the payee (i.e. a merchant, a corporation etc) related to a specific payment. Request GET /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"payeeInfo\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\", \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"EN1234\", \"payeeName\": \"TestMerchant1\", \"productCategory\": \"EF1234\", \"orderReference\": \"or-123456\" } } Property Type Description payment string The URI of the payment which the payeeinfo belongs to. └➔ id string The URI of the current payeeinfo resource. └➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay └➔ payeeReference string(50) A unique reference set by the merchant system. See below for details └➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay. └➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. You therefore need to ensure that the value given here is valid in the settlement. └➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. PayeeReference The payeeReference given when creating transactions and payments has some specific processing rules depending on specifications in the contract. It must be unique for every operation, used to ensure exactly-once delivery of a transactional operation from the merchant system. Its length and content validation is dependent on whether the transaction.number or the payeeReference is sent to the acquirer. If you select Option A in the settlement process (Swedbank Pay will handle the settlement), Swedbank Pay will send the transaction.number to the acquirer and the payeeReference may have the format of string(30). If you select Option B in the settlement process (you will handle the settlement yourself), Swedbank Pay will send the payeeReference to the acquirer and it will be limited to the format of string(12) and all characters must be digits. Prices The prices resource lists the prices related to a specific payment. Request GET /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"prices\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\", \"priceList\": [ { \"type\": \"VISA\", \"amount\": 2350, \"vatAmount\": 0 }, { \"type\": \"MasterCard\", \"amount\": 2350, \"vatAmount\": 0 } ] } } Property Type Description payment string The relative URI of the payment the prices resource belongs to. prices object The prices resource. └➔ id string The relative URI of the current prices resource. └➔ priceList array The array of price objects. Note: Even if you specifiy CreditCard in the input message the system will return all your configured card brands instead when you expan the priceList. └─➔ type string The type of the price object. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. Prices Object Types Each payment instrument have one or more prices object types. This is most relevant when using card based payments as each type correspond to a card brand or bank respectively. Invoice Payments Type Description Invoice Always Invoice Settlement and Reconciliation Reconciliation is an important step in an economic transaction. When a payment is reconciled, captured amounts for the payment are matched against the corresponding settlement. The information needed to reconcile captured funds - the balance report and transactions list - are available for all merchants using Swedbank Pay. By default you receive these files by e-mail, but it is also possible to get them via FTP access. Contact omni.client@swedbankpay.se for further inquiries regarding this. The settlement frequency is defined in the agreement and you will receive a report for each payout and/or invoice. Settlement There are two main alternatives for settlement - either we handle the settlement process for you, or you handle the process yourself : Swedbank Pay handles the settlement process Swedbank Pay handles the settlement process on your behalf, (called “Redovisningsservice”). Swedbank Pay transfers the net amount to you directly. Swedbank Pay Checkout When choosing Swedbank Pay Checkout we always handle the settlement process for you, gathering all your eCommerce payments in one place. Straighforward and time efficient. You handle the settlement process yourself If you will handle the settlement yourself, then Swedbank Pay will send you an invoice with the relevant fees, in addition to the report and transactions lists. Your acquirer will transfer settled funds to you. Balance Report The Balance Report (a .pdf file) specifies the total sales for a specific period, including fees and VAT. The report contains three parts: a payment summary and specifications for sales and for fees. Payment Summary Provides a summary of the Amount sold, Fees and VAT. If Swedbank Pay handles the settlement process, the Transferedamount - shown in the balance report summary is equivalent to the disbursement on the bank statement (the remaining total amount after fees). Sales specification Provides a specification over sales for the given period. The sales total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each sales row specify Quantity, Sum sales and Amount to pay out, the last one is only eligble if Swedbank Pay handles the Settlement process. Fees specification Provides a specification over fees for the given period. The fees total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each fees row specify Quantity (sales), Amount (sales), Unit price, Provision and fee Amount. If you handle the settlement process yourselves you will receive a separat invoice for fees. Transactions List The Transaction List (provided in .xlsx and .xml formats) specifies all transactions for a specific period, including a summary of transactions grouped by payment instrument. Both formats contain the same information, but the xml file is meant for computer processing while the excel workbook is meant for human interaction. The first row contains the name of the Swedbank Pay company (e.g. Swedbank Pay Solutions AB) that the merchant has the contract with, and the balance report number. The header fields contain a summary of the transactions displayed in the body. Header fields Field Type Description Prefix String The Prefix used for transactions, only eligible if merchant uses prefix. Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). ServiceType String The service type of the service used (e.g. Creditcard). Service String The service used (e.g. Creditcard). NoOfDebet Decimal Total number of debit transactions for the given service. NoOfCredit Decimal Total number of credit transactions for the given service. Amount Decimal Total amount for the given service (e.g 100.00). FromDate ISO 8601 The earlistest transaction date, YYYY-MM-DD. ToDate ISO 8601 The latest transaction date, YYYY-MM-DD. Body fields Field Type Description Swedbank Pay Batch Number Decimal A batch number common to all types of transactions processed by PayEx. Transaction Number Decimal A unique identifier of the transaction, can be traced in Swedbank Pay Admin user interface. Order id String A unique identifier of the order, as sent from the merchant to PayEx. Transactions that are related to the same order are associated with this ID. Date Created ISO 8601 Transaction capture date/time. YYYY-MM-DD hh:mm:ss. Date Modified ISO 8601 Transaction settle date/time. YYYY-MM-DD hh:mm:ss. Provider String The service provider (e.g. Babs, Swedbank). Type String The service type of the related transaction (e.g. Creditcard). Amount Decimal Total amount of the related transaction (e.g 100.00). Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). Product Number String A product number, as sent by merchant to PayEx. Description String A textual description of the transaction, as sent by merchant to PayEx. VAT Amount Decimal VAT Amount for the given transaction (e.g 100.00). VAT Percentage Decimal VAT Percentage for the given transaction. Credit Card Batch Number Decimal The reference number from the credit card processor. Reference Decimal The transaction reference from processor. Swedbank Pay Account Number Decimal The Account number given, shown in Swedbank Pay admin. Referenced Transaction Number Decimal Transaction number for the Authoriation transaction for a two-stage transaction or the number of the debit transaction if it is a credit transaction. Sales Channel String The channel through which the transaction was sent to Swedbank Pay (e.g Transaction via eCommerce APIs). Brand String If eligible, Branding information as sent by merchant to PayEx. Point Of Sale String If eligible, POS information as sent by merchant to PayEx. Reconciliation To do the reconciliation, you need to match the information in your system against the information provided by Swedbank Pay in the balance report and transaction list. Below is a sequence diagram detailing the interaction. sequenceDiagram participant SwedbankPay as Swedbank Pay activate Merchant activate SwedbankPay Merchant--&gt;&gt;SwedbankPay: Online payment transactions deactivate Merchant deactivate SwedbankPay activate Merchant SwedbankPay-&gt;&gt;Merchant: Balance Report (PDF-file) note left of Merchant: files are sent by e-mail or file transfer SwedbankPay-&gt;&gt;Merchant: Transaction list (XLSX-file) SwedbankPay-&gt;&gt;Merchant: Transaction list (XML-file) deactivate Merchant There are two ways for you to match the information from your system with the information given in the reconciliation files from Swedbank Pay: You can use information generated by your system (you will have to set a unique payeeReference when you make the transaction), or You can use the transaction number generated by Swedbank Pay (this is called transaction number and is returned from Swedbank Pay after you have created the transaction). A credit card transaction is made when you either make a capture or a reversal. In the input data for making a capture, you will set the payeeReference. The unique value of this field is the same as the field called OrderID in the reconciliation file. { \"transaction\": { \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Reversal\", \"payeeReference\": \"ABC123\" } } When you receive the response from Swedbank Pay, the response will include transaction.number. This is the same as the field called TransactionNo in the reconciliation file. { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1500, \"vatAmount\": 250, \"description\": \"Test Capture\", \"payeeReference\": \"ABC123\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } payeeReference sent to Swedbank Pay is equal to OrderId in the reconciliation file. capture.transaction.number returned from Swedbank Pay is equal to TransactionNo in reconciliation file. Samples The content of the files depends on the type of agreement you have made with Swedbank Pay. For some payment instruments, only option A is available, while for other payment instruments, only option B is available. The sample files can be downloaded below. Option A: Swedbank Pay handles the settlement process PDF Balance Report for Swedbank Pay Checkout PDF Balance Report XLSX Transaction List XML Transaction List Option B: You will handle the settlement process yourself PDF Balance Report XLSX Transaction List XML Transaction List Split Settlement The prefix split is the easy way of doing settlements for companies with multiple sub merchants. With only a few easy steps, you can make the settlement process more efficient with regards to invoicing, payouts and setup for both your sub merchants and yourself. In short, it is a settlement feature where a company with a website or an app can attach specific prefix numbers to sub merchants selling their goods or services through the company. The prefix number is used to match the transactions and the merchant, so the settlement is automatically split between the sub merchants. If you run a site selling tickets to concerts, theatres, sporting events etc., each venue gets its own prefix number. If you run a funeral home, the sub merchants can be everything from flower delivery to charities. What we need from you as a company Send us a KYC form for each sub merchant you want to include. We will also do a KYC check on your sub merchants, providing extra security for you. Give every sub merchant who sells goods/services at your website or in your app a unique prefix number. This needs to be included in the KYC form you send to us. We recommend using the same customer number they have in your system. Attach the prefix number to all the goods/services the sub merchant sells through your website or app, so the goods/services can be matched to the correct merchant in our back office system. A partner agreement is needed for the automatic deduction of revenue cuts and fees. How it works We set up the sub merchant prefix in our systems. The prefix number is added in the subsite field in the API call when you create the payment for the goods or service. The customer selects payment instrument and completes the payment. The payment goes into the client funds account. Swedbank Pay matches the transaction and the merchant using the prefix number. The settlement is split and connected to the correct merchant. Revenue cuts for the super merchant and fees from Swedbank Pay are deducted automatically. Payout to the sub merchant is done. The upsides Since the sub merchants are connected to Swedbank Pay through the super merchant instead of having separate setups, this means that you: Only need one agreement for credit card, Vipps, Swish, MobilePay, invoice and payment gateway. Only need one acquiring agreement. Only need one Vipps/Swish certificate. Can add more payment instruments easily, as it only has to be done once. Can set up new sub merchants quickly, as the only thing needed is a KYC form and a prefix number. This shortens the setup time for both you and us to a matter of hours. The automatic settlement split and deduction of fees and revenue cuts minimizes the work for your accounting department, as you do not have to invoice your sub merchants. The prefix split is available with all the payment instruments we offer on our eCom platform. Good to know With regards to admin functions, we offer a full integration towards our admin system. This way, you do not have to log in to Swedbank Pay Admin to perform these operations. Captures and cancels Captures and cancels are done by the super merchant the same way as any other normal flow. Reversals In cases where you need to do reversals, this will be performed by the super merchant. The reversal amount will be charged from the sub merchants prefix. If the sub merchants balance is 0 (zero), the super merchant will be invoiced. The super merchant will in turn have to invoice this amount to the sub merchant. Problems When performing unsuccessful operations, the eCommerce API will respond with a problem message. We generally use the problem message type and status code to identify the nature of the problem. The problem name and description will often help narrow down the specifics of the problem. Error types from Swedbank Pay Invoice and third parties All invoice error types will have the following URI in front of type: https://api.payex.com/psp/errordetail/invoice/&lt;error-type&gt; Type Status Description externalerror 500 No error code inputerror 400 10 - ValidationWarning inputerror 400 30 - ValidationError inputerror 400 3010 - ClientRequestInvalid externalerror 502 40 - Error externalerror 502 60 - SystemError externalerror 502 50 - SystemConfigurationError externalerror 502 9999 - ServerOtherServer forbidden 403 Any other error code Back: After Payment",
    "tags": "",
    "url": "/payments/invoice/other-features.html"
  },{
    "title": "Swedbank Pay Card Payments – Other Features",
    "text": "Welcome to Other Features - a subsection of Credit Card. This section has extented code examples and features that were not covered by the other subsections. Payment Resource The payment resource is central to all payment instruments. All operations that target the payment resource directly produce a response similar to the example seen below. The response given contains all operations that are possible to perform in the current state of the payment. Request GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"payeeInfo\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"urls\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"transactions\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/core/scripts/client/px.creditcard.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;operation=authorize\", \"rel\": \"view-authorization\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/payments/authorize/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"redirect-authorization\", \"contentType\": \"text/html\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"rel\": \"create-capture\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/7e6cdfc3-1276-44e9-9992-7cf4419750e1/paid\", \"rel\": \"paid-payment\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/7e6cdfc3-1276-44e9-9992-7cf4419750e1/failed\", \"rel\": \"failed-payment\", \"contentType\": \"application/problem+json\" } ] } Property Type Description payment object The payment object contains information about the specific payment. └➔ id string The relative URI of the payment. └➔ number integer The payment number , useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. └➔ created string The ISO-8601 date of when the payment was created. └➔ updated string The ISO-8601 date of when the payment was updated. └➔ state string Ready , Pending , Failed or Aborted . Indicates the state of the payment. This field is only for status display purposes. To └➔ prices object The prices resource lists the prices related to a specific payment. └➔ prices.id string The relative URI of the current prices resource. └➔ description string(40) A textual description of maximum 40 characters of the purchase. └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like e-mail address, mobile number, customer number etc. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string nb-NO , sv-SE or en-US └➔ urls string The URI to the urls resource where all URIs related to the payment can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment can be retrieved. operations array The array of possible operations to perform └─➔ method string The HTTP method to use when performing the operation. └─➔ href string The target URI to perform the operation against. └─➔ rel string The name of the relation the operation has to the current resource. Operations The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-payment-abort aborts the payment order before any financial transactions are performed. redirect-authorization Contains the URI that is used to redirect the consumer to the Swedbank Pay Payments containing the card authorization UI. view-authorization Contains the JavaScript href that is used to embed the card authorization UI directly on the webshop/merchant site create-capture Creates a capture transaction in order to charge the reserved funds from the consumer. create-cancellation Creates a cancellation transaction that cancels a created, but not yet captured payment. paid-payment Returns the information about a payment that has the status paid. failed-payment Returns the information about a payment that has the status failed. Payment States And Transaction States Both payments and transactions can be in several different states during the course of a purchase. You can find a short description of each state below. Payments ready means that the payment has been created successfully, and is now ready for further transaction operations, like authorization, sale or abort. failed means that something went wrong during the payment process, and no further transactions can be created if the payment is in this state. Examples of possible failures are triggering of anti-fraud protection or if the payer reaches the maximum number of attempts for a given payment. aborted means that the merchant has aborted the payment before the end user has fulfilled the payment process. This is done by calling the PATCH function for abort operations. pending is the state of a payment when a transaction is in an initialized state. See more below. As long as a payment is pending, no further transactions can be done. Transactions ìntialized is the transaction state when something unexpected occured, and it is impossible to determine the exact status of the transaction. An example of this can be a network failure. No further actions can be done on a payment with a transaction in this state. completed means that the transaction has reached its intended purpose. An authorization will be completed when the funds have been authorized, a capture will be completed when the funds have been captured and a reversal will be completed when the payer has been refunded. failed means that the transaction has failed. The state is final for that specific transaction, but given that the payment is operational, it is possible to perform more transactions on the same payment, i.e. retry the authorization with another card. If the payer reaches the maximum amount of retries, the payment itself will be set to failed. awaitingActivity is in use for a selection of payment instruments. A transaction reaches this state when a payer is sent away from Swedbank Pay to do a confirmation or verification. Examples of this can be payment apps like Swish, Vipps or MobilePay, or 3-D Secure verifications for card payments. Create Payment Within the card payments part of the eCommerce API, you can create four kinds of payments (purchase, recurrence, payout and verification) and you can inspect and alter the details of the individual transactions within the payment. To create a card payment, you perform an HTTP POST against the payments resource. There are four different kinds of payment that can be created. These are identified with the value of the operation property. Each kind are documented in their own section below. Request” POST /psp/creditcard/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"&lt;operation&gt;\", \"intent\": \"&lt;intent&gt;\", } } Required Property Type Description ✔︎︎︎︎︎ payment object The payment object. ✔︎︎︎︎︎ └➔ operation string Determines the initial operation, that defines the type card payment created. Purchase. Used to charge a card. It is followed up by a capture or cancel operation. Recur.Used to charge a card on a recurring basis. Is followed up by a capture or cancel operation (if not Autocapture is used, that is). Payout. Used to deposit funds directly to credit card. No more requests are necessary from the merchant side. Verify. Used when authorizing a card withouth reserveing any funds. It is followed up by a verification transaction. ✔︎︎︎︎︎ └➔ intent string The intent of the payment identifies how and when the charge will be effectuated. This determine the type transactions used during the payment process. Authorization. Reserves the amount, and is followed by a cancellation or capture of funds. AutoCapture. A one phase-option that enable capture of funds automatically after authorization. Purchase A Purchase payment is a straightforward way to charge the card of the payer. It is followed up by posting a capture, cancellation or reversal transaction. An example of a request is provided below. Each individual Property of the JSON document is described in the following section. info To minimize the risk for a challenge request (Strong Customer Authentication – “SCA”) on card payments, it’s recommended that you add as much data as possible to the riskIndicator object in the request below. Request POST /psp/creditcard/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"prices\": [{ \"type\": \"CreditCard\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"generatePaymentToken\": false, \"generateRecurrenceToken\": false, \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\": { \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"callbackUrl\": \"http://example.com/payment-callback\", \"logoUrl\": \"http://example.com/payment-logo.png\", \"termsOfServiceUrl\": \"http://example.com/payment-terms.pdf\", }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or123\", }, \"cardholder\": { \"firstName\": \"Olivia\", \"lastName\": \"Nyhuus\", \"email\": \"olivia.nyhuus@payex.com\", \"msisdn\": \"+4798765432\", \"homePhoneNumber\": \"+4787654321\", \"workPhoneNumber\": \"+4776543210\", \"shippingAddress\": { \"firstName\": \"Olivia\", \"lastName\": \"Nyhuus\", \"email\": \"olivia.nyhuus@payex.com\", \"msisdn\": \"+4798765432\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" }, \"billingAddress\": { \"firstName\": \"Olivia\", \"lastName\": \"Nyhuus\", \"email\": \"olivia.nyhuus@payex.com\", \"msisdn\": \"+4798765432\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" }, \"accountInfo\": { \"accountAgeIndicator\": \"01\", \"accountChangeIndicator\": \"01\", \"accountPwdChangeIndicator\": \"01\", \"shippingAddressUsageIndicator\": \"01\", \"shippingNameIndicator\": \"01\", \"suspiciousAccountActivity\": \"01\", \"addressMatchIndicator\": \"false\" } }, \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } }, \"metadata\": { \"key1\": \"value1\", \"key2\": 2, \"key3\": 3.1, \"key4\": false } }, \"creditCard\": { \"rejectCreditCards\": false, \"rejectDebitCards\": false, \"rejectConsumerCards\": false, \"rejectCorporateCards\": false, \"no3DSecure\": false, } } Required Property Type Description   ✔︎︎︎︎︎ payment object The payment object   ✔︎︎︎︎︎ └➔ operation string Determines the initial operation, that defines the type card payment created. Purchase. Used to charge a card. It is followed up by a capture or cancel operation. Recur.Used to charge a card on a recurring basis. Is followed up by a capture or cancel operation (if not Autocapture is used, that is). Payout. Used to deposit funds directly to credit card. No more requests are necessary from the merchant side. Verify. Used when authorizing a card withouth reserveing any funds. It is followed up by a verification transaction.   ✔︎︎︎︎︎ └➔ intent string Authorization. Reserves the amount, and is followed by a cancellation or capture of funds. AutoCapture. A one phase option that enable capture of funds automatically after authorization.     └➔ paymentToken string If you put in a paymentToken here, the payment page will preload the stored payment data related to the paymentToken and let the consumer make a purchase without having to enter all card data. This is called a “One Click” purchase.   ✔︎︎︎︎︎ └➔ currency string NOK, SEK, DKK, USD or EUR.   ✔︎︎︎︎︎ └➔ prices array The prices resource lists the prices related to a specific payment.   ✔︎︎︎︎︎ └─➔ type string Use the generic type CreditCard if you want to enable all card brands supported by merchant contract. Use card brands like Visa (for card type Visa), MasterCard (for card type Mastercard) and others if you want to specify different amount for each card brand. If you want to use more than one amount you must have one instance in the prices node for each card brand. You will not be allowed to both specify card brands and CreditCard at the same time in this field. See the Prices resource and prices object types for more information.   ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest monetary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK.   ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant.   ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.     └➔ payerReference string The reference to the payer (consumer/end user) from the merchant system. E.g mobile number, customer number etc.     └➔ generatePaymentToken boolean true or false. Set this to true if you want to create a paymentToken for future use as One Click.     └➔ generateRecurrenceToken boolean true or false. Set this to true if you want to create a recurrenceToken for future use Recurring purchases (subscription payments).   ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - see user agent definition   ✔︎︎︎︎︎ └➔ language string nb-NO, sv-SE or en-US.   ✔︎ └➔ urls object The object containing URLs relevant for the payment.     └─➔ hostUrls array The array of URLs valid for embedding of Swedbank Pay Hosted Views. If not supplied, view-operation will not be available.   ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further.     └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with paymentUrl; only cancelUrl or paymentUrl can be used, not both.     └─➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment. Only used in Seamless Views. If both cancelUrl and paymentUrl is sent, the paymentUrl will used.     └─➔ callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details.     └─➔ logoUrl string The URL that will be used for showing the customer logo. Must be a picture with maximum 50px height and 400px width. Require https.     └─➔ termsOfServiceUrl string A URL that contains your terms and conditions for the payment, to be linked on the payment page. Require https.   ✔︎︎︎︎︎ └➔ payeeInfo string The payeeInfo object, containing information about the payee.   ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay.   ✔︎︎︎︎︎ └─➔ payeeReference string(50*) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See [payeeReference][payee-reference] for details.     └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.     └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.     └─➔ orderReference String(50) The order reference should reflect the order reference found in the merchant’s systems.     └─➔ subsite String(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used.     └➔ metadata object The keys and values that should be associated with the payment. Can be additional identifiers and data you want to associate with the payment.     └➔ cardholder object Optional. Cardholder object that can hold information about a buyer (private or company). The information added increases the chance for frictionless flow.     └─➔ firstName string Optional (increased chance for frictionless flow if set) If buyer is a company, use only firstName for companyName.     └─➔ lastName string Optional (increased chance for frictionless flow if set) If buyer is a company, use only firstName for companyName.     └─➔ email string Optional (increased chance for frictionless flow if set)     └─➔ msisdn string Optional (increased chance for frictionless flow if set)     └─➔ homePhoneNumber string Optional (increased chance for frictionless flow if set)     └─➔ workPhoneNumber string Optional (increased chance for frictionless flow if set)     └─➔ shippingAddress object   Optional (increased chance for frictionless flow if set)   └──➔ firstName string Optional (increased chance for frictionless flow if set)     └──➔ lastName string Optional (increased chance for frictionless flow if set)     └──➔ email string Optional (increased chance for frictionless flow if set)     └──➔ msisdn string Optional (increased chance for frictionless flow if set)     └──➔ streetAddress string Optional (increased chance for frictionless flow if set)     └──➔ coAddress string Optional (increased chance for frictionless flow if set)     └──➔ city string Optional (increased chance for frictionless flow if set)     └──➔ zipCode string Optional (increased chance for frictionless flow if set)     └──➔ countryCode string Optional (increased chance for frictionless flow if set)     └─➔ billingAddress object Optional (increased chance for frictionless flow if set)     └──➔ firstName string Optional (increased chance for frictionless flow if set) If buyer is a company, use only firstName for companyName.     └──➔ lastName string Optional (increased chance for frictionless flow if set) If buyer is a company, use only firstName for companyName.     └──➔ email string Optional (increased chance for frictionless flow if set)     └──➔ msisdn string Optional (increased chance for frictionless flow if set)     └──➔ streetAddress string Optional (increased chance for frictionless flow if set)     └──➔ coAddress string Optional (increased chance for frictionless flow if set)     └──➔ city string Optional (increased chance for frictionless flow if set)     └──➔ zipCode string Optional (increased chance for frictionless flow if set)     └──➔ countryCode string Optional (increased chance for frictionless flow if set)     └─➔ accountInfo object Optional (increased chance for frictionless flow if set). If cardholder is known by merchant and have some kind of registered user then these fields can be set.     └──➔ accountAgeIndicator string Optional (increased chance for frictionless flow if set). Indicates the length of time that the payments account was enrolled in the cardholder’s account with merchant.01 (No account, guest)02 (Created during transaction)03 (Less than 30 days)04 (30-60 days)05 (More than 60 days)     └──➔ accountChangeIndicator string Optional (increased chance for frictionless flow if set). Length of time since the cardholder’s account information with the merchant was changed. Including billing etc.01 (Changed during transaction)02 (Less than 30 days)03 (30-60 days)04 (More than 60 days)     └──➔ accountPwdChangeIndicator string Optional (increased chance for frictionless flow if set). Indicates the length of time since the cardholder’s account with the merchant had a password change or account reset.01 (No change)02 (Changed during transaction)03 (Less than 30 days)04 (30-60 days)05 (More than 60 days)     └──➔ shippingAddressUsageIndicator string Optional (increased chance for frictionless flow if set). Indicates when the shipping address used for this transaction was first used with the merchant.01 (This transaction)02 (Less than 30 days)03 (30-60 days)04 (More than 60 days)     └──➔ shippingNameIndicator string Optional (increased chance for frictionless flow if set). Indicates if the Cardholder Name on the account is identical to the shipping Name used for this transaction.01 (Account name identical to shipping name)02 (Account name different than shipping name)     └──➔ suspiciousAccountActivity string Optional (increased chance for frictionless flow if set). Indicates whether merchant has experienced suspicious activity (including previous fraud) on the cardholder account.01 (No suspicious activity has been observed)02 (Suspicious activity has been observed)     └──➔ addressMatchIndicator boolean Optional (increased chance for frictionless flow if set) Allows the 3-D Secure Requestor to indicate to the ACS whether the cardholder’s billing and shipping address are the same.     └➔ riskIndicator array This optional array consist of information that helps verifying the payer. Providing these fields decreases the likelyhood of having to promt for 3-D Secure authenticaiton of the payer when they are authenticating the purchacse.     └─➔ deliveryEmailAddress string Optional (increased chance for frictionless flow if set). For electronic delivery, the email address to which the merchandise was delivered.     └─➔ deliveryTimeFrameIndicator string Optional (increased chance for frictionless flow if set). Indicates the merchandise delivery timeframe.01 (Electronic Delivery)02 (Same day shipping)03 (Overnight shipping)04 (Two-day or more shipping)     └─➔ preOrderDate string Optional (increased chance for frictionless flow if set). For a pre-ordered purchase. The expected date that the merchandise will be available.FORMAT: “YYYYMMDD”     └─➔ preOrderPurchaseIndicator string Optional (increased chance for frictionless flow if set). Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.01 (Merchandise available)02 (Future availability)     └─➔ shipIndicator string Optional (increased chance for frictionless flow if set). Indicates shipping method chosen for the transaction. 01 (Ship to cardholder’s billing address)02 (Ship to another verified address on file with merchant)03 (Ship to address that is different than cardholder’s billing address)04 (Ship to Store / Pick-up at local store. Store address shall be populated in shipping address fields)05 (Digital goods, includes online services, electronic giftcards and redemption codes)06 (Travel and Event tickets, not shipped)07 (Other, e.g. gaming, digital service)     └─➔ giftCardPurchase boolean Optional (increased chance for frictionless flow if set). true if this is a purchase of a gift card.     └─➔ reOrderPurchaseIndicator string Optional (increased chance for frictionless flow if set). Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.01 (Merchandise available)02 (Future availability)     └➔ pickUpAddress object If shipIndicator set to 4, then prefil this.     └─➔ name string If shipIndicator set to 4, then prefil this.     └─➔ streetAddress string If shipIndicator set to 4, then prefil this.     └─➔ coAddress string If shipIndicator set to 4, then prefil this.     └─➔ city string If shipIndicator set to 4, then prefil this.     └─➔ zipCode string If shipIndicator set to 4, then prefil this.     └─➔ countryCode string If shipIndicator set to 4, then prefil this.     creditCard object The credit card object.     └➔ rejectDebitCards boolean true if debit cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.     └➔ rejectCreditCards boolean true if credit cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.     └➔ rejectConsumerCards boolean true if consumer cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.     └➔ rejectCorporateCards boolean true if corporate cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.     └➔ no3DSecure boolean true if 3-D Secure should be disabled for this payment in the case a stored card is used; otherwise false per default. To use this feature it has to be enabled on the contract with Swedbank Pay.     └➔ noCvc boolean true if the CVC field should be disabled for this payment in the case a stored card is used; otherwise false per default. This feature is commonly used when One-Click Payments is enabled. To use this feature it has to be enabled on the contract with Swedbank Pay.   Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"instrument\": \"CreditCard\", \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"transactions\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" }, \"urls\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"settings\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" } }, \"operations\": [ { \"rel\": \"update-payment-abort\", \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"rel\": \"redirect-authorization\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/payments/authorize/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"method\": \"GET\", \"contentType\": \"text/html\" }, { \"rel\": \"view-authorization\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/core/scripts/client/px.creditcard.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } Recur A recur payment is a payment that references a recurrenceToken created through a previous payment in order to charge the same card. Request POST /psp/creditcard/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Recur\", \"intent\": \"Authorization|AutoCapture\", \"recurrenceToken\": \"7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"currency\": \"NOK\", \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Recurrence\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\": { \"callbackUrl\": \"https://example.com/payment-callback\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" } } } Unscheduled Purchase warning This feature is only available for merchants who have a specific agreement with Swedbank Pay. An unscheduled purchase, also called a Merchant Initiated Transaction (MIT), is a payment which uses a paymentToken generated through a previous payment in order to charge the same card at a later time. They are done by the merchant without the cardholder being present. unscheduled purchases differ from recur as they are not meant to be recurring, but occur as singular transactions. Examples of this can be car rental companies charging the payer’s card for toll road expenses after the rental period. Request POST /psp/creditcard/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"UnscheduledPurchase\", \"intent\": \"Authorization\", \"paymentToken\": \"7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"currency\": \"NOK\", \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Unscheduled\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\": { \"callbackUrl\": \"https://example.com/payment-callback\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" } } } Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/5adc265f-f87f-4313-577e-08d3dca1a26c\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"PurchaseDirect\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Unscheduled\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"paymentToken\": \"7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"prices\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"transactions\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" }, \"urls\" : { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\" : { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" } } } Payout “Payout to Card” is an add-on service that enable you to deposit winnings directly to your end-users’ credit cards. This without  the need to collect card details from the end-user a second time. Introduction Acquirer for this service is Swedbank. You require a separate Swedbank acquiring number to ensure that payout transactions and regular card transactions are kept separate. You need to have the 3-D Secure protocol enabled. The service is available through a Swedbank Pay hosted payment page. The current implementation is only available for gaming transactions ( MCC: 7995). The payout service is not a part of Swedbank Pay Settlement Service. API requests The API requests are displayed in the payout flow.  You create a payout by performing a POST creditcard payments with key operation set to payout. Request POST /psp/creditcard/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Payout\", \"intent\": \"AutoCapture\", \"paymentToken\": \"7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"currency\": \"NOK\", \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Payout\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"nb-NO\", \"urls\": { \"callbackUrl\": \"https://example.com/payment-callback\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" } } } Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Payout\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Recurrence\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"paymentToken\": \"7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"prices\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"transactions\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" }, \"urls\" : { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\" : { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"settings\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" } } } Payout flow You must set Operation to Payout in the initial POST request. sequenceDiagram activate Consumer Consumer-&gt;&gt;-Merchant: Start payout activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST [Credit Card Payout] activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: Payment resource activate Merchant Merchant--&gt;&gt;-Consumer: Display Payout result Verify The Verify operation lets you post verification payments, which are used to confirm validity of card information without reserving or charging any amount. Introduction to Verify This option is commonly used when initiating a subsequent One-click card payment or a recurring card payment flow - where you do not want to charge the consumer right away. info Please note that all boolean credit card attributes involving rejection of certain card types are optional and requires enabling on the contract with Swedbank Pay. Verification through Swedbank Pay Payments When properly set up in your merchant/webshop site and the payer initiates a verification operation, you make a POST request towards Swedbank Pay with your Verify information. This will generate a payment object with a unique paymentID. You either receive a Redirect URL to a hosted page or a JavaScript source in response. You need to redirect the payer’s browser to that specified URL, or embed the script source on your site to create a Hosted View in an iframe; so that she can enter the credit card details in a secure Swedbank Pay hosted environment. Swedbank Pay will handle 3-D Secure authentication when this is required. Swedbank Pay will redirect the payer’s browser to - or display directly in the iframe - one of two specified URLs, depending on whether the payment session is followed through completely or cancelled beforehand. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. When you detect that the payer reach your completeUrl , you need to do a GET request to receive the state of the transaction. Finally you will make a GET request towards Swedbank Pay with the paymentID received in the first step, which will return the payment result and a paymentToken that can be used for subsequent One-Click Payments and recurring server-to-server based payments. Screenshots You will redirect the consumer/end-user to Swedbank Pay hosted pages to collect the credit card information. API Requests The API requests are displayed in the [Verification flow]. The options you can choose from when creating a payment with key operation set to Value Verify are listed below. Please note that not including paymentUrl in the request will generate a redirect-verification operation in the response, meant to be used in the Redirect flow. Adding paymentUrl input will generate the response meant for Seamless View, which does not include the redirect-verification. The request below is the Redirect option. Request POST /psp/creditcard/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Verify\", \"currency\": \"NOK\", \"description\": \"Test Verification\", \"payerReference\": \"AB1234\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"generatePaymentToken\": true, \"generateRecurrenceToken\": false, \"urls\": { \"hostUrls\": [\"https://example.com\", \"https://example.net\"], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"logoUrl\": \"https://example.com/payment-logo.png\", \"termsOfServiceUrl\": \"https://example.com/payment-terms.html\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" } }, \"creditCard\": { \"rejectCreditCards\": false, \"rejectDebitCards\": false, \"rejectConsumerCards\": false, \"rejectCorporateCards\": false } } Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"operation\": \"Verify\", \"state\": \"Ready\", \"currency\": \"NOK\", \"amount\": 0, \"description\": \"Test Verification\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"nb-NO\", \"transactions\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"verifications\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/verifications\" }, \"urls\" : { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\" : { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"settings\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" } }, \"operations\": [ { \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"href\": \"https://ecom.externalintegration.payex.com/creditcard/payments/verification/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-verification\", \"method\": \"GET\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/core/scripts/client/px.creditcard.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"view-verification\", \"contentType\": \"application/javascript\" }, { \"method\": \"POST\", \"href\": \"https://ecom.externalintegration.payex.com/psp/creditcard/confined/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/verifications\", \"rel\": \"direct-verification\", \"contentType\": \"application/json\" } ] } Verification flow The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The links will take you directly to the API description for the specific request. The diagram also shows in high level, the sequence of the process of a complete purchase. When dealing with credit card payments, 3-D Secure authentication of the cardholder is an essential topic. There are three alternative outcome of a credit card payment: 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay participant IssuingBank activate Payer Payer-&gt;&gt;+Merchant: start verification deactivate Payer Merchant-&gt;&gt;+SwedbankPay: POST /psp/creditcard/payments(operation=VERIFY) deactivate Merchant note left of Payer: First API request SwedbankPay--&gt;+Merchant: payment resource deactivate SwedbankPay Merchant--&gt;&gt;+Payer: redirect to verification page deactivate Merchant Payer-&gt;&gt;+SwedbankPay: access verification page deactivate Payer note left of Payer: redirect to SwedbankPay&lt;br&gt;(If Redirect scenario) SwedbankPay--&gt;&gt;+Payer: display purchase information deactivate SwedbankPay Payer-&gt;&gt;Payer: input creditcard information Payer-&gt;&gt;+SwedbankPay: submit creditcard information deactivate Payer opt Card supports 3-D Secure SwedbankPay--&gt;&gt;Payer: redirect to IssuingBank deactivate SwedbankPay Payer-&gt;&gt;IssuingBank: 3-D Secure authentication process Payer-&gt;&gt;+SwedbankPay: access authentication page deactivate Payer end SwedbankPay--&gt;&gt;+Payer: redirect to merchant deactivate SwedbankPay note left of Payer: redirect back to merchant&lt;br&gt;(If Redirect scenario) Payer-&gt;&gt;+Merchant: access merchant page Merchant-&gt;&gt;+SwedbankPay: GET &lt;payment.id&gt; deactivate Merchant note left of Merchant: Second API request SwedbankPay--&gt;&gt;+Merchant: rel: redirect-authorization deactivate SwedbankPay Merchant--&gt;&gt;Payer: display purchase result deactivate Merchant opt Callback is set activate SwedbankPay SwedbankPay-&gt;&gt;SwedbankPay: Payment is updated SwedbankPay-&gt;&gt;Merchant: POST Payment Callback deactivate SwedbankPay end One-Click Payments One-Click Payments utilize a previously generated payment token to prefill payment details for credit card or invoice payments pages - which means that the payer don’t need to enter these details for every purchase. Introduction For credit card and financing invoice payments the payment flow and implementation varies from your default only being the use of a paymentToken. The details in this section describe explicitly the parameters that must be set to enable one-click purchases. Payment Url For our Seamless Views, the property called paymentUrl will be used when the consumer is redirected out of the Seamless View (the iframe). The consumer is redirected out of frame when at the 3-D Secure verification for credit card payments. The URL should represent the page of where the Payment Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the Seamless View was added to in order to initiate the payment process. info Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment as the one that initiated the payment process originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer. API Requests To Generate paymentToken When making the initial purchase request, you need to generate a paymentToken. You can do this either by by setting the generatePaymentToken property to true (see example below) when doing a card purchase, or set the initial operation to Verify. generatePaymentToken property { \"generatePaymentToken\": true } Finding paymentToken value When the initial purchase is followed through, a paymentToken will linked to the payment. You can return the value by making a GET request towards payment resource (expanding either the authorizations or verifications sub-resource), after the consumer successfully has completed the purchase. The two examples are provided below. Request Towards Authorizations Resource GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Request Towards Verifications Resource GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/verifications HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; You need to store the paymentToken from the response in your system and keep track of the corresponding consumer-ID in your system. Returning Purchases When a known consumer (where you have attained a consumer-ID or similar) returns to your system, you can use the payment token, using already stored payment data, to initiate one-click payments. You will need to make a standard purchase, following the sequence as specified in the Redirect or Seamless View scenarios for credit card and financing invoice. When making the first POST request you insert the paymentToken property. This must be the paymentToken you received in the initial purchase, where you specified the generatePaymentToken to true. See the Other Feature sections for how to create a card and invoice payment. Abbreviated code example: Request POST /psp/creditcard/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"paymentToken\": \"afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\" }, \"creditCard\": { \"noCVC\": true } } Required Property Type Description ✔︎︎︎︎︎ payment object The payment object. ✔︎︎︎︎︎ └➔ operation string Determines the initial operation, that defines the type card payment created. Purchase. Used to charge a card. It is followed up by a capture or cancel operation. Recur.Used to charge a card on a recurring basis. Is followed up by a capture or cancel operation (if not Autocapture is used, that is). Payout. Used to deposit funds directly to credit card. No more requests are necessary from the merchant side. Verify. Used when authorizing a card withouth reserveing any funds. It is followed up by a verification transaction. ✔︎︎︎︎︎ └➔ intent string The intent of the payment identifies how and when the charge will be effectuated. This determine the type transactions used during the payment process. Authorization. Reserves the amount, and is followed by a cancellation or capture of funds. AutoCapture. A one phase-option that enable capture of funds automatically after authorization. ✔︎︎︎︎︎ └➔ paymentToken string The paymentToken value received in GET response towards the Payment Resource is the same paymentToken generated in the initial purchase request. The token allow you to use already stored card data to initiate one-click payments.   └➔ creditCard object An object that holds different scenarios for card payments.   └─➔ noCvc boolean true if the CVC field should be disabled for this payment in the case a stored card is used; otherwise false per default. To use this feature it has to be enabled on the contract with Swedbank Pay. info When redirecting to Swedbank Pay the payment page will be prefilled with the payer’s card details. See example below. Delete payment token If you, for any reason, need to delete a paymentToken you use the Delete payment token request. warning Please note that this call does not erase the card number stored at Swedbank Pay. A card number is automatically deleted six months after a successful Deletepayment token request. If you want card information removed at an earlier date, you need to contact ehandelsetup@swedbankpay.dk, verkkokauppa.setup@swedbankpay.fi, ehandelsetup@swedbankpay.no or ehandelsetup@swedbankpay.se; and supply them with the relevant transaction reference or payment token. Request PATCH /psp/creditcard/payments/instrumentData/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"state\": \"Deleted\", \"tokenType\": \"PaymentToken\", \"comment\": \"Comment on why the deletion is happening\" } Response HTTP/1.1 200 OK Content-Type: application/json { \"instrumentData\": { \"id\": \"/psp/creditcard/payments/instrumentdata/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"paymentToken\": \"afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"isDeleted\": true, \"isPayeeToken\": false, \"cardBrand\": \"Visa\", \"maskedPan\": \"123456xxxxxx1111\", \"expiryDate\": \"MM/YYYY\" } } Callback When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform a callback to inform the payee (merchant) about this update. Setting a callbackUrl in the HTTP POST API is optional, but highly recommended. If a payer closes the browser window, a network error or something else happens that prevents the payer from being redirect from Swedbank Pay back to the merchant website, the callback is what ensures that you receive information about what happened with the payment. When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform an asynchronous server-to-server callback to inform the payee (merchant) about this update. Swedbank Pay will make an HTTP POST to the callbackUrl that was specified when the payee (merchant) created the payment. When the callbackUrl receives such a callback, an HTTP GET request must be made on the payment or on the transaction. The retrieved payment or transaction resource will give you the necessary information about the recent change/update. The callback will be retried if it fails. Below are the retry timings, in seconds from the initial transaction time: 30 seconds 60 seconds 360 seconds 432 seconds 864 seconds 1265 seconds The callback is sent from the following IP address: 82.115.146.1 A callback should return a 200 OK response. Payment Instrument Callback { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 222222222 }, \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/&lt;transaction type&gt;/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"number\": 333333333 } } Parameter Description &lt;transaction type&gt; authorizations, captures, cancellations, reversals The sequence diagram below shows the HTTP POST you will receive from Swedbank Pay, and the two GET requests that you make to get the updated status. sequenceDiagram Participant Merchant Participant SwedbankPay as Swedbank Pay activate SwedbankPay SwedbankPay-&gt;&gt;+Merchant: POST &lt;callbackUrl&gt; deactivate SwedbankPay note left of Merchant: Callback by Swedbank Pay Merchant--&gt;&gt;+SwedbankPay: HTTP response Merchant-&gt;&gt;+SwedbankPay: GET creditcard payment deactivate Merchant note left of Merchant: First API request SwedbankPay--&gt;&gt;+Merchant: payment resource deactivate SwedbankPay Payment Link The implementation sequence for this scenario is a variant of the purchase sequence. The consumer is not redirected to the Payments directly but will instead receive a payment link via mail/SMS. When the consumer clicks on the link, a payment window opens. Introduction The Payment Link can be implemented for payment instruments listed below, using the Redirect platform and Swedbank Pay hosted payment page. Credit card MobilePay Swish Vipps When the consumer/end-user starts the purchase process in your merchant or webshop site, you need to make a POST request towards Swedbank Pay with your Purchase information. You receive a Payment Link (same as redirect URL) in response. You have to distribute the Payment Link to the consumer through your order system, using channels like e-mail or SMS. info When sending information in e-mail/SMS, it is strongly recommended that you add information about your terms and conditions, including purchase information and price. See recommendations in the next section. When the consumer clicks on the Payment Link, the Swedbank Pay payment page will open, letting the consumer enter the payment details (varying depending on payment instrument) in a secure Swedbank Pay hosted environment. When paying with credit card and if required, Swedbank Pay will handle 3-D Secure authentication. After completion, Swedbank Pay will redirect the browser back to your merchant/webshop site. If callbackURL is set the merchant system will receive a callback from Swedbank Pay, enabling you to make a GET request towards Swedbank Pay with the id of the payment received in the first step, which will return the purchase result. E-mail And SMS Recommendations When you as a merchant sends an e-mail or SMS to the consumer about the Payment Link, it is recommended to include contextual information that help the consumer understand what will happen when clicking on the Payment Link. We recommend that you include following information: The name of the merchant/shop that initiates the payment An understandable product description, describing what kind of service the consumer will pay for. Some order-id (or similar) that exists in the merchant order system. The price and currency. Details about shipping method and expected delivery (if physical goods will be sent to the consumer). Directions to (a link to a page) the merchant’s terms and conditions (such as return policy) and information of how the consumer can contact the merchant. Details informing the consumer that he or she accepts the Terms &amp; Conditions when clicking on the Payment Link. Receipt Recommendations We recommend that you send an e-mail or SMS confirmation with a receipt to the consumer when the payment has been fulfilled. API Requests The API requests depend on the payment instrument you are using when implementing the Payment Link scenario, see purchase flow. One-phase payment instruments will not implement capture, cancellation or reversal. The options you can choose from when creating a payment with key operation set to Purchase are listed below. Screenshots When clicking the payment link, the consumer will be directed to a payment page, similar to the examples below, where payment information can be entered. Options All valid options when posting in a payment with operation Purchase, are described in each payment instrument’s respective API reference. Please see the general sequence diagrams for more information about payments in one-phase (e.g. Swish and credit card with autocapture) and two-phase (e.g. Credit card, MobilePay, Vipps). Authorization When using two-phase flows you reserve the amount with an authorization, you will have to specify that the intent of the purchase is Authorize. The amount will be reserved but not charged. You will later (i.e. when you are ready to ship the purchased products) have to make a Capture or Cancel request. Capture Capture can only be performed on a payment with a successfully authorized transaction. It is possible to do a part-capture where you only capture a smaller amount than the authorized amount. You can later do more captures on the same payment up to the total authorization amount. If you want the credit card to be charged right away, you will have to specify that the intent of the purchase is AutoCapture. The credit card will be charged and you don’t need to do any more financial operations to this purchase. Cancel Cancel can only be done on a authorized transaction. If you do cancel after doing a part-capture you will cancel the difference between the captured amount and the authorized amount. Reversal Reversal can only be done on a payment where there are some captured amount not yet reversed. General When implementing the Payment Link scenario, it is optional to set a callbackURL in the POST request. If callbackURL is set Swedbank Pay will send a request to this URL when the consumer as fulfilled the payment. See the Callback API description here. Purchase flow The sequence diagrams display the high level process of the purchase, from generating a Payment Link to receiving a Callback. This in a generalized flow as well as a specific 3-D Secure enabled credit card scenario. info Please note that the the callback may come either before, after or in the same moment as the consumer are being redirected to the status page at the merchant site when the purchase is fulfilled. Don’t rely on the callback being timed at any specific moment. When dealing with credit card payments, 3-D Secure authentication of the cardholder is an essential topic. There are three alternative outcome of a credit card payment: 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. sequenceDiagram activate Consumer Consumer-&gt;&gt;-MerchantOrderSystem: consumer starts purchase activate MerchantOrderSystem MerchantOrderSystem-&gt;&gt;-Merchant: start purchase process activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST [payment] (operation=PURCHASE) activate SwedbankPay note left of Merchant: First API request SwedbankPay--&gt;&gt;-Merchant: payment resource with payment URL activate Merchant Merchant--&gt;&gt;-MerchantOrderSystem: Payment URL sent to order system activate MerchantOrderSystem MerchantOrderSystem--&gt;&gt;-Consumer: Distribute Payment URL through e-mail/SMS activate Consumer note left of Consumer: Payment Link in e-mail/SMS Consumer-&gt;&gt;-SwedbankPay: Open link and enter payment information activate SwedbankPay opt Card supports 3-D Secure SwedbankPay--&gt;&gt;-Consumer: redirect to IssuingBank activate Consumer Consumer-&gt;&gt;IssuingBank: 3-D Secure authentication process Consumer-&gt;&gt;-SwedbankPay: access authentication page activate SwedbankPay end SwedbankPay--&gt;&gt;-Consumer: redirect to merchant site activate Consumer note left of SwedbankPay: redirect back to merchant Consumer-&gt;&gt;-Merchant: access merchant page activate Merchant Merchant-&gt;&gt;-SwedbankPay: GET [payment] activate SwedbankPay note left of Merchant: Second API request SwedbankPay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Consumer: display purchase result Options after posting a payment If the payment enable a two-phase flow (Authorize), you will need to implement the Capture and Cancel requests. It is possible to “abort” the validity of the Payment Link. See the Abort description here. For reversals, you will need to implement the Reversal request. When implementing the Payment Link scenario, it is optional to set a callbackURL in the POST request. If callbackURL is set Swedbank Pay will send a postback request to this URL when the consumer as fulfilled the payment. See the Callback API description here. Create authorization transaction The direct-authorization operation creates an authorization transaction directly whilst the redirect-authorization operation redirects the consumer to a Swedbank Pay hosted payment page, where the payment is authorized by the consumer. warning PCI-DSS Complicance In order to use the direct-authorization operation, you need to collect card data on your website, which means it must be PCI-DSS Compliant. Request POST /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"prices\": [ { \"type\": \"CreditCard\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"nb-NO\", \"urls\": { \"hostUrls\": [ \"http://example.com\", \"http://example.net\" ], \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"callbackUrl\": \"http://example.com/payment-callback\", \"logoUrl\": \"http://example.com/payment-logo.png\", \"termsOfServiceUrl\": \"http://example.com/payment-terms.pdf\", }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant\", \"productCategory\": \"A123\" } } Required Property Type Description ✔︎︎︎︎︎ transaction object The transaction object. ✔︎︎︎︎︎ └➔ cardNumber string Primary Account Number (PAN) of the card, printed on the face of the card. ✔︎︎︎︎︎ └➔ cardExpiryMonth integer Expiry month of the card, printed on the face of the card. ✔︎︎︎︎︎ └➔ cardExpiryYear integer Expiry year of the card, printed on the face of the card.   └➔ cardVerificationCode string Card verification code (CVC/CVV/CVC2), usually printed on the back of the card.   └➔ cardholderName string Name of the card holder, usually printed on the face of the card. Response The authorization resource contains information about an authorization transaction made towards a payment, as previously described. PayeeInfo The payeeinfo resource contains information about the payee (i.e. a merchant, a corporation etc) related to a specific payment. Request GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"payeeInfo\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\", \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"EN1234\", \"payeeName\": \"TestMerchant1\", \"productCategory\": \"EF1234\", \"orderReference\": \"or-123456\" } } Property Type Description payment string The URI of the payment which the payeeinfo belongs to. └➔ id string The URI of the current payeeinfo resource. └➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay └➔ payeeReference string(50) A unique reference set by the merchant system. See below for details └➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay. └➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. You therefore need to ensure that the value given here is valid in the settlement. └➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. PayeeReference The payeeReference given when creating transactions and payments has some specific processing rules depending on specifications in the contract. It must be unique for every operation, used to ensure exactly-once delivery of a transactional operation from the merchant system. Its length and content validation is dependent on whether the transaction.number or the payeeReference is sent to the acquirer. If you select Option A in the settlement process (Swedbank Pay will handle the settlement), Swedbank Pay will send the transaction.number to the acquirer and the payeeReference may have the format of string(30). If you select Option B in the settlement process (you will handle the settlement yourself), Swedbank Pay will send the payeeReference to the acquirer and it will be limited to the format of string(12) and all characters must be digits. Prices The prices resource lists the prices related to a specific payment. Request GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"prices\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\", \"priceList\": [ { \"type\": \"VISA\", \"amount\": 2350, \"vatAmount\": 0 }, { \"type\": \"MasterCard\", \"amount\": 2350, \"vatAmount\": 0 } ] } } Property Type Description payment string The relative URI of the payment the prices resource belongs to. prices object The prices resource. └➔ id string The relative URI of the current prices resource. └➔ priceList array The array of price objects. Note: Even if you specifiy CreditCard in the input message the system will return all your configured card brands instead when you expan the priceList. └─➔ type string The type of the price object. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. Prices Object Types Each payment instrument have one or more prices object types. This is most relevant when using card based payments as each type correspond to a card brand or bank respectively. Card Payments The generic type CreditCard enables all card brands, supported by merchant contract. Type Description Visa Visa MasterCard MasterCard Amex American Express Dankort Dankort can only be used with DKK currency Diners Diners Club Finax Finax Jcb JCB IkanoFinansDK Ikano Finans Denmark Maestro MasterCard Maestro Settlement and Reconciliation Reconciliation is an important step in an economic transaction. When a payment is reconciled, captured amounts for the payment are matched against the corresponding settlement. The information needed to reconcile captured funds - the balance report and transactions list - are available for all merchants using Swedbank Pay. By default you receive these files by e-mail, but it is also possible to get them via FTP access. Contact omni.client@swedbankpay.se for further inquiries regarding this. The settlement frequency is defined in the agreement and you will receive a report for each payout and/or invoice. Settlement There are two main alternatives for settlement - either we handle the settlement process for you, or you handle the process yourself : Swedbank Pay handles the settlement process Swedbank Pay handles the settlement process on your behalf, (called “Redovisningsservice”). Swedbank Pay transfers the net amount to you directly. Swedbank Pay Checkout When choosing Swedbank Pay Checkout we always handle the settlement process for you, gathering all your eCommerce payments in one place. Straighforward and time efficient. You handle the settlement process yourself If you will handle the settlement yourself, then Swedbank Pay will send you an invoice with the relevant fees, in addition to the report and transactions lists. Your acquirer will transfer settled funds to you. Balance Report The Balance Report (a .pdf file) specifies the total sales for a specific period, including fees and VAT. The report contains three parts: a payment summary and specifications for sales and for fees. Payment Summary Provides a summary of the Amount sold, Fees and VAT. If Swedbank Pay handles the settlement process, the Transferedamount - shown in the balance report summary is equivalent to the disbursement on the bank statement (the remaining total amount after fees). Sales specification Provides a specification over sales for the given period. The sales total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each sales row specify Quantity, Sum sales and Amount to pay out, the last one is only eligble if Swedbank Pay handles the Settlement process. Fees specification Provides a specification over fees for the given period. The fees total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each fees row specify Quantity (sales), Amount (sales), Unit price, Provision and fee Amount. If you handle the settlement process yourselves you will receive a separat invoice for fees. Transactions List The Transaction List (provided in .xlsx and .xml formats) specifies all transactions for a specific period, including a summary of transactions grouped by payment instrument. Both formats contain the same information, but the xml file is meant for computer processing while the excel workbook is meant for human interaction. The first row contains the name of the Swedbank Pay company (e.g. Swedbank Pay Solutions AB) that the merchant has the contract with, and the balance report number. The header fields contain a summary of the transactions displayed in the body. Header fields Field Type Description Prefix String The Prefix used for transactions, only eligible if merchant uses prefix. Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). ServiceType String The service type of the service used (e.g. Creditcard). Service String The service used (e.g. Creditcard). NoOfDebet Decimal Total number of debit transactions for the given service. NoOfCredit Decimal Total number of credit transactions for the given service. Amount Decimal Total amount for the given service (e.g 100.00). FromDate ISO 8601 The earlistest transaction date, YYYY-MM-DD. ToDate ISO 8601 The latest transaction date, YYYY-MM-DD. Body fields Field Type Description Swedbank Pay Batch Number Decimal A batch number common to all types of transactions processed by PayEx. Transaction Number Decimal A unique identifier of the transaction, can be traced in Swedbank Pay Admin user interface. Order id String A unique identifier of the order, as sent from the merchant to PayEx. Transactions that are related to the same order are associated with this ID. Date Created ISO 8601 Transaction capture date/time. YYYY-MM-DD hh:mm:ss. Date Modified ISO 8601 Transaction settle date/time. YYYY-MM-DD hh:mm:ss. Provider String The service provider (e.g. Babs, Swedbank). Type String The service type of the related transaction (e.g. Creditcard). Amount Decimal Total amount of the related transaction (e.g 100.00). Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). Product Number String A product number, as sent by merchant to PayEx. Description String A textual description of the transaction, as sent by merchant to PayEx. VAT Amount Decimal VAT Amount for the given transaction (e.g 100.00). VAT Percentage Decimal VAT Percentage for the given transaction. Credit Card Batch Number Decimal The reference number from the credit card processor. Reference Decimal The transaction reference from processor. Swedbank Pay Account Number Decimal The Account number given, shown in Swedbank Pay admin. Referenced Transaction Number Decimal Transaction number for the Authoriation transaction for a two-stage transaction or the number of the debit transaction if it is a credit transaction. Sales Channel String The channel through which the transaction was sent to Swedbank Pay (e.g Transaction via eCommerce APIs). Brand String If eligible, Branding information as sent by merchant to PayEx. Point Of Sale String If eligible, POS information as sent by merchant to PayEx. Reconciliation To do the reconciliation, you need to match the information in your system against the information provided by Swedbank Pay in the balance report and transaction list. Below is a sequence diagram detailing the interaction. sequenceDiagram participant SwedbankPay as Swedbank Pay activate Merchant activate SwedbankPay Merchant--&gt;&gt;SwedbankPay: Online payment transactions deactivate Merchant deactivate SwedbankPay activate Merchant SwedbankPay-&gt;&gt;Merchant: Balance Report (PDF-file) note left of Merchant: files are sent by e-mail or file transfer SwedbankPay-&gt;&gt;Merchant: Transaction list (XLSX-file) SwedbankPay-&gt;&gt;Merchant: Transaction list (XML-file) deactivate Merchant There are two ways for you to match the information from your system with the information given in the reconciliation files from Swedbank Pay: You can use information generated by your system (you will have to set a unique payeeReference when you make the transaction), or You can use the transaction number generated by Swedbank Pay (this is called transaction number and is returned from Swedbank Pay after you have created the transaction). A credit card transaction is made when you either make a capture or a reversal. In the input data for making a capture, you will set the payeeReference. The unique value of this field is the same as the field called OrderID in the reconciliation file. { \"transaction\": { \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Reversal\", \"payeeReference\": \"ABC123\" } } When you receive the response from Swedbank Pay, the response will include transaction.number. This is the same as the field called TransactionNo in the reconciliation file. { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1500, \"vatAmount\": 250, \"description\": \"Test Capture\", \"payeeReference\": \"ABC123\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } payeeReference sent to Swedbank Pay is equal to OrderId in the reconciliation file. capture.transaction.number returned from Swedbank Pay is equal to TransactionNo in reconciliation file. Samples The content of the files depends on the type of agreement you have made with Swedbank Pay. For some payment instruments, only option A is available, while for other payment instruments, only option B is available. The sample files can be downloaded below. Option A: Swedbank Pay handles the settlement process PDF Balance Report for Swedbank Pay Checkout PDF Balance Report XLSX Transaction List XML Transaction List Option B: You will handle the settlement process yourself PDF Balance Report XLSX Transaction List XML Transaction List Split Settlement The prefix split is the easy way of doing settlements for companies with multiple sub merchants. With only a few easy steps, you can make the settlement process more efficient with regards to invoicing, payouts and setup for both your sub merchants and yourself. In short, it is a settlement feature where a company with a website or an app can attach specific prefix numbers to sub merchants selling their goods or services through the company. The prefix number is used to match the transactions and the merchant, so the settlement is automatically split between the sub merchants. If you run a site selling tickets to concerts, theatres, sporting events etc., each venue gets its own prefix number. If you run a funeral home, the sub merchants can be everything from flower delivery to charities. What we need from you as a company Send us a KYC form for each sub merchant you want to include. We will also do a KYC check on your sub merchants, providing extra security for you. Give every sub merchant who sells goods/services at your website or in your app a unique prefix number. This needs to be included in the KYC form you send to us. We recommend using the same customer number they have in your system. Attach the prefix number to all the goods/services the sub merchant sells through your website or app, so the goods/services can be matched to the correct merchant in our back office system. A partner agreement is needed for the automatic deduction of revenue cuts and fees. How it works We set up the sub merchant prefix in our systems. The prefix number is added in the subsite field in the API call when you create the payment for the goods or service. The customer selects payment instrument and completes the payment. The payment goes into the client funds account. Swedbank Pay matches the transaction and the merchant using the prefix number. The settlement is split and connected to the correct merchant. Revenue cuts for the super merchant and fees from Swedbank Pay are deducted automatically. Payout to the sub merchant is done. The upsides Since the sub merchants are connected to Swedbank Pay through the super merchant instead of having separate setups, this means that you: Only need one agreement for credit card, Vipps, Swish, MobilePay, invoice and payment gateway. Only need one acquiring agreement. Only need one Vipps/Swish certificate. Can add more payment instruments easily, as it only has to be done once. Can set up new sub merchants quickly, as the only thing needed is a KYC form and a prefix number. This shortens the setup time for both you and us to a matter of hours. The automatic settlement split and deduction of fees and revenue cuts minimizes the work for your accounting department, as you do not have to invoice your sub merchants. The prefix split is available with all the payment instruments we offer on our eCom platform. Good to know With regards to admin functions, we offer a full integration towards our admin system. This way, you do not have to log in to Swedbank Pay Admin to perform these operations. Captures and cancels Captures and cancels are done by the super merchant the same way as any other normal flow. Reversals In cases where you need to do reversals, this will be performed by the super merchant. The reversal amount will be charged from the sub merchants prefix. If the sub merchants balance is 0 (zero), the super merchant will be invoiced. The super merchant will in turn have to invoice this amount to the sub merchant. Problems When performing unsuccessful operations, the eCommerce API will respond with a problem message. We generally use the problem message type and status code to identify the nature of the problem. The problem name and description will often help narrow down the specifics of the problem. Contractual Problem Types All contract types will have the following URI in front of type: https://api.externalintegration.payex.com/psp/&lt;errordetail&gt;/creditcard Type Status Description cardbranddisabled 403 The card brand is disabled. accountholdertyperejected 403 The account holder type is rejected. cardtyperejected 403 The card type is rejected. 3dsecurerequired 403 The transaction was rejected by 3-D Secure. authenticationstatusrejected 403 The authentication status was rejected. frauddetected 403 The transaction was fraudulent. 3dsecuredeclined 403 3-D Secure declined the transaction. Acquirer and 3-D Secure Problem Types All acquirer error types will have the following URI in front of type: https://api.payex.com/psp/errordetail/creditcard/&lt;error-type&gt; Type Status Description 3dsecureerror 400 3D Secure not working, try again some time later cardblacklisted 400 Card blacklisted, Consumer need to contact their Card-issuing bank paymenttokenerror 403 There was an error with the payment token. carddeclined 403 The card was declined. acquirererror 403 The acquirer responded with a generic error. acquirercardblacklisted 403 Card blacklisted, Consumer need to contact their Card-issuing bank acquirercardexpired 403 Wrong expire date or Card has expired and consumer need to contact their Card-issuing bank acquirercardstolen 403 Card blacklisted, Consumer need to contact their Card-issuing bank acquirerinsufficientfunds 403 Card does not have sufficient funds, consumer need to contact their Card-issuing bank. acquirerinvalidamount 403 Amount not valid by aquirer, contact support.ecom@payex.com acquirerpossiblefraud 403 Transaction declined due to possible fraud, consumer need to contact their Card-issuing bank. 3dsecureusercanceled 403 Transaction was Cancelled during 3DSecure verification 3dsecuredeclined 403 Transaction was declined during 3DSecure verification frauddetected 403 Fraud detected. Consumer need to contact their Card-issuing bank. badrequest 500 Bad request, try again after some time internalservererror 500 Server error, try again after some time 3dsecureacquirergatewayerror 502 Problems reaching 3DSecure verification, try again after some time. badgateway 502 Problems reaching the gateway, try again after some time acquirergatewayerror 502 Problems reaching acquirers gateway, try again after some time acquirergatewaytimeout 504 Problems reaching acquirers gateway, try again after some time Back: After payment",
    "tags": "",
    "url": "/payments/card/other-features.html"
  },{
    "title": "Swedbank Pay Checkout – Other Features",
    "text": "After a successful integration, it may be worth investigating which other features are available in Swedbank Pay Checkout. They are listed on this very page. Payment Orders The paymentorders resource is used when initiating a payment process through Payment Menu and Swedbank Pay Checkout. The payment order is a container for the payment instrument object selected by the payer. This will generate a payment that is accessed through the sub-resources payments and currentPayment. Request GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"created\": \"2018-09-14T13:21:29.3182115Z\", \"updated\": \"2018-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\" : { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/urls\" }, \"payeeInfo\" : { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payeeinfo\" }, \"settings\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/settings\" }, \"payers\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payers\" }, \"orderItems\" : { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/orderItems\" }, \"metadata\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/metadata\" }, \"payments\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payments\" }, \"currentPayment\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/currentpayment\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/paymentmenu/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" } ] } Property Type Description paymentorder object The payment order object. └➔ id string The relative URI to the payment order. └➔ created string The ISO-8601 date of when the payment order was created. └➔ updated string The ISO-8601 date of when the payment order was updated. └➔ operation string Purchase └➔ state string Ready, Pending, Failed or Aborted. Indicates the state of the payment order. Does not reflect the state of any ongoing payments initiated from the payment order. This field is only for status display purposes. └➔ currency string The currency of the payment order. └➔ amount integer The amount including VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK, a 5000 quals 50.00 NOK. └➔ vatAmount integer The amount of VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. └➔ description string(40) A textual description of maximum 40 characters of the purchase. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string nb-NO, sv-SE or en-US └➔ urls string The URI to the urls resource where all URIs related to the payment order can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment order can be retrieved. └➔ payers string The URI to the payers resource where information about the payee of the payment order can be retrieved. └➔ orderItems string The URI to the orderItems resource where information about the order items can be retrieved. └➔ metadata string The URI to the payments resource where information about all underlying payments can be retrieved. └➔ payments string The URI to the payments resource where information about all underlying payments can be retrieved. └➔ currentPayment string The URI to the currentPayment resource where information about the current – and sole active – payment can be retrieved. └➔ operations array The array of possible operations to perform, given the state of the payment order. See Operations for details. Creating a payment order To create a payment order, you perform a POST request towards the paymentorders resource: Request POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": { \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"generateRecurrenceToken\": false, \"restrictedToInstruments\": [\"CreditCard\", \"Invoice\"], \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"paymentUrl\": \"https://example.com/perform-payment\", \"callbackUrl\": \"https://api.example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/termsandconditoons.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\" }, \"payer\": { \"consumerProfileRef\": \"afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"email\": \"olivia.nyhuus@payex.com\", \"msisdn\": \"+4798765432\", \"workPhoneNumber\" : \"+4787654321\", \"homePhoneNumber\" : \"+4776543210\" }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ], \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } } } } Required Property Type Description ✔︎︎︎︎︎ paymentorder object The payment order object. ✔︎︎︎︎︎ └➔ operation string The operation that the payment order is supposed to perform. ✔︎︎︎︎︎ └➔ currency string The currency of the payment. ✔︎︎︎︎︎ └➔ amount integer The amount including VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEKand 5000 equals 50.00 SEK. ✔︎︎︎︎︎ └➔ vatAmount integer The amount of VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. ✔︎︎︎︎︎ └➔ description string The description of the payment order. ✔︎︎︎︎︎ └➔ userAgent string The user agent of the payer. ✔︎︎︎︎︎ └➔ language string The language of the payer. ✔︎︎︎︎︎ └➔ generateRecurrenceToken bool Determines if a recurrence token should be generated. A recurrence token is primarily used to enable future recurring payments - with the same token - through server-to-server calls. Default value is false.   └➔ restrictedToInstruments array CreditCard, Invoice, Vipps, Swish and/or CreditAccount. Invoice supports the subtypes PayExFinancingNo, PayExFinancingSe and PayMonthlyInvoiceSe, separated by a dash, e.g.; Invoice-PayExFinancingNo. Limits the options available to the consumer in the payment menu. Default value is all supported payment instruments. Usage of this property requires an agreement with Swedbank Pay. ✔︎︎︎︎︎ └➔ urls object The urls object, containing the URLs relevant for the payment order. ✔︎︎︎︎︎ └─➔ hostUrls array The array of URIs valid for embedding of Swedbank Pay Hosted Views. ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further.   └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled, either by the payer or by the merchant trough an abort request of the payment or paymentorder.   └─➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the payment menu needs to be loaded, to inspect and act on the current status of the payment. ✔︎︎︎︎︎ └─➔ callbackUrl string The URI to the API endpoint receiving POST requests on transaction activity related to the payment order. ✔︎︎︎︎︎ └─➔ termsOfServiceUrl string The URI to the merchant terms of service document the payer must accept in order to complete the payment. This is not the Swedbank Pay Terms of Service. Requires https. ✔︎︎︎︎︎ └➔ payeeInfo string The payeeInfo object, containing information about the payee. ✔︎︎︎︎︎ └─➔ payeeId string The ID of the payee, usually the merchant ID. ✔︎︎︎︎︎ └─➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.   └─➔ payeeName string The name of the payee, usually the name of the merchant.   └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems.   └─➔ subsite String(40) The subsite field can be used to perform [split settlement][split-settlement] on the payment. The subsites must be resolved with Swedbank Pay [reconciliation][settlement-and-reconciliation] before being used.   └➔ payer object The payer object containing information about the payer relevant for the payment order. ︎︎︎ └─➔ consumerProfileRef string The consumer profile reference as obtained through [initiating a consumer session][initiate-consumer-session].   └➔ orderItems array The array of items being purchased with the order. Used to print on invoices if the payer chooses to pay with invoice, among other things ✔︎︎︎︎︎ └─➔ reference string A reference that identifies the order item. ✔︎︎︎︎︎ └─➔ name string The name of the order item. ✔︎︎︎︎︎ └─➔ type string PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. ✔︎︎︎︎︎ └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces. Swedbank Pay may use this field for statistics.   └─➔ itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ └─➔ imageUrl string The URL to an image of the order item.   └─➔ description string The human readable description of the order item.   └─➔ discountDescription string The human readable description of the possible discount. ✔︎︎︎︎︎ └─➔ quantity integer The 4 decimal precision quantity of order items being purchased. ✔︎︎︎︎︎ └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is a free-text field and is used for your own book keeping. ✔︎︎︎︎︎ └─➔ unitPrice integer The price per unit of order item, including VAT.   └─➔ discountPrice integer If the order item is purchased at a discounted price. This property should contain that price, including VAT. ✔︎︎︎︎︎ └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. ✔︎︎︎︎︎ └─➔ amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. ✔︎︎︎︎︎ └─➔ vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK.   └➔ riskIndicator array This optional array consist of information that helps verifying the payer. Providing these fields decreases the likelyhood of having to promt for 3-D Secure authenticaiton of the payer when they are authenticating the purchacse.   └─➔ deliveryEmailAdress string For electronic delivery, the email address to which the merchandise was delivered. Providing this field when appropriate decreases the likelyhood of a 3-D Secure authentication for the payer.   └─➔ deliveryTimeFrameIndicator string Indicates the merchandise delivery timeframe. 01 (Electronic Delivery) 02 (Same day shipping) 03 (Overnight shipping) 04 (Two-day or more shipping)   └─➔ preOrderDate string For a pre-ordered purchase. The expected date that the merchandise will be available. Format: YYYYMMDD   └─➔ preOrderPurchaseIndicator string Indicates whether the payer is placing an order for merchandise with a future availability or release date. 01 (Merchandise available) 02 (Future availability)   └─➔ shipIndicator string Indicates shipping method chosen for the transaction. 01 (Ship to cardholder’s billing address) 02 (Ship to another verified address on file with merchant)03 (Ship to address that is different than cardholder’s billing address)04 (Ship to Store / Pick-up at local store. Store address shall be populated in shipping address fields)05 (Digital goods, includes online services, electronic giftcards and redemption codes) 06 (Travel and Event tickets, not shipped) 07 (Other, e.g. gaming, digital service)   └─➔ giftCardPurchase bool true if this is a purchase of a gift card.   └─➔ reOrderPurchaseIndicator string Indicates whether the payer is placing an order for merchandise with a future availability or release date. 01 (Merchandise available) 02 (Future availability)   └➔ pickUpAddress object If shipIndicator set to 04, then prefill this with the payers pickUpAddress of the purchase to decrease the risk factor of the purchase.   └─➔ name string If shipIndicator set to 04, then prefill this with the payers name of the purchase to decrease the risk factor of the purchase.   └─➔ streetAddress string If shipIndicator set to 04, then prefill this with the payers streetAddress of the purchase to decrease the risk factor of the purchase.   └─➔ coAddress string If shipIndicator set to 04, then prefill this with the payers coAddress of the purchase to decrease the risk factor of the purchase.   └─➔ city string If shipIndicator set to 04, then prefill this with the payers city of the purchase to decrease the risk factor of the purchase.   └─➔ zipCode string If shipIndicator set to 04, then prefill this with the payers zipCode of the purchase to decrease the risk factor of the purchase.   └─➔ countryCode string If shipIndicator set to 04, then prefill this with the payers countryCode of the purchase to decrease the risk factor of the purchase. Response The response given when creating a payment order is equivalent to a GET request towards the paymentorders resource, as displayed above URLs When creating a Payment Order, the urls property of the paymentOrder contains the related URIs, including where the consumer gets redirected when going forward with or cancelling a payment session, as well as the callback URI that is used to inform the payee (merchant) of changes or updates made to underlying payments or transaction. Required Property Type Description ✔ ︎︎︎︎︎ hostUrls array The array of URIs valid for embedding of Swedbank Pay Hosted Views. ✔︎︎︎︎︎ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further. ✔︎︎︎︎︎ termsOfServiceUrl string The URI to the terms of service document the payer must accept in order to complete the payment. HTTPS is a requirement.   cancelUrl string The URI to redirect the payer to if the payment is canceled, either by the payer or by the merchant trough an abort request of the payment or paymentorder.   paymentUrl string The URI that Swedbank Pay will redirect back to when the payment menu needs to be loaded, to inspect and act on the current status of the payment.   callbackUrl string The URI to the API endpoint receiving POST requests on transaction activity related to the payment order.   logoUrl string The URI to the logo that will be displayed on redirect pages. HTTPS is a requirement. Payment Url For our Seamless Views, the property called paymentUrl will be used when the consumer is redirected out of the Seamless View (the iframe). The consumer is redirected out of frame when selecting the payment instrument Vipps or in the 3-D Secure verification for Credit Card Payments. The URL should represent the page of where the Payment Order Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the Seamless View was added to in order to initiate the payment process. info Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment Order as the one that initiated the payment process originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer. URLs Resource It is possible to perform a GET request on the urls resource to retrieve its contents. Request GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/urls/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": \"/psp/payments/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"urls\": { \"id\": \"/psp/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/urls\", \"hostUrls\": [ \"https://example.com\", \"http://example.net\" ], \"completeUrl\": \"http://example.com/payment-complete\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"paymentUrl\": \"http://example.com/perform-payment\", \"callbackUrl\": \"http://api.example.com/payment-callback\", \"logoUrl\": \"http://merchant.com/path/to/logo.png\", \"termsOfServiceUrl\": \"http://merchant.com/path/to/tems\" } } Property Type Description paymentorder string The URI to the payment order the resource belong to. urls object The URLs object. └➔ id string The relative URI to the urls resource. └➔ hostsUrl string An array of the whitelisted URIs that are allowed as parents to a Hosted View, typically the URI of the web shop or similar that will embed a Hosted View within it. └➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further. └➔ cancelUrl string The URI to redirect the payer to if the payment is canceled, either by the payer or by the merchant trough an abort request of the payment or paymentorder. └➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the payment menu needs to be loaded, to inspect and act on the current status of the payment. └➔ callbackUrl string The URI that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details. └➔ logoUrl string The URI that will be used for showing the customer logo. Must be a picture with at most 50px height and 400px width. └➔ termsOfServiceUrl string A URI that contains your terms and conditions for the payment, to be linked on the payment page. Order Items The orderItems property of the paymentOrder is an array containing the items being purchased with the order. Used to print on invoices if the payer chooses to pay with invoice, among other things. Order items can be specified on both payment order creation as well as on Capture. Required Property Type Description ✔︎︎︎︎︎ reference string A reference that identifies the order item. ✔︎︎︎︎︎ name string The name of the order item. ✔︎︎︎︎︎ type enum PRODUCT, SERVICE, SHIPPING_FEE, DISCOUNT, VALUE_CODE, or OTHER. The type of the order item. ✔︎︎︎︎︎ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces. Swedbank Pay may use this field for statistics.   itemUrl string The URL to a page that can display the purchased item, such as a product page   imageUrl string The URL to an image of the order item.   description string The human readable description of the order item.   discountDescription string The human readable description of the possible discount. ✔︎︎︎︎︎ quantity decimal The 4 decimal precision quantity of order items being purchased. ✔︎︎︎︎︎ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. ✔︎︎︎︎︎ unitPrice integer The price per unit of order item, including VAT.   discountPrice integer If the order item is purchased at a discounted price. This property should contain that price, including VAT. ✔︎︎︎︎︎ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. ✔︎︎︎︎︎ amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. ✔︎︎︎︎︎ vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. Items The items property of the paymentOrder is an array containing items that will affect how the payment is performed. Required Property Type Description   creditCard object The credit card object.   └➔ rejectDebitCards bool true if debit cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.   └➔ rejectDebitCards bool true if debit cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.   └➔ rejectCreditCards bool true if credit cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.   └➔ rejectConsumerCards bool true if consumer cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.   └➔ rejectCorporateCards bool true if corporate cards should be declined; otherwise false per default. Default value is set by Swedbank Pay and can be changed at your request.   invoice object The invoice object.   └➔ feeAmount integer The fee amount in the lowest monetary unit to apply if the consumer chooses to pay with invoice.   swish object The swish object.   └➔ enableEcomOnly bool true to only enable Swish on ecommerce transactions. The paymentOrders resource utilize several sub-resources, relating to underlying payments, the current payment active, payers and URLs. Common sub-resources like payeeinfo, that are structurally identical for both payments and payments orders, are described in the Payment Resources section. Operations When a payment order resource is created and during its lifetime, it will have a set of operations that can be performed on it. The state of the payment order resource, what the access token is authorized to do, the chosen payment instrument and its transactional states, etc. determine the available operations before the initial purchase. A list of possible operations and their explanation is given below. Operations { \"paymentOrder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", } \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"update-paymentorder-updateorder\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/paymentmenu/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/captures\", \"rel\": \"create-paymentorder-capture\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/cancellations\", \"rel\": \"create-paymentorder-cancel\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/reversals\", \"rel\": \"create-paymentorder-reversal\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/paid\", \"rel\": \"paid-paymentorder\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/failed\", \"rel\": \"failed-paymentorder\", \"contentType\": \"application/problem+json\" } ] } Property Type Description href string The target URI to perform the operation against. rel string The name of the relation the operation has to the current resource. method string GET, PATCH, POST, etc. The HTTP method to use when performing the operation. contentType string The HTTP content type of the resource referenced in the href property. The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-paymentorder-abort Aborts the payment order before any financial transactions are performed. update-paymentorder-updateorder Updates the order with a change in the amount and/or vatAmount. redirect-paymentorder Contains the URI that is used to redirect the consumer to the Swedbank Pay Payments containing the Payment Menu. view-paymentorder Contains the JavaScript href that is used to embed the Payment Menu UI directly on the webshop/merchant site. create-paymentorder-capture The second part of a two-phase transaction where the authorized amount is sent from the payer to the payee. It is possible to do a part-capture on a subset of the authorized amount. Several captures on the same payment are possible, up to the total authorization amount. create-paymentorder-cancel Used to cancel authorized and not yet captured transactions. If a cancellation is performed after doing a part-capture, it will only affect the not yet captured authorization amount. create-paymentorder-reversal Used to reverse a payment. It is only possible to reverse a payment that has been captured and not yet reversed. paid-paymentorder Returns the information about a paymentorder that has the status paid. failed-paymentorder Returns the information about a paymentorder that has the status failed. View Payment Order The view-paymentorder operation contains the URI of the JavaScript that needs to be set as a script element’s src attribute, either client-side through JavaScript or server-side in HTML as shown below. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Swedbank Pay Checkout is Awesome!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"checkout\"&gt;&lt;/div&gt; &lt;script src=\"https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;culture=nb-NO\"&gt;&lt;/script&gt; &lt;script language=\"javascript\"&gt; payex.hostedView.paymentMenu({ container: 'checkout', culture: 'nb-NO', onPaymentCompleted: function(paymentCompletedEvent) { console.log(paymentCompletedEvent); }, onPaymentFailed: function(paymentFailedEvent) { console.log(paymentFailedEvent); }, onPaymentCreated: function(paymentCreatedEvent) { console.log(paymentCreatedEvent); }, onPaymentToS: function(paymentToSEvent) { console.log(paymentToSEvent); }, onPaymentMenuInstrumentSelected: function(paymentMenuInstrumentSelectedEvent) { console.log(paymentMenuInstrumentSelectedEvent); }, onError: function(error) { console.error(error); }, }).open(); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Update Order Change amount and vat amount on a payment order. If you implement UpdateOrder you need to refresh() the Payment Menu front end so the new amount is shown to the end customer. Request PATCH /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": { \"operation\": \"UpdateOrder\", \"amount\": 1500, \"vatAmount\": 375, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/shop/products/1234\", \"imageUrl\": \"https://example.com/products/product1.jpg\", \"description\": \"Product description\", \"discountDescription\": \"Volume discount\", \"quantity\": 351.3514, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product description\", \"quantity\": 9876.1531, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Response Response HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"created\": \"2018-09-14T13:21:29.3182115Z\", \"updated\": \"2018-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\" : { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/urls\" }, \"payeeInfo\" : { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payeeinfo\" }, \"settings\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/settings\" }, \"payers\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payers\" }, \"orderItems\" : { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/orderItems\" }, \"metadata\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/metadata\" }, \"payments\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payments\" }, \"currentPayment\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/currentpayment\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/paymentmenu/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" } ] } The response given when changing a payment order is equivalent to a GET request towards the paymentorders resource, as displayed above. info After updating the Payment Order, remember to call .refresh() on the Payment Menu in JavaScript. Capture Capture can only be done on a payment with a successful authorized transaction, and if the authorization was not done on a one-phase payment instrument. Examples of one-phase payment instruments are Swish and Vipps, while payment instruments such as Credit Card are two-phase payments, requiring a Capture to be performed. It is possible to do a part-capture where you only capture a smaller amount than the authorized amount. You can later do more captures on the same payment up to the total authorization amount. This is done by requesting the order information from the server, to get the request link to perform the capture. With this, you can request the capture with the sum to capture, and get back the status. sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(81,43,43,0.1) activate Merchant note left of Payer: Capture Merchant -&gt;&gt;+ SwedbankPay: rel:create-paymentorder-capture deactivate Merchant SwedbankPay --&gt;&gt;- Merchant: Capture status note right of Merchant: Capture here only if the purchased&lt;br/&gt;goods don't require shipping.&lt;br/&gt;If shipping is required, perform capture&lt;br/&gt;after the goods have shipped.&lt;br&gt;Should only be used for &lt;br&gt;PaymentInstruments that support &lt;br&gt;Authorizations. end To capture the authorized payment, we need to perform create-paymentorder-capture against the accompanying href returned in the operations list. See the abbreviated request and response below: Request POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/captures HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"description\": \"Capturing the authorized payment\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"AB832\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Required Property Type Description ✔︎︎︎︎︎ transaction object The transaction object. ✔︎︎︎︎︎ └➔ description string The description of the capture transaction. ✔︎︎︎︎︎ └➔ amount integer The amount including VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. ✔︎︎︎︎︎ └➔ vatAmount integer The amount of VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. ✔︎︎︎︎︎ └➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details. In Invoice Payments payeereference is used as an invoice/receipt number. ✔︎︎︎︎︎ └➔ orderItems array The array of items being purchased with the order. Used to print on invoices if the payer chooses to pay with invoice, among other things. Required in capture requests if already sent with the initial creation of the Payment Order. Note that this should only contain the items to be captured from the order. ✔︎︎︎︎︎ └─➔ reference string A reference that identifies the order item. ✔︎︎︎︎︎ └─➔ name string The name of the order item. ✔︎︎︎︎︎ └─➔ type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. ✔︎︎︎︎︎ └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces. Swedbank Pay may use this field for statistics.   └─➔ itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ └─➔ imageUrl string The URL to an image of the order item.   └─➔ description string The human readable description of the order item.   └─➔ discountDescription string The human readable description of the possible discount. ✔︎︎︎︎︎ └─➔ quantity integer The 4 decimal precision quantity of order items being purchased. ✔︎︎︎︎︎ └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is a free-text field and is used for your own book keeping. ✔︎︎︎︎︎ └─➔ unitPrice integer The price per unit of order item, including VAT.   └─➔ discountPrice integer If the order item is purchased at a discounted price. This property should contain that price, including VAT. ✔︎︎︎︎︎ └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. ✔︎︎︎︎︎ └─➔ amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. ✔︎︎︎︎︎ └─➔ vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. ✔︎︎︎︎︎ └─➔ reference string A reference that identifies the order item. ✔︎︎︎︎︎ └─➔ name string The name of the order item. ✔︎︎︎︎︎ └─➔ type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. ✔︎︎︎︎︎ └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces. Swedbank Pay may use this field for statistics. ︎︎︎ └─➔ itemUrl string The URL to a page that can display the purchased item, such as a product page ︎︎︎ └─➔ imageUrl string The URL to an image of the order item. ︎︎︎ └─➔ description string The human readable description of the order item. ︎︎︎ └─➔ discountDescription string The human readable description of the possible discount. ✔︎︎︎︎︎ └─➔ quantity decimal The 4 decimal precision quantity of order items being purchased. ✔︎︎︎︎︎ └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. ✔︎︎︎︎︎ └─➔ unitPrice integer The price per unit of order item, including VAT. ︎︎︎ └─➔ discountPrice integer If the order item is purchased at a discounted price. This property should contain that price, including VAT. ✔︎︎︎︎︎ └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. ✔︎︎︎︎︎ └─➔ amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. ✔︎︎︎︎︎ └─➔ vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. If the capture succeeds, it should respond with something like the following: Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"type\": \"Capture\", \"state\": \"Completed\", \"amount\": 15610, \"vatAmount\": 3122, \"description\": \"Capturing the authorized payment\", \"payeeReference\": \"AB832\" } } } Property Type Description payment string The relative URI of the payment this capture transaction belongs to. capture object The capture object, containing the information about the capture transaction. └➔ id string The relative URI of the created capture transaction. └➔ transaction object The transaction object, containing information about the current transaction. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. Abort To abort a payment order, perform the update-paymentorder-abort operation that is returned in the payment order response. You need to include the following in the request body: Request PATCH /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": { \"operation\": \"Abort\", \"abortReason\": \"CancelledByConsumer\" } } Response Response HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"created\": \"2018-09-14T13:21:29.3182115Z\", \"updated\": \"2018-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\" : { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/urls\" }, \"payeeInfo\" : { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payeeinfo\" }, \"settings\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/settings\" }, \"payers\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payers\" }, \"orderItems\" : { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/orderItems\" }, \"metadata\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/metadata\" }, \"payments\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payments\" }, \"currentPayment\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/currentpayment\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"rel\": \"update-paymentorder-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/paymentmenu/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-paymentorder\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;culture=nb-NO\", \"rel\": \"view-paymentorder\", \"contentType\": \"application/javascript\" } ] } The response given when aborting a payment order is equivalent to a GET request towards the paymentorders resource, as displayed above, with its state set to Aborted. Cancel If we want to cancel up to the total authorized (not captured) amount, we need to perform create-paymentorder-cancel against the accompanying href returned in the operations list. See the abbreviated request and response below: Request POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/cancellations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"payeeReference\": \"ABC123\", \"description\": \"Cancelling parts of the total amount\" } } Required Property Type Description ✔︎︎︎︎︎ transaction object The transaction object. ✔︎︎︎︎︎ └➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details. ✔︎︎︎︎︎ └➔ description string A textual description of why the transaction is cancelled. If the cancellation request succeeds, the response should be similar to the example below: Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"cancellation\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"type\": \"Cancel\", \"state\": \"Completed\", \"amount\": 5610, \"vatAmount\": 1122, \"description\": \"Cancelling parts of the authorized payment\", \"payeeReference\": \"AB832\" } } } Property Type Description payment string The relative URI of the payment this cancellation transaction belongs to. cancellation object The cancellation object, containing information about the cancellation transaction. └➔ id string The relative URI of the cancellation transaction. └➔ transaction object The transaction object, containing information about the current transaction. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. Reversal If we want to reverse a previously captured amount, we need to perform create-paymentorder-reversal against the accompanying href returned in the operations list. See the abbreviated request and response below: Request POST /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/reversals HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"description\": \"Reversal of captured transaction\", \"amount\": 1500, \"vatAmount\": 375, \"payeeReference\": \"ABC123\", \"receiptReference\": \"3245766\", \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ] } } Required Property Type Description ✔︎︎︎︎︎ transaction object The transaction object. ✔︎︎︎︎︎ └➔ amount integer The amount including VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. ✔︎︎︎︎︎ └➔ vatAmount integer The amount of VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 NOK and 5000 equals 50.00 NOK. ✔︎︎︎︎︎ └➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details. In Invoice Payments payeereference is used as an invoice/receipt number, if the receiptreference is not defined.   └➔ receiptReference string(30) A reference from the merchant system. In Invoice Payments receiptreference is used as an invoice/receipt number. ✔︎︎︎︎︎ └➔ description string Textual description of why the transaction is reversed. ✔︎︎︎︎︎ └➔ orderItems array The array of items being purchased with the order. Used to print on invoices if the payer chooses to pay with invoice, among other things. Required in capture requests if already sent with the initial creation of the Payment Order. Note that this should only contain the items to be captured from the order. ✔︎︎︎︎︎ └─➔ reference string A reference that identifies the order item. ✔︎︎︎︎︎ └─➔ name string The name of the order item. ✔︎︎︎︎︎ └─➔ type enum PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. ✔︎︎︎︎︎ └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces. Swedbank Pay may use this field for statistics.   └─➔ itemUrl string The URL to a page that can display the purchased item, product or similar.   └─➔ imageUrl string The URL to an image of the order item.   └─➔ description string The human readable description of the order item.   └─➔ discountDescription string The human readable description of the possible discount. ✔︎︎︎︎︎ └─➔ quantity integer The 4 decimal precision quantity of order items being purchased. ✔︎︎︎︎︎ └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is a free-text field and is used for your own book keeping. ✔︎︎︎︎︎ └─➔ unitPrice integer The price per unit of order item, including VAT.   └─➔ discountPrice integer If the order item is purchased at a discounted price. This property should contain that price, including VAT. ✔︎︎︎︎︎ └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. ✔︎︎︎︎︎ └─➔ amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. ✔︎︎︎︎︎ └─➔ vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. If the reversal request succeeds, the response should be similar to the example below: Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"reversals\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/cancellations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"type\": \"Reversal\", \"state\": \"Completed\", \"amount\": 15610, \"vatAmount\": 3122, \"description\": \"Reversing the capture amount\", \"payeeReference\": \"ABC987\" } } } Property Type Description payment string The relative URI of the payment this reversal transaction belongs to. reversals object The reversal object, containing information about the reversal transaction. └➔ id string The relative URI of the reversal transaction. └➔ transaction object The transaction object, containing information about the current transaction. └─➔ id string The relative URI of the current transaction resource. └─➔ created string The ISO-8601 date and time of when the transaction was created. └─➔ updated string The ISO-8601 date and time of when the transaction was created. └─➔ type string Indicates the transaction type. └─➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └─➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └─➔ description string A human readable description of maximum 40 characters of the transaction. └─➔ payeeReference string A unique reference for the transaction. See payeeReference for details. In Invoice Payments payeereference is used as an invoice/receipt number. Transactions A payment contains sub-resources in the form of transactions. Most operations performed on a payment ends up as a transaction. The different types of operations that alter the state of the payment by creating a transaction is described below. The transactions resource will list the transactions (one or more) on a specific payment. Request GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"transactions\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\", \"transactionList\": [{ \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Authorization\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test authorization\", \"payeeReference\": \"PR1004\", \"failedReason\": \"\", \"isOperational\": true, \"operations\": [] }] } } Property Type Description payment string The relative URI of the payment this list of transactions belong to. transactions object The transactions object. └➔ id string The relative URI of the current transactions resource. └➔ transactionList array The array of transaction objects. └➔ transactionList[] object The transaction object (described in the transaction resource below). Transaction The transaction resource contains the generic details of a transaction on a specific payment. When a transaction is created it will have one of three states: Initialized - if there is some error where the source is undeterminable (network failure, etc), the transaction will remain Initialized. The corresponding state of the payment order will in this case be set to pending. No further transactions can be created. Completed - if everything went ok the transaction will follow through to completion. Failed - if the transaction has failed (i.e. a denial from the acquiring bank) it is possible to retry (i.e the consumer tries using another credit card) up to a maximum amount of retries (in that case which the payment order gets the state failed as well). Request GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": true, \"operations\": [] } } Property Type Description payment string The relative URI of the payment this transaction belongs to. transaction object The transaction object. └➔ id string The relative URI of the current transaction resource. └➔ created string The ISO-8601 date and time of when the transaction was created. └➔ updated string The ISO-8601 date and time of when the transaction was created. └➔ type string Indicates the transaction type. └➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └➔ description string A human readable description of maximum 40 characters of the transaction. └➔ payeeReference string A unique reference for the transaction. └➔ failedReason string The human readable explanation of why the payment failed. └➔ isOperational bool true if the transaction is operational; otherwise false. └➔ operations array The array of operations that are possible to perform on the transaction in its current state. Recurring Payments If you want to enable subsequent recurring – server-to-server – payments, you need to create a recurrence token. This token will be utilized after the initial payment order. Recurring payments must be activated on the contract with Swedbank Pay in order to work. Recurrence Token When initiating a Purchase payment order, you need to make sure that the property generateRecurrenceToken is set to true. This recurrence token will stored in the authorization transaction sub-resource on the underlying payment resource. When initiating a Verify payment order, a recurrence token will be generated automatically. This recurrence token is stored in the verification sub-resource on the underlying payment resource. You can view the current payment resource, containg the recurrence token and other payment instrument properties, by expanding the sub-resource currentpayment when doing a GET request on the paymentorders resource. Request GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce?$expand=currentpayment HTTP/1.1 Host: api.externalintegration.payex.com Creating Recurring Payments When you have a recurrenceToken token safely tucked away, you can use this token in a subsequent Recur payment order. This will be a server-to-server affair, as we have tied all necessary payment instrument details related to the recurrence token during the initial payment order. Request POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": { \"operation\": \"Recur\", \"recurrenceToken\": \"09ccd29a-7c4f-4752-9396-12100cbfecce\", \"currency\": \"SEK\", \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"callbackUrl\": \"https://example.com/callback\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"Subsite1\" }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/shop/id=123\", \"imageUrl\": \"https://example.com/product1.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 } ], \"metadata\": { \"key1\": \"value1\", \"key2\": 2, \"key3\": 3.1, \"key4\": false } } } Purchase Payments The Purchase operation is used in all common purchase scenarios. Purchase { \"paymentorder\": { \"operation\": \"Purchase\" { } Verify Payments The Verify operation lets you post verifications to confirm the validity of credit card information, without reserving or charging any amount. This option is mainly used to initiate a recurring payment scenario where the card will be charged at a later date. The request body is equivalent to a Purchase order with credit card as the selected item. A recurrence token will be generated automatically, rendering the parameter generateRecurrenceToken unnecessary for this operation. Verify { \"paymentorder\": { \"operation\": \"Verify\" { } Payments Resource A payment order is able to hold more than one payment object, even though a successful payment order only harbour one successful payment. This is necessary as the consumer might select and initiate a payment option that is not followed through successfully. I.e. if the consumer cancels an invoice payment, a cancel transaction will still be tied to that particular invoice payment resource. This payment resource will continue to exist, even if the consumer successfully should finish the purchase with a credit card payment instead. Request GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"payments\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payments\", \"paymentList\" : [ { \"id\": \"/psp/creditcard/payments/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"instrument\" : \"CreditCard\", \"created\": \"2016-09-14T13:21:29.3182115Z\" }, { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"instrument\" : \"Invoice\", \"created\": \"2016-09-14T13:21:29.3182115Z\" } ] } } Property Type Description paymentorder object The payment order object. payments object The payments object. └➔ id string The relative URI of the current payments resource. └➔ paymentList array The array of payment objects. └─➔ id string The URI of the payment. └─➔ instrument string The name of the payment instrument. └─➔ created string The ISO-8601 date and time of when the payment was created. Current Payment Resource The currentpayment resource displays the payment that are active within the payment order container. Request GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/currentpayment HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"menuElementName\": \"creditcard\", \"payment\": { \"recurrenceToken\": \"09ccd29a-7c4f-4752-9396-12100cbfecce\", \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"number\": 1234567890, \"instrument\": \"CreditCard\", \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/prices\" }, \"transactions\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/transactions\" }, \"authorizations\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/authorizations\" }, \"captures\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/captures\" }, \"cancellations\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/cancellations\" }, \"reversals\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/reversals\" }, \"verifications\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/verifications\" }, \"urls\" : { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/urls\" }, \"payeeInfo\" : { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/payeeInfo\" }, \"metadata\" : { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/metadata\" }, \"settings\": { \"id\": \"/psp/creditcard/payments/09ccd29a-7c4f-4752-9396-12100cbfecce/settings\" } }, \"operations\": [] } Property Type Description paymentorder string The URI of the payment order the payment belongs to. menuElementName string creditcard, invoice, etc. The name of the selected menu element. payment object The payment object. └➔ recurrenceToken string The created recurrenceToken, if operation: Verify or generateRecurrenceToken: true was used. └➔ id string The relative URI to the payment. └➔ number integer The payment number, useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. └➔ instrument string The payment instrument used. └➔ created string The ISO-8601 date of when the payment was created. └➔ updated string The ISO-8601 date of when the payment was updated. └➔ operation string Purchase, payout, Verify or recur.The type of the initiated payment. └➔ intent string The intent of the payment. └➔ state string Ready, Pending, Failed or Aborted. Indicates the state of the payment. This field is only for status display purposes. └➔ currency string The currency of the payment. └➔ prices object The prices object. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ remainingCaptureAmount integer The available amount to capture. └─➔ remainingCancelAmount integer The available amount to cancel. └─➔ remainingReversalAmount integer The available amount to reverse. └➔ description string(40) A textual description of maximum 40 characters of the purchase. └➔ payerReference string The reference to the consumer from the merchant system, like mobile number, customer number etc. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string nb-NO, sv-SE or en-US Prices Resource Prices The prices resource lists the prices related to a specific payment. Request GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"prices\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\", \"priceList\": [ { \"type\": \"VISA\", \"amount\": 2350, \"vatAmount\": 0 }, { \"type\": \"MasterCard\", \"amount\": 2350, \"vatAmount\": 0 } ] } } Property Type Description payment string The relative URI of the payment the prices resource belongs to. prices object The prices resource. └➔ id string The relative URI of the current prices resource. └➔ priceList array The array of price objects. Note: Even if you specifiy CreditCard in the input message the system will return all your configured card brands instead when you expan the priceList. └─➔ type string The type of the price object. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. Prices Object Types Each payment instrument have one or more prices object types. This is most relevant when using card based payments as each type correspond to a card brand or bank respectively. Card Payments The generic type CreditCard enables all card brands, supported by merchant contract. Type Description Visa Visa MasterCard MasterCard Amex American Express Dankort Dankort can only be used with DKK currency Diners Diners Club Finax Finax Jcb JCB IkanoFinansDK Ikano Finans Denmark Maestro MasterCard Maestro Payer Resource The payer resource contains payer information related to the payment order. The information is retrieved via a consumer profile token (consumerProfileRef), from the Consumers resource during login/checkin. Request GET /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payers/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"paymentorder\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"payer\" : { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce/payer\", \"reference\": \"reference to payer\", \"email\": \"email\", \"msisdn\": \"msisdn\", \"shippingAddress\": { \"addressee\": \"firstName + lastName\", \"coAddress\": \"coAddress\", \"streetAddress\": \"streetAddress\", \"zipCode\": \"zipCode\", \"city\": \"city\", \"countryCode\": \"countryCode\" } } } Property Type Description paymentorder string The URI of the payment order the payer belongs to. payer object The payer object. └➔ id string The relative URI to the current payer resource. └➔ email string Payer’s registered email address. └➔ msisdn string Payer’s registered mobile phone number. └➔ shippingAddress object The shipping address object related to the payer. └─➔ addresse object The shipping address object related to the payer. └─➔ coAddress string Payer’ s c/o address, if applicable. └─➔ streetAddress string Payer’s street address └─➔ zipCode string Payer’s zip code └─➔ city string Payer’s city of residence └─➔ countryCode string Country Code for country of residence. Checkin Events The Checkin Seamless View can inform about events that occur during Checkin through JavaScript event callbacks which can be implemented in the configuration object passed to the payex.hostedView.consumer(configuration) object. sequenceDiagram participant Consumer participant Merchant participant SwedbankPay as Swedbank Pay Consumer -&gt;&gt; Merchant: visit Merchant -&gt;&gt; Merchant: Prepare, Embed ClientScript Merchant -&gt;&gt; SwedbankPay: payex.hostedView.consumer().open() alt Configuration validation failure SwedbankPay --&gt;&gt; Merchant: onError end alt Identified consumer SwedbankPay-&gt;&gt;Merchant: onConsumerIdentified alt Depending on backend response SwedbankPay-&gt;&gt;Merchant: onShippingDetailsAvailable SwedbankPay-&gt;&gt;Merchant: onBillingDetailsAvailable end end alt Change shipping address Consumer-&gt;&gt;SwedbankPay: Click change shipping adress button SwedbankPay-&gt;&gt;Merchant: OnShippingDetailsAvailable end onConsumerIdentified This event triggers when a consumer has performed Checkin and is identified, if the Payment Menu is not loaded and in the DOM. The onConsumerIdentified event is raised with the following event argument object: onConsumerIdentified event object { \"actionType\": \"OnConsumerIdentified\", \"consumerProfileRef\": \"afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\" } onShippingDetailsAvailable Triggered when a consumer has been identified or shipping address has been updated. info The Checkin must be completed before any shipping details are finalized, as the Checkin component provides shipping address via the onShippingDetailsAvailable event. onShippingDetailsAvailable event object { \"actionType\": \"OnBillingDetailsAvailable\", \"url\": \"/psp/consumers/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065/shipping-details\" } onBillingDetailsAvailable Triggered when a consumer has been identified onBillingDetailsAvailable event object { \"actionType\": \"OnBillingDetailsAvailable\", \"url\":\"/psp/consumers/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065/billing-details\" } onError Triggered on terminal errors, and when the configuration fails validation. Enable or Disable Payment Menu It is possible to disable the payment menu when only one instrument exist by setting the disablePaymentMenu property to true. The default value is false, exemplified below. Request { \"paymentorder\": { \"disablePaymentMenu\": false { } Setting disablePaymentMenu property to true removes all other payment instruments but the one that is available. This feature is only valuable to set to true if you have only one payment instrument available. By setting it to true will remove the frame around the menu and show only the instrument. Request { \"paymentorder\": { \"disablePaymentMenu\": true { } Payment Menu Events During operation in the Payment Menu, several events can occur. They are described below. onPaymentMenuInstrumentSelected This event triggers when a user actively changes payment instrument in the Payment Menu. The onPaymentMenuInstrumentSelected event is raised with the following event argument object: onPaymentMenuInstrumentSelected event object { \"name\": \"menu identifier\", \"instrument\": \"creditcard | vipps | swish | invoice\", } Property Type Description name string The name and identifier of specific instrument instances - i.e. if you deploy more than one type of credit card payments, they would be distinguished by name. instrument string Creditcard, vipps, swish, invoice. The instrument selected by the user. onPaymentCreated This event triggers when a user has selected a payment instrument and actively attempts to perform a payment. The onPaymentCreate event is raised with the following event argument object: onPaymentCreated event object { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"instrument\": \"creditcard | vipps | swish | invoice\", } Property Type Description id string The relative URI to the payment. instrument string Creditcard, vipps, swish, invoice. The instrument selected when initiating the payment. onPaymentCompleted This event triggers when a payment has completed successfully. The onPaymentCompleted event is raised with the following event argument object: onPaymentCompleted event object { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"redirectUrl\": \"https://en.wikipedia.org/wiki/Success\" } Property Type Description id string The relative URI to the payment. redirectUrl string The URI the user will be redirect to after a completed payment. onPaymentCanceled This event triggers when the user cancels the payment. The onPaymentCanceled event is raised with the following event argument object: onPaymentCanceled event object { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"redirectUrl\": \"https://en.wikipedia.org/wiki/Canceled\" } Property Type Description id string The relative URI to the payment. redirectUrl string The URI the user will be redirect to after a canceled payment. onPaymentFailed This event triggers when a payment has failed, disabling further attempts to perform a payment. The onPaymentFailed event is raised with the following event argument object: onPaymentFailed event object { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"redirectUrl\": \"https://en.wikipedia.org/wiki/Failed\" } Property Type Description id string The relative URI to the payment. redirectUrl string The URI the user will be redirect to after a failed payment. onPaymentTermsOfService This event triggers when the user clicks on the “Display terms and conditions” link. The onPaymentTermsOfService event is raised with the following event argument object: onPaymentTermsOfService event object { \"origin\": \"owner | merchant\", \"openUrl\": \"https://example.org/terms.html\" } Property Type Description origin string owner, merchant. The value is always merchant unless Swedbank Pay hosts the view. openUrl string The URI containing Terms of Service and conditions. onError This event triggers during terminal errors or if the configuration fails validation. The onError event will be raised with the following event argument object: onError event object { \"origin\": \"consumer | paymentmenu | creditcard | invoice | ...\", \"messageId\": \"&lt;unique message ID&gt;\", \"details\": \"Descriptive text of the error\" } Property Type Description origin string consumer, paymentmenu, creditcard, identifies the system that originated the error. messageId string A unique identifier for the message. details string A human readable and descriptive text of the error. Callback Setting a callbackUrl in the HTTP POST API is optional, but highly recommended. If a payer closes the browser window, a network error or something else happens that prevents the payer from being redirect from Swedbank Pay back to the merchant website, the callback is what ensures that you receive information about what happened with the payment. When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform an asynchronous server-to-server callback to inform the payee (merchant) about this update. Swedbank Pay will make an HTTP POST to the callbackUrl that was specified when the payee (merchant) created the payment. When the callbackUrl receives such a callback, an HTTP GET request must be made on the payment or on the transaction. The retrieved payment or transaction resource will give you the necessary information about the recent change/update. The callback will be retried if it fails. Below are the retry timings, in seconds from the initial transaction time: 30 seconds 60 seconds 360 seconds 432 seconds 864 seconds 1265 seconds The callback is sent from the following IP address 82.115.146.1. Payment Order Callback { \"paymentOrder\":{ \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\", \"instrument\": \"&lt;payment instrument&gt;\" }, \"payment\":{ \"id\": \"/psp/&lt;payment instrument&gt;/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 222222222 }, \"transaction\":{ \"id\": \"/psp/&lt;payment instrument&gt;/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/&lt;transaction type&gt;/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"number\": 333333333 } } Parameter Description Payment Instrument CreditCard, Invoice, Swish, Vipps, DirectDebit, MobilePay Transaction Type Authorization, Capture, Cancellation, Reversal The sequence diagram below shows the HTTP POST you will receive from Swedbank Pay, and the two GET requests that you make to get the updated status. sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay activate Merchant activate SwedbankPay SwedbankPay-&gt;Merchant: POST &lt;callbackUrl&gt; note left of Merchant: Callback by Swedbank Pay Merchant--&gt;SwedbankPay: HTTP response deactivate SwedbankPay deactivate Merchant activate Merchant Merchant-&gt;SwedbankPay: GET &lt;payment instrument&gt; payment activate SwedbankPay note left of Merchant: First API request SwedbankPay--&gt;Merchant: payment resource deactivate SwedbankPay deactivate Merchant Problems When performing operations against the API, it will respond with a problem message that contain details of the error type if the request could not be successfully performed. Regardless of why the error occurred, the problem message will follow the same structure as specified in the Problem Details for HTTP APIs] specification. The structure of a problem message will look like this: { \"type\": \"https://api.payex.com/psp/errordetail/creditcard/inputerror\", \"title\": \"There was an input error\", \"detail\": \"Please correct the errors and retry the request\", \"instance\": \"ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"status\": 400, \"action\": \"RetryNewData\", \"problems\": [{ \"name\": \"CreditCardParameters.Issuer\", \"description\": \"minimum one issuer must be enabled \" }] } Property Type Description type string The URI that identifies the error type. This is the only property usable for programmatic identification of the type of error! When dereferenced, it might lead you to a human readable description of the error and how it can be recovered from. title string The title contains a human readable description of the error. detail string A detailed, human readable description of the error. instance string The identifier of the error instance. This might be of use to Swedbank Pay support personnel in order to find the exact error and the context it occurred in. status integer The HTTP status code that the problem was served with. action string The action indicates how the error can be recovered from. problems array The array of problem detail objects. └➔ [].name string The name of the property, header, object, entity or likewise that was erroneous. └➔ [].description string The description of what was wrong with the property, header, object, entity or likewise identified by name. Common Problems All common problem types will have a URI in the format https://api.payex.com/psp/errordetail/&lt;payment-instrument&gt;/&lt;error-type&gt;. The URI is an identifier and is currently not possible to dereference, although that might be possible in the future. Type Status Description inputerror 400 The server cannot or will not process the request due to an apparent client error (e.g. malformed request syntax, size to large, invalid request). forbidden 403 The request was valid, but the server is refusing the action. The necessary permissions to access the resource might be lacking. notfound 404 The requested resource could not be found, but may be available in the future. Subsequent requests are permissible. systemerror 500 A generic error message. configurationerror 500 A error relating to configuration issues. Expansion The payment resource contain the ID of related sub-resources in its response properties. These sub-resources can be expanded inline by using the request parameter expand. This is an effective way to limit the number of necessary calls to the API, as you return several properties related to a Payment resource in a single request. info Note that the expand parameter is available to all API requests but only applies to the request response. This means that you can use the expand parameter on a POST or PATCHrequest to get a response containing the target resource including expanded properties. This example below add the urls and authorizations property inlines to the response, enabling you to access information from these sub-resources. Expansion GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1?$expand=urls,authorizations HTTP/1.1 Host: api.externalintegration.payex.com To avoid unnecessary overhead, you should only expand the nodes you need info about. PayeeInfo The payeeinfo resource contains information about the payee (i.e. a merchant, a corporation etc) related to a specific payment. Request GET /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"payeeInfo\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\", \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"EN1234\", \"payeeName\": \"TestMerchant1\", \"productCategory\": \"EF1234\", \"orderReference\": \"or-123456\" } } Property Type Description payment string The URI of the payment which the payeeinfo belongs to. └➔ id string The URI of the current payeeinfo resource. └➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay └➔ payeeReference string(50) A unique reference set by the merchant system. See below for details └➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay. └➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. You therefore need to ensure that the value given here is valid in the settlement. └➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems. PayeeReference The payeeReference given when creating transactions and payments has some specific processing rules depending on specifications in the contract. It must be unique for every operation, used to ensure exactly-once delivery of a transactional operation from the merchant system. Its length and content validation is dependent on whether the transaction.number or the payeeReference is sent to the acquirer. If you select Option A in the settlement process (Swedbank Pay will handle the settlement), Swedbank Pay will send the transaction.number to the acquirer and the payeeReference may have the format of string(30). If you select Option B in the settlement process (you will handle the settlement yourself), Swedbank Pay will send the payeeReference to the acquirer and it will be limited to the format of string(12) and all characters must be digits. Merchant Authenticated Consumer When the consumer is identified and authenticated by the merchant, the consumer’s identity can be included in the Payment Order request. Merchant Authenticated Consumer is performed as an alternative to Checkin when creating the Payment Order upon the initializaiont of the Payment Menu. You can use Merchant Authenticated Consumer only if you have an agreement with Swedbank Pay. The additional nationalIdentifier property described below should be added to the paymentorder.payer object already in the Payment Order creation request, as an alternative to consumerProfileRef. warning Bank ID authentication required In order to use the Merchant Authenticated Consumer feature, you need a legal agreement with Swedbank Pay which mandates that the consumer identified by the nationalIdentifier is authenticated with Bank ID prior to the request. An example of how a Merchant Authenticated Consumer request looks like is provided below (abbreviated for brevity): Request POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": { \"payer\": { \"nationalIdentifier\": { \"socialSecurityNumber\": \"199710202392\", \"countryCode\": \"SE\" } } } } Required Property Type Description ✔︎︎︎︎︎ paymentorder object The payment order object.   └➔ payer object The payer object containing information about the payer relevant for the payment order.   └─➔ nationalIdentifier string The national identifier object.   └──➔ socialSecurityNumber string The consumers social security number. Must be part of what you get from your authentication process.   └──➔ countryCode string The countrycode of the consumer. Settlement and Reconciliation Reconciliation is an important step in an economic transaction. When a payment is reconciled, captured amounts for the payment are matched against the corresponding settlement. The information needed to reconcile captured funds - the balance report and transactions list - are available for all merchants using Swedbank Pay. By default you receive these files by e-mail, but it is also possible to get them via FTP access. Contact omni.client@swedbankpay.se for further inquiries regarding this. The settlement frequency is defined in the agreement and you will receive a report for each payout and/or invoice. Settlement There are two main alternatives for settlement - either we handle the settlement process for you, or you handle the process yourself : Swedbank Pay handles the settlement process Swedbank Pay handles the settlement process on your behalf, (called “Redovisningsservice”). Swedbank Pay transfers the net amount to you directly. Swedbank Pay Checkout When choosing Swedbank Pay Checkout we always handle the settlement process for you, gathering all your eCommerce payments in one place. Straighforward and time efficient. You handle the settlement process yourself If you will handle the settlement yourself, then Swedbank Pay will send you an invoice with the relevant fees, in addition to the report and transactions lists. Your acquirer will transfer settled funds to you. Balance Report The Balance Report (a .pdf file) specifies the total sales for a specific period, including fees and VAT. The report contains three parts: a payment summary and specifications for sales and for fees. Payment Summary Provides a summary of the Amount sold, Fees and VAT. If Swedbank Pay handles the settlement process, the Transferedamount - shown in the balance report summary is equivalent to the disbursement on the bank statement (the remaining total amount after fees). Sales specification Provides a specification over sales for the given period. The sales total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each sales row specify Quantity, Sum sales and Amount to pay out, the last one is only eligble if Swedbank Pay handles the Settlement process. Fees specification Provides a specification over fees for the given period. The fees total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each fees row specify Quantity (sales), Amount (sales), Unit price, Provision and fee Amount. If you handle the settlement process yourselves you will receive a separat invoice for fees. Transactions List The Transaction List (provided in .xlsx and .xml formats) specifies all transactions for a specific period, including a summary of transactions grouped by payment instrument. Both formats contain the same information, but the xml file is meant for computer processing while the excel workbook is meant for human interaction. The first row contains the name of the Swedbank Pay company (e.g. Swedbank Pay Solutions AB) that the merchant has the contract with, and the balance report number. The header fields contain a summary of the transactions displayed in the body. Header fields Field Type Description Prefix String The Prefix used for transactions, only eligible if merchant uses prefix. Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). ServiceType String The service type of the service used (e.g. Creditcard). Service String The service used (e.g. Creditcard). NoOfDebet Decimal Total number of debit transactions for the given service. NoOfCredit Decimal Total number of credit transactions for the given service. Amount Decimal Total amount for the given service (e.g 100.00). FromDate ISO 8601 The earlistest transaction date, YYYY-MM-DD. ToDate ISO 8601 The latest transaction date, YYYY-MM-DD. Body fields Field Type Description Swedbank Pay Batch Number Decimal A batch number common to all types of transactions processed by PayEx. Transaction Number Decimal A unique identifier of the transaction, can be traced in Swedbank Pay Admin user interface. Order id String A unique identifier of the order, as sent from the merchant to PayEx. Transactions that are related to the same order are associated with this ID. Date Created ISO 8601 Transaction capture date/time. YYYY-MM-DD hh:mm:ss. Date Modified ISO 8601 Transaction settle date/time. YYYY-MM-DD hh:mm:ss. Provider String The service provider (e.g. Babs, Swedbank). Type String The service type of the related transaction (e.g. Creditcard). Amount Decimal Total amount of the related transaction (e.g 100.00). Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). Product Number String A product number, as sent by merchant to PayEx. Description String A textual description of the transaction, as sent by merchant to PayEx. VAT Amount Decimal VAT Amount for the given transaction (e.g 100.00). VAT Percentage Decimal VAT Percentage for the given transaction. Credit Card Batch Number Decimal The reference number from the credit card processor. Reference Decimal The transaction reference from processor. Swedbank Pay Account Number Decimal The Account number given, shown in Swedbank Pay admin. Referenced Transaction Number Decimal Transaction number for the Authoriation transaction for a two-stage transaction or the number of the debit transaction if it is a credit transaction. Sales Channel String The channel through which the transaction was sent to Swedbank Pay (e.g Transaction via eCommerce APIs). Brand String If eligible, Branding information as sent by merchant to PayEx. Point Of Sale String If eligible, POS information as sent by merchant to PayEx. Reconciliation To do the reconciliation, you need to match the information in your system against the information provided by Swedbank Pay in the balance report and transaction list. Below is a sequence diagram detailing the interaction. sequenceDiagram participant SwedbankPay as Swedbank Pay activate Merchant activate SwedbankPay Merchant--&gt;&gt;SwedbankPay: Online payment transactions deactivate Merchant deactivate SwedbankPay activate Merchant SwedbankPay-&gt;&gt;Merchant: Balance Report (PDF-file) note left of Merchant: files are sent by e-mail or file transfer SwedbankPay-&gt;&gt;Merchant: Transaction list (XLSX-file) SwedbankPay-&gt;&gt;Merchant: Transaction list (XML-file) deactivate Merchant There are two ways for you to match the information from your system with the information given in the reconciliation files from Swedbank Pay: You can use information generated by your system (you will have to set a unique payeeReference when you make the transaction), or You can use the transaction number generated by Swedbank Pay (this is called transaction number and is returned from Swedbank Pay after you have created the transaction). A credit card transaction is made when you either make a capture or a reversal. In the input data for making a capture, you will set the payeeReference. The unique value of this field is the same as the field called OrderID in the reconciliation file. { \"transaction\": { \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Reversal\", \"payeeReference\": \"ABC123\" } } When you receive the response from Swedbank Pay, the response will include transaction.number. This is the same as the field called TransactionNo in the reconciliation file. { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1500, \"vatAmount\": 250, \"description\": \"Test Capture\", \"payeeReference\": \"ABC123\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } payeeReference sent to Swedbank Pay is equal to OrderId in the reconciliation file. capture.transaction.number returned from Swedbank Pay is equal to TransactionNo in reconciliation file. Samples The content of the files depends on the type of agreement you have made with Swedbank Pay. For some payment instruments, only option A is available, while for other payment instruments, only option B is available. The sample files can be downloaded below. Option A: Swedbank Pay handles the settlement process PDF Balance Report for Swedbank Pay Checkout PDF Balance Report XLSX Transaction List XML Transaction List Option B: You will handle the settlement process yourself PDF Balance Report XLSX Transaction List XML Transaction List Split Settlement The prefix split is the easy way of doing settlements for companies with multiple sub merchants. With only a few easy steps, you can make the settlement process more efficient with regards to invoicing, payouts and setup for both your sub merchants and yourself. In short, it is a settlement feature where a company with a website or an app can attach specific prefix numbers to sub merchants selling their goods or services through the company. The prefix number is used to match the transactions and the merchant, so the settlement is automatically split between the sub merchants. If you run a site selling tickets to concerts, theatres, sporting events etc., each venue gets its own prefix number. If you run a funeral home, the sub merchants can be everything from flower delivery to charities. What we need from you as a company Send us a KYC form for each sub merchant you want to include. We will also do a KYC check on your sub merchants, providing extra security for you. Give every sub merchant who sells goods/services at your website or in your app a unique prefix number. This needs to be included in the KYC form you send to us. We recommend using the same customer number they have in your system. Attach the prefix number to all the goods/services the sub merchant sells through your website or app, so the goods/services can be matched to the correct merchant in our back office system. A partner agreement is needed for the automatic deduction of revenue cuts and fees. How it works We set up the sub merchant prefix in our systems. The prefix number is added in the subsite field in the API call when you create the payment for the goods or service. The customer selects payment instrument and completes the payment. The payment goes into the client funds account. Swedbank Pay matches the transaction and the merchant using the prefix number. The settlement is split and connected to the correct merchant. Revenue cuts for the super merchant and fees from Swedbank Pay are deducted automatically. Payout to the sub merchant is done. The upsides Since the sub merchants are connected to Swedbank Pay through the super merchant instead of having separate setups, this means that you: Only need one agreement for credit card, Vipps, Swish, MobilePay, invoice and payment gateway. Only need one acquiring agreement. Only need one Vipps/Swish certificate. Can add more payment instruments easily, as it only has to be done once. Can set up new sub merchants quickly, as the only thing needed is a KYC form and a prefix number. This shortens the setup time for both you and us to a matter of hours. The automatic settlement split and deduction of fees and revenue cuts minimizes the work for your accounting department, as you do not have to invoice your sub merchants. The prefix split is available with all the payment instruments we offer on our eCom platform. Good to know With regards to admin functions, we offer a full integration towards our admin system. This way, you do not have to log in to Swedbank Pay Admin to perform these operations. Captures and cancels Captures and cancels are done by the super merchant the same way as any other normal flow. Reversals In cases where you need to do reversals, this will be performed by the super merchant. The reversal amount will be charged from the sub merchants prefix. If the sub merchants balance is 0 (zero), the super merchant will be invoiced. The super merchant will in turn have to invoice this amount to the sub merchant. Updating Payment Menu When the contents of the shopping cart changes or anything else that affects the amount occurs, the paymentorder must be updated and the Payment Menu must be refreshed. info Features that are not described in the previous sections must not be used, although they are available in the API. Flags that can be turned to true must be kept false as described in this standard setup documentation. info Your integration must be resilient to change. Properties, operations, headers, etc., that aren’t understood in any response must be ignored. Don’t expect a specific order of elements. When in doubt, please follow the robustness principle. Back: After Payment",
    "tags": "",
    "url": "/checkout/other-features.html"
  },{
    "title": "Swedbank Pay Payments Vipps Other Features",
    "text": "Settlement and Reconciliation Reconciliation is an important step in an economic transaction. When a payment is reconciled, captured amounts for the payment are matched against the corresponding settlement. The information needed to reconcile captured funds - the balance report and transactions list - are available for all merchants using Swedbank Pay. By default you receive these files by e-mail, but it is also possible to get them via FTP access. Contact omni.client@swedbankpay.se for further inquiries regarding this. The settlement frequency is defined in the agreement and you will receive a report for each payout and/or invoice. Settlement There are two main alternatives for settlement - either we handle the settlement process for you, or you handle the process yourself : Swedbank Pay handles the settlement process Swedbank Pay handles the settlement process on your behalf, (called “Redovisningsservice”). Swedbank Pay transfers the net amount to you directly. Swedbank Pay Checkout When choosing Swedbank Pay Checkout we always handle the settlement process for you, gathering all your eCommerce payments in one place. Straighforward and time efficient. You handle the settlement process yourself If you will handle the settlement yourself, then Swedbank Pay will send you an invoice with the relevant fees, in addition to the report and transactions lists. Your acquirer will transfer settled funds to you. Balance Report The Balance Report (a .pdf file) specifies the total sales for a specific period, including fees and VAT. The report contains three parts: a payment summary and specifications for sales and for fees. Payment Summary Provides a summary of the Amount sold, Fees and VAT. If Swedbank Pay handles the settlement process, the Transferedamount - shown in the balance report summary is equivalent to the disbursement on the bank statement (the remaining total amount after fees). Sales specification Provides a specification over sales for the given period. The sales total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each sales row specify Quantity, Sum sales and Amount to pay out, the last one is only eligble if Swedbank Pay handles the Settlement process. Fees specification Provides a specification over fees for the given period. The fees total is specified per payment area (CreditCard, Invoice) and underlying payment instruments. Each fees row specify Quantity (sales), Amount (sales), Unit price, Provision and fee Amount. If you handle the settlement process yourselves you will receive a separat invoice for fees. Transactions List The Transaction List (provided in .xlsx and .xml formats) specifies all transactions for a specific period, including a summary of transactions grouped by payment instrument. Both formats contain the same information, but the xml file is meant for computer processing while the excel workbook is meant for human interaction. The first row contains the name of the Swedbank Pay company (e.g. Swedbank Pay Solutions AB) that the merchant has the contract with, and the balance report number. The header fields contain a summary of the transactions displayed in the body. Header fields Field Type Description Prefix String The Prefix used for transactions, only eligible if merchant uses prefix. Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). ServiceType String The service type of the service used (e.g. Creditcard). Service String The service used (e.g. Creditcard). NoOfDebet Decimal Total number of debit transactions for the given service. NoOfCredit Decimal Total number of credit transactions for the given service. Amount Decimal Total amount for the given service (e.g 100.00). FromDate ISO 8601 The earlistest transaction date, YYYY-MM-DD. ToDate ISO 8601 The latest transaction date, YYYY-MM-DD. Body fields Field Type Description Swedbank Pay Batch Number Decimal A batch number common to all types of transactions processed by PayEx. Transaction Number Decimal A unique identifier of the transaction, can be traced in Swedbank Pay Admin user interface. Order id String A unique identifier of the order, as sent from the merchant to PayEx. Transactions that are related to the same order are associated with this ID. Date Created ISO 8601 Transaction capture date/time. YYYY-MM-DD hh:mm:ss. Date Modified ISO 8601 Transaction settle date/time. YYYY-MM-DD hh:mm:ss. Provider String The service provider (e.g. Babs, Swedbank). Type String The service type of the related transaction (e.g. Creditcard). Amount Decimal Total amount of the related transaction (e.g 100.00). Currency ISO 4217 Settlement currency (e.g. SEK, NOK, EUR). Product Number String A product number, as sent by merchant to PayEx. Description String A textual description of the transaction, as sent by merchant to PayEx. VAT Amount Decimal VAT Amount for the given transaction (e.g 100.00). VAT Percentage Decimal VAT Percentage for the given transaction. Credit Card Batch Number Decimal The reference number from the credit card processor. Reference Decimal The transaction reference from processor. Swedbank Pay Account Number Decimal The Account number given, shown in Swedbank Pay admin. Referenced Transaction Number Decimal Transaction number for the Authoriation transaction for a two-stage transaction or the number of the debit transaction if it is a credit transaction. Sales Channel String The channel through which the transaction was sent to Swedbank Pay (e.g Transaction via eCommerce APIs). Brand String If eligible, Branding information as sent by merchant to PayEx. Point Of Sale String If eligible, POS information as sent by merchant to PayEx. Reconciliation To do the reconciliation, you need to match the information in your system against the information provided by Swedbank Pay in the balance report and transaction list. Below is a sequence diagram detailing the interaction. sequenceDiagram participant SwedbankPay as Swedbank Pay activate Merchant activate SwedbankPay Merchant--&gt;&gt;SwedbankPay: Online payment transactions deactivate Merchant deactivate SwedbankPay activate Merchant SwedbankPay-&gt;&gt;Merchant: Balance Report (PDF-file) note left of Merchant: files are sent by e-mail or file transfer SwedbankPay-&gt;&gt;Merchant: Transaction list (XLSX-file) SwedbankPay-&gt;&gt;Merchant: Transaction list (XML-file) deactivate Merchant There are two ways for you to match the information from your system with the information given in the reconciliation files from Swedbank Pay: You can use information generated by your system (you will have to set a unique payeeReference when you make the transaction), or You can use the transaction number generated by Swedbank Pay (this is called transaction number and is returned from Swedbank Pay after you have created the transaction). A credit card transaction is made when you either make a capture or a reversal. In the input data for making a capture, you will set the payeeReference. The unique value of this field is the same as the field called OrderID in the reconciliation file. { \"transaction\": { \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Reversal\", \"payeeReference\": \"ABC123\" } } When you receive the response from Swedbank Pay, the response will include transaction.number. This is the same as the field called TransactionNo in the reconciliation file. { \"payment\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"capture\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1500, \"vatAmount\": 250, \"description\": \"Test Capture\", \"payeeReference\": \"ABC123\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } payeeReference sent to Swedbank Pay is equal to OrderId in the reconciliation file. capture.transaction.number returned from Swedbank Pay is equal to TransactionNo in reconciliation file. Samples The content of the files depends on the type of agreement you have made with Swedbank Pay. For some payment instruments, only option A is available, while for other payment instruments, only option B is available. The sample files can be downloaded below. Option A: Swedbank Pay handles the settlement process PDF Balance Report for Swedbank Pay Checkout PDF Balance Report XLSX Transaction List XML Transaction List Option B: You will handle the settlement process yourself PDF Balance Report XLSX Transaction List XML Transaction List Split Settlement The prefix split is the easy way of doing settlements for companies with multiple sub merchants. With only a few easy steps, you can make the settlement process more efficient with regards to invoicing, payouts and setup for both your sub merchants and yourself. In short, it is a settlement feature where a company with a website or an app can attach specific prefix numbers to sub merchants selling their goods or services through the company. The prefix number is used to match the transactions and the merchant, so the settlement is automatically split between the sub merchants. If you run a site selling tickets to concerts, theatres, sporting events etc., each venue gets its own prefix number. If you run a funeral home, the sub merchants can be everything from flower delivery to charities. What we need from you as a company Send us a KYC form for each sub merchant you want to include. We will also do a KYC check on your sub merchants, providing extra security for you. Give every sub merchant who sells goods/services at your website or in your app a unique prefix number. This needs to be included in the KYC form you send to us. We recommend using the same customer number they have in your system. Attach the prefix number to all the goods/services the sub merchant sells through your website or app, so the goods/services can be matched to the correct merchant in our back office system. A partner agreement is needed for the automatic deduction of revenue cuts and fees. How it works We set up the sub merchant prefix in our systems. The prefix number is added in the subsite field in the API call when you create the payment for the goods or service. The customer selects payment instrument and completes the payment. The payment goes into the client funds account. Swedbank Pay matches the transaction and the merchant using the prefix number. The settlement is split and connected to the correct merchant. Revenue cuts for the super merchant and fees from Swedbank Pay are deducted automatically. Payout to the sub merchant is done. The upsides Since the sub merchants are connected to Swedbank Pay through the super merchant instead of having separate setups, this means that you: Only need one agreement for credit card, Vipps, Swish, MobilePay, invoice and payment gateway. Only need one acquiring agreement. Only need one Vipps/Swish certificate. Can add more payment instruments easily, as it only has to be done once. Can set up new sub merchants quickly, as the only thing needed is a KYC form and a prefix number. This shortens the setup time for both you and us to a matter of hours. The automatic settlement split and deduction of fees and revenue cuts minimizes the work for your accounting department, as you do not have to invoice your sub merchants. The prefix split is available with all the payment instruments we offer on our eCom platform. Good to know With regards to admin functions, we offer a full integration towards our admin system. This way, you do not have to log in to Swedbank Pay Admin to perform these operations. Captures and cancels Captures and cancels are done by the super merchant the same way as any other normal flow. Reversals In cases where you need to do reversals, this will be performed by the super merchant. The reversal amount will be charged from the sub merchants prefix. If the sub merchants balance is 0 (zero), the super merchant will be invoiced. The super merchant will in turn have to invoice this amount to the sub merchant. Payment Link The implementation sequence for this scenario is a variant of the purchase sequence. The consumer is not redirected to the Payments directly but will instead receive a payment link via mail/SMS. When the consumer clicks on the link, a payment window opens. Introduction The Payment Link can be implemented for payment instruments listed below, using the Redirect platform and Swedbank Pay hosted payment page. Credit card MobilePay Swish Vipps When the consumer/end-user starts the purchase process in your merchant or webshop site, you need to make a POST request towards Swedbank Pay with your Purchase information. You receive a Payment Link (same as redirect URL) in response. You have to distribute the Payment Link to the consumer through your order system, using channels like e-mail or SMS. info When sending information in e-mail/SMS, it is strongly recommended that you add information about your terms and conditions, including purchase information and price. See recommendations in the next section. When the consumer clicks on the Payment Link, the Swedbank Pay payment page will open, letting the consumer enter the payment details (varying depending on payment instrument) in a secure Swedbank Pay hosted environment. When paying with credit card and if required, Swedbank Pay will handle 3-D Secure authentication. After completion, Swedbank Pay will redirect the browser back to your merchant/webshop site. If callbackURL is set the merchant system will receive a callback from Swedbank Pay, enabling you to make a GET request towards Swedbank Pay with the id of the payment received in the first step, which will return the purchase result. E-mail And SMS Recommendations When you as a merchant sends an e-mail or SMS to the consumer about the Payment Link, it is recommended to include contextual information that help the consumer understand what will happen when clicking on the Payment Link. We recommend that you include following information: The name of the merchant/shop that initiates the payment An understandable product description, describing what kind of service the consumer will pay for. Some order-id (or similar) that exists in the merchant order system. The price and currency. Details about shipping method and expected delivery (if physical goods will be sent to the consumer). Directions to (a link to a page) the merchant’s terms and conditions (such as return policy) and information of how the consumer can contact the merchant. Details informing the consumer that he or she accepts the Terms &amp; Conditions when clicking on the Payment Link. Receipt Recommendations We recommend that you send an e-mail or SMS confirmation with a receipt to the consumer when the payment has been fulfilled. API Requests The API requests depend on the payment instrument you are using when implementing the Payment Link scenario, see purchase flow. One-phase payment instruments will not implement capture, cancellation or reversal. The options you can choose from when creating a payment with key operation set to Purchase are listed below. Screenshots When clicking the payment link, the consumer will be directed to a payment page, similar to the examples below, where payment information can be entered. Options All valid options when posting in a payment with operation Purchase, are described in each payment instrument’s respective API reference. Please see the general sequence diagrams for more information about payments in one-phase (e.g. Swish and credit card with autocapture) and two-phase (e.g. Credit card, MobilePay, Vipps). Authorization When using two-phase flows you reserve the amount with an authorization, you will have to specify that the intent of the purchase is Authorize. The amount will be reserved but not charged. You will later (i.e. when you are ready to ship the purchased products) have to make a Capture or Cancel request. Capture Capture can only be performed on a payment with a successfully authorized transaction. It is possible to do a part-capture where you only capture a smaller amount than the authorized amount. You can later do more captures on the same payment up to the total authorization amount. If you want the credit card to be charged right away, you will have to specify that the intent of the purchase is AutoCapture. The credit card will be charged and you don’t need to do any more financial operations to this purchase. Cancel Cancel can only be done on a authorized transaction. If you do cancel after doing a part-capture you will cancel the difference between the captured amount and the authorized amount. Reversal Reversal can only be done on a payment where there are some captured amount not yet reversed. General When implementing the Payment Link scenario, it is optional to set a callbackURL in the POST request. If callbackURL is set Swedbank Pay will send a request to this URL when the consumer as fulfilled the payment. See the Callback API description here. Purchase flow The sequence diagrams display the high level process of the purchase, from generating a Payment Link to receiving a Callback. This in a generalized flow as well as a specific 3-D Secure enabled credit card scenario. info Please note that the the callback may come either before, after or in the same moment as the consumer are being redirected to the status page at the merchant site when the purchase is fulfilled. Don’t rely on the callback being timed at any specific moment. When dealing with credit card payments, 3-D Secure authentication of the cardholder is an essential topic. There are three alternative outcome of a credit card payment: 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. sequenceDiagram activate Consumer Consumer-&gt;&gt;-MerchantOrderSystem: consumer starts purchase activate MerchantOrderSystem MerchantOrderSystem-&gt;&gt;-Merchant: start purchase process activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST [payment] (operation=PURCHASE) activate SwedbankPay note left of Merchant: First API request SwedbankPay--&gt;&gt;-Merchant: payment resource with payment URL activate Merchant Merchant--&gt;&gt;-MerchantOrderSystem: Payment URL sent to order system activate MerchantOrderSystem MerchantOrderSystem--&gt;&gt;-Consumer: Distribute Payment URL through e-mail/SMS activate Consumer note left of Consumer: Payment Link in e-mail/SMS Consumer-&gt;&gt;-SwedbankPay: Open link and enter payment information activate SwedbankPay opt Card supports 3-D Secure SwedbankPay--&gt;&gt;-Consumer: redirect to IssuingBank activate Consumer Consumer-&gt;&gt;IssuingBank: 3-D Secure authentication process Consumer-&gt;&gt;-SwedbankPay: access authentication page activate SwedbankPay end SwedbankPay--&gt;&gt;-Consumer: redirect to merchant site activate Consumer note left of SwedbankPay: redirect back to merchant Consumer-&gt;&gt;-Merchant: access merchant page activate Merchant Merchant-&gt;&gt;-SwedbankPay: GET [payment] activate SwedbankPay note left of Merchant: Second API request SwedbankPay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Consumer: display purchase result Options after posting a payment If the payment enable a two-phase flow (Authorize), you will need to implement the Capture and Cancel requests. It is possible to “abort” the validity of the Payment Link. See the Abort description here. For reversals, you will need to implement the Reversal request. When implementing the Payment Link scenario, it is optional to set a callbackURL in the POST request. If callbackURL is set Swedbank Pay will send a postback request to this URL when the consumer as fulfilled the payment. See the Callback API description here. Payment Resource The payment resource is central to all payment instruments. All operations that target the payment resource directly produce a response similar to the example seen below. The response given contains all operations that are possible to perform in the current state of the payment. Request GET /psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"payeeInfo\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"urls\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"transactions\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/vipps/core/scripts/client/px.vipps.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;operation=authorize\", \"rel\": \"view-authorization\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/vipps/payments/authorize/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"redirect-authorization\", \"contentType\": \"text/html\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"rel\": \"create-capture\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://api.externalintegration.payex.com/psp/vipps/7e6cdfc3-1276-44e9-9992-7cf4419750e1/paid\", \"rel\": \"paid-payment\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://api.externalintegration.payex.com/psp/vipps/7e6cdfc3-1276-44e9-9992-7cf4419750e1/failed\", \"rel\": \"failed-payment\", \"contentType\": \"application/problem+json\" } ] } Property Type Description payment object The payment object contains information about the specific payment. └➔ id string The relative URI of the payment. └➔ number integer The payment number , useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. └➔ created string The ISO-8601 date of when the payment was created. └➔ updated string The ISO-8601 date of when the payment was updated. └➔ state string Ready , Pending , Failed or Aborted . Indicates the state of the payment. This field is only for status display purposes. To └➔ prices object The prices resource lists the prices related to a specific payment. └➔ prices.id string The relative URI of the current prices resource. └➔ description string(40) A textual description of maximum 40 characters of the purchase. └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like e-mail address, mobile number, customer number etc. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string nb-NO , sv-SE or en-US └➔ urls string The URI to the urls resource where all URIs related to the payment can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment can be retrieved. operations array The array of possible operations to perform └─➔ method string The HTTP method to use when performing the operation. └─➔ href string The target URI to perform the operation against. └─➔ rel string The name of the relation the operation has to the current resource. Operations The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-payment-abort aborts the payment order before any financial transactions are performed. redirect-authorization Contains the URI that is used to redirect the consumer to the Swedbank Pay Payments containing the card authorization UI. view-authorization Contains the JavaScript href that is used to embed the card authorization UI directly on the webshop/merchant site create-capture Creates a capture transaction in order to charge the reserved funds from the consumer. create-cancellation Creates a cancellation transaction that cancels a created, but not yet captured payment. paid-payment Returns the information about a payment that has the status paid. failed-payment Returns the information about a payment that has the status failed. Payment States And Transaction States Both payments and transactions can be in several different states during the course of a purchase. You can find a short description of each state below. Payments ready means that the payment has been created successfully, and is now ready for further transaction operations, like authorization, sale or abort. failed means that something went wrong during the payment process, and no further transactions can be created if the payment is in this state. Examples of possible failures are triggering of anti-fraud protection or if the payer reaches the maximum number of attempts for a given payment. aborted means that the merchant has aborted the payment before the end user has fulfilled the payment process. This is done by calling the PATCH function for abort operations. pending is the state of a payment when a transaction is in an initialized state. See more below. As long as a payment is pending, no further transactions can be done. Transactions ìntialized is the transaction state when something unexpected occured, and it is impossible to determine the exact status of the transaction. An example of this can be a network failure. No further actions can be done on a payment with a transaction in this state. completed means that the transaction has reached its intended purpose. An authorization will be completed when the funds have been authorized, a capture will be completed when the funds have been captured and a reversal will be completed when the payer has been refunded. failed means that the transaction has failed. The state is final for that specific transaction, but given that the payment is operational, it is possible to perform more transactions on the same payment, i.e. retry the authorization with another card. If the payer reaches the maximum amount of retries, the payment itself will be set to failed. awaitingActivity is in use for a selection of payment instruments. A transaction reaches this state when a payer is sent away from Swedbank Pay to do a confirmation or verification. Examples of this can be payment apps like Swish, Vipps or MobilePay, or 3-D Secure verifications for card payments. Create Payment To create a Vipps payment, you perform an HTTP POST against the /psp/vipps/payments resource. An example of a payment creation request is provided below. Each individual property of the JSON document is described in the following section. Use the expand request parameter to get a response that includes one or more expanded sub-resources inlined. Request POST /psp/vipps/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"prices\": [ { \"type\": \"Vipps\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Vipps Test\", \"payerReference\": \"ABtimestamp\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"nb-NO\", \"urls\": { \"hostUrls\": [\"https://example.com\", \"https://example.net\"], \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"paymentUrl\": \"http://example.com/perform-payment\", \"callbackUrl\": \"https://api.externalintegration.payex.com/psp/payment-callback\", \"logoUrl\": \"https://example.com/path/to/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"Postmantimestamp\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" }, \"prefillInfo\": { \"msisdn\": \"+4793000001\" } } } Required Property Type Description ✔︎ payment object The payment object. ✔︎ └➔ operation string Purchase ✔︎ └➔ intent string Authorization ✔︎ └➔ currency string NOK ✔︎ └➔ prices object The prices object. ✔︎ └─➔ type string vipps ✔︎ └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 NOK. ✔︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. ✔︎ └➔ description string(40) A textual description max 40 characters of the purchase.   └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like mobile number, customer number etc. ✔︎ └➔ userAgent string The user agent reference of the consumer’s browser - see user agent] ✔︎ └➔ language string nb-NO, sv-SE or en-US. ✔︎ └➔ urls object The object containing URLs relevant for the payment. ✔︎ └─➔ hostUrls array The array of URIs valid for embedding of Swedbank Pay Hosted Views. ✔︎ └─➔ completeUrl string The URI that Swedbank Pay will redirect back to when the payment page is completed. This does not indicate a successful payment, only that it has reached a completion state. A GET request needs to be performed on the payment to inspect it further.   └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled, either by the payer or by the merchant trough an abort request of the payment.   └─➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the payment menu needs to be loaded, to inspect and act on the current status of the payment.   └─➔ callbackUrl string The URI that Swedbank Pay will perform an HTTP POST request against every time a transaction is created on the payment. See callback for details.   └─➔ logoUrl string The URI that will be used for showing the customer logo. Must be a picture with at most 50px height and 400px width. Require https.   └─➔ termsOfServiceUrl string A URI that contains your terms and conditions for the payment, to be linked on the payment page. Require https. ✔︎ └➔ payeeInfo object The object containing information about the payee. ✔︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by PayEx. ✔︎ └─➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.   └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to PayEx.   └─➔ productCategory strin A product category or number sent in from the payee/merchant. This is not validated by PayEx, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems.   └─➔ prefillInfo string The mobile number that will be pre-filled in the Swedbank Pay Payments. The consumer may change this number in the UI.   └─➔ subsite string(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 72100003079, \"created\": \"2018-09-05T14:18:44.4259255Z\", \"instrument\": \"Vipps\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"NOK\", \"prices\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"amount\": 0, \"description\": \"Vipps Test\", \"payerReference\": \"AB1536157124\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.2.0\", \"userAgent\": \"Mozilla/5.0 weeeeee\", \"language\": \"nb-NO\", \"urls\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeinfo\" }, \"metadata\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/metadata\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/vipps/payments/authorize/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-authorization\" } ] } Purchase Posting a payment (operation Purchase) returns the options of aborting the payment altogether or creating an authorization transaction through the redirect-authorization hyperlink. Request { \"payment\": { \"operation\": \"Purchase\" } } Prices The prices resource lists the prices related to a specific payment. Request GET /psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"prices\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\", \"priceList\": [ { \"type\": \"VISA\", \"amount\": 2350, \"vatAmount\": 0 }, { \"type\": \"MasterCard\", \"amount\": 2350, \"vatAmount\": 0 } ] } } Property Type Description payment string The relative URI of the payment the prices resource belongs to. prices object The prices resource. └➔ id string The relative URI of the current prices resource. └➔ priceList array The array of price objects. Note: Even if you specifiy CreditCard in the input message the system will return all your configured card brands instead when you expan the priceList. └─➔ type string The type of the price object. └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. Prices Object Types Each payment instrument have one or more prices object types. This is most relevant when using card based payments as each type correspond to a card brand or bank respectively. Vipps Payments Type Description Vipps Always Vipps The payeeReference given when creating transactions and payments has some specific processing rules depending on specifications in the contract. It must be unique for every operation, used to ensure exactly-once delivery of a transactional operation from the merchant system. Its length and content validation is dependent on whether the transaction.number or the payeeReference is sent to the acquirer. If you select Option A in the settlement process (Swedbank Pay will handle the settlement), Swedbank Pay will send the transaction.number to the acquirer and the payeeReference may have the format of string(30). If you select Option B in the settlement process (you will handle the settlement yourself), Swedbank Pay will send the payeeReference to the acquirer and it will be limited to the format of string(12) and all characters must be digits. Transactions A payment contains sub-resources in the form of transactions. Most operations performed on a payment ends up as a transaction. The different types of operations that alter the state of the payment by creating a transaction is described below. The transactions resource will list the transactions (one or more) on a specific payment. Request GET /psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"transactions\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\", \"transactionList\": [{ \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Authorization\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test authorization\", \"payeeReference\": \"PR1004\", \"failedReason\": \"\", \"isOperational\": true, \"operations\": [] }] } } Property Type Description payment string The relative URI of the payment this list of transactions belong to. transactions object The transactions object. └➔ id string The relative URI of the current transactions resource. └➔ transactionList array The array of transaction objects. └➔ transactionList[] object The transaction object (described in the transaction resource below). Transaction The transaction resource contains the generic details of a transaction on a specific payment. When a transaction is created it will have one of three states: Initialized - if there is some error where the source is undeterminable (network failure, etc), the transaction will remain Initialized. The corresponding state of the payment order will in this case be set to pending. No further transactions can be created. Completed - if everything went ok the transaction will follow through to completion. Failed - if the transaction has failed (i.e. a denial from the acquiring bank) it is possible to retry (i.e the consumer tries using another credit card) up to a maximum amount of retries (in that case which the payment order gets the state failed as well). Request GET /psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"transaction\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Capture\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": true, \"operations\": [] } } Property Type Description payment string The relative URI of the payment this transaction belongs to. transaction object The transaction object. └➔ id string The relative URI of the current transaction resource. └➔ created string The ISO-8601 date and time of when the transaction was created. └➔ updated string The ISO-8601 date and time of when the transaction was created. └➔ type string Indicates the transaction type. └➔ state string Initialized, Completed or Failed. Indicates the state of the transaction. └➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK. └➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └➔ description string A human readable description of maximum 40 characters of the transaction. └➔ payeeReference string A unique reference for the transaction. └➔ failedReason string The human readable explanation of why the payment failed. └➔ isOperational bool true if the transaction is operational; otherwise false. └➔ operations array The array of operations that are possible to perform on the transaction in its current state. Callback When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform a callback to inform the payee (merchant) about this update. Setting a callbackUrl in the HTTP POST API is optional, but highly recommended. If a payer closes the browser window, a network error or something else happens that prevents the payer from being redirect from Swedbank Pay back to the merchant website, the callback is what ensures that you receive information about what happened with the payment. When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform an asynchronous server-to-server callback to inform the payee (merchant) about this update. Swedbank Pay will make an HTTP POST to the callbackUrl that was specified when the payee (merchant) created the payment. When the callbackUrl receives such a callback, an HTTP GET request must be made on the payment or on the transaction. The retrieved payment or transaction resource will give you the necessary information about the recent change/update. The callback will be retried if it fails. Below are the retry timings, in seconds from the initial transaction time: 30 seconds 60 seconds 360 seconds 432 seconds 864 seconds 1265 seconds The callback is sent from the following IP address: 82.115.146.1 A callback should return a 200 OK response. Payment Instrument Callback { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 222222222 }, \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/&lt;transaction type&gt;/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"number\": 333333333 } } Parameter Description &lt;transaction type&gt; authorizations, captures, cancellations, reversals The sequence diagram below shows the HTTP POST you will receive from Swedbank Pay, and the two GET requests that you make to get the updated status. sequenceDiagram Participant Merchant Participant SwedbankPay as Swedbank Pay activate SwedbankPay SwedbankPay-&gt;&gt;+Merchant: POST &lt;callbackUrl&gt; deactivate SwedbankPay note left of Merchant: Callback by Swedbank Pay Merchant--&gt;&gt;+SwedbankPay: HTTP response Merchant-&gt;&gt;+SwedbankPay: GET creditcard payment deactivate Merchant note left of Merchant: First API request SwedbankPay--&gt;&gt;+Merchant: payment resource deactivate SwedbankPay Problem messages When performing unsuccessful operations, the eCommerce API will respond with a problem message. We generally use the problem message type and status code to identify the nature of the problem. The problem name and description will often help narrow down the specifics of the problem. Error types from Vipps (Init-call) All Vipps error types will have the following URI in front of type: https://api.payex.com/psp/errordetail/vipps/&lt;error-type&gt; Type Status Note VIPPS_ERROR 403 All errors Error types from Vipps (Callback) All Vipps error types will have the following URI in front of type: https://api.payex.com/psp/errordetail/vipps/&lt;error-type&gt; Type Status Note VIPPS_DECLINED 400 Any status that is not YES Error types from Acquirer All Vipps error types will have the following URI in front of type: https://api.payex.com/psp/errordetail/vipps/&lt;error-type&gt; Type Status Note CARD_BLACKLISTED 400   PAYMENT_TOKEN_ERROR 403   CARD_DECLINED 403   ACQUIRER_ERROR 403   ACQUIRER_CARD_BLACKLISTED 403   ACQUIRER_CARD_EXPIRED 403   ACQUIRER_CARD_STOLEN 403   ACQUIRER_INSUFFICIENT_FUNDS 403   ACQUIRER_INVALID_AMOUNT 403   ACQUIRER_POSSIBLE_FRAUD 403   FRAUD_DETECTED 403   BAD_REQUEST 500   INTERNAL_SERVER_ERROR 500   BAD_GATEWAY 502   ACQUIRER_GATEWAY_ERROR 502   ACQUIRER_GATEWAY_TIMEOUT 504   UNKNOWN_ERROR 500   Back: After Payment",
    "tags": "",
    "url": "/payments/vipps/other-features.html"
  },{
    "title": "Payment Link",
    "text": "The implementation sequence for this scenario is a variant of the purchase sequence in a Hosted Payment Pages redirect scenario. The consumer is not redirected to the payment pages directly but will instead receive a payment link via mail/SMS. When the consumer clicks on the link a payment window opens. Introduction The Payment Link can be implemented for Card, MobilePay, Vipps and Swish payments, using the Redirect platform and seamless view. When the consumer starts the purchase process in your merchant/webshop site, you need to make a POST request towards Swedbank Pay with your purchase information. You receive a Payment Link (same as redirect URL) in response. You have to distribute the Payment Link to the customer through your order system, using channels like e-mail or SMS. NOTE: When sending information in e-mail/SMS, it is strongly recommended that you add information about your terms and conditions, including purchase information and price. See recommendations in the next paragraph. When the consumer clicks on the Payment Link, the Swedbank Pay payment page will open, letting the consumer enter the payment details (varying depending on payment instrument) in a secure Swedbank Pay hosted environment. When paying with credit card and if required, Swedbank Pay will handle 3D-secure verification. After completion, Swedbank Pay will redirect the browser back to your merchant/webshop site. If CallbackURL is set the merchant system will receive a callback from Swedbank Pay, enabling you to make a GET request towards Swedbank Pay with the paymentID received in the first step, which will return the purchase result. Recommendations regarding Payment Link in E-mail/SMS When you as a merchant sends an e-mail or SMS to the consumer about the Payment Link, it is recommended to include contextual information that help the consumer understand what will happen when clicking on the Payment Link. We recommend that you include following information: The name of the merchant/shop that initiates the payment An understandable product description, describing what kind of service the consumer will pay for. Some order-id (or similar) that exists in the merchant order system. The price and currency. Details about shipping method and expected delivery (if physical goods will be sent to the consumer). Directions to (a link to a page) the merchant’s terms and conditions (such as return policy) and information of how the consumer can contact the merchant. Details informing the consumer that he or she accepts the Terms&amp;Conditions when clicking on the Payment Link. Recommendations about receipts We recommend that you send an e-mail or SMS confirmation with a receipt to the consumer when the payment has been fulfilled. API requests The API-requests depend on which payment instrument you are using when implementing the Payment Link scenario, see purchase flow. One-phase payment instruments will not implement capture or cancellation. The options available when creating a payment with operation set to Purchase are listed below. The general REST based API model is described WHEREEEEE? Screenshots When clicking the payment link, the consumer will be directed to a payment page, similar to the examples below, where payment information can be entered.",
    "tags": "",
    "url": "/payments/payment-link.html"
  },{
    "title": "Swedbank Pay Checkout – Payment Menu",
    "text": "Payment Menu begins where Checkin left off, letting the payer complete their purchase. Introduction Below, you will se the sequence diagram of the payment menu. Notice that there are two optional ways of performing the payment: Consumer perform payment out of iframe. Consumer perform payment within iframe. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(138, 205, 195, 0.1) activate Payer note left of Payer: Payment Menu Payer -&gt;&gt;+ Merchant: Initiate Purchase deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: POST /psp/paymentorders (paymentUrl, payer) deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel:view-paymentorder deactivate SwedbankPay Merchant --&gt;&gt;- Payer: Display Payment Menu on Merchant Page activate Payer Payer -&gt;&gt; Payer: Initiate Payment Menu Hosted View (open iframe) Payer --&gt;&gt;+ SwedbankPay: Show Payment UI page in iframe deactivate Payer SwedbankPay -&gt;&gt;+ Payer: Do payment logic deactivate SwedbankPay opt Consumer perform payment out of iFrame Payer -&gt;&gt; Payer: Redirect to 3rd party Payer -&gt;&gt;+ 3rdParty: Redirect to 3rdPartyUrl URL deactivate Payer 3rdParty --&gt;&gt;+ Payer: Redirect back to paymentUrl (merchant) deactivate 3rdParty Payer -&gt;&gt; Payer: Initiate Payment Menu Hosted View (open iframe) Payer -&gt;&gt;+ SwedbankPay: Show Payment UI page in iframe deactivate Payer SwedbankPay -&gt;&gt; Payer: Do payment logic end SwedbankPay --&gt;&gt; Payer: Payment status deactivate SwedbankPay alt If payment is completed activate Payer Payer -&gt;&gt; Payer: Event: onPaymentCompleted Payer -&gt;&gt;+ Merchant: Check payment status deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET &lt;paymentorder.id&gt; deactivate Merchant SwedbankPay -&gt;&gt;+ Merchant: rel: paid-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if paid-paymentorder operation exist) activate Payer deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET rel: paid-paymentorder deactivate Merchant SwedbankPay --&gt;&gt; Merchant: Payment Details deactivate SwedbankPay end end opt If payment is failed activate Payer Payer -&gt;&gt; Payer: Event: OnPaymentFailed Payer -&gt;&gt;+ Merchant: Check payment status deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET {paymentorder.id} deactivate Merchant SwedbankPay --&gt;&gt;+ Merchant: rel: failed-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if failed-paymentorder operation exist) activate Payer deactivate Payer Merchant -&gt;&gt;+ SwedbankPay: GET rel: failed-paymentorder deactivate Merchant SwedbankPay --&gt;&gt; Merchant: Payment Details deactivate SwedbankPay end end activate Merchant Merchant --&gt;&gt;- Payer: Show Purchase complete opt PaymentOrder Callback (if callbackUrls is set) activate Payer deactivate Payer SwedbankPay -&gt;&gt; Merchant: POST Payment Callback end end Payment Menu Back End We start by performing a POST request towards the paymentorder resource with the payer information (such as consumerProfileRef) we obtained in the checkin process described above. Remember to read up on our URL resource. info To minimize the risk for a challenge request (Strong Customer Authentication – “SCA”) on card payments, it’s recommended that you add as much data as possible to the riskIndicator object in the request below. Payment Url For our Seamless Views, the property called paymentUrl will be used when the consumer is redirected out of the Seamless View (the iframe). The consumer is redirected out of frame when selecting the payment instrument Vipps or in the 3-D Secure verification for Credit Card Payments. The URL should represent the page of where the Payment Order Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the Seamless View was added to in order to initiate the payment process. info Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment Order as the one that initiated the payment process originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer. Request Request POST /psp/paymentorders HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"paymentorder\": { \"operation\": \"Purchase\", \"currency\": \"SEK\", \"amount\": 1500, \"vatAmount\": 375, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"generateRecurrenceToken\": false, \"restrictedToInstruments\": [\"CreditCard\", \"Invoice\"], \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"paymentUrl\": \"https://example.com/perform-payment\", \"callbackUrl\": \"https://api.example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/termsandconditoons.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"AB832\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\" }, \"payer\": { \"consumerProfileRef\": \"afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"email\": \"olivia.nyhuus@payex.com\", \"msisdn\": \"+4798765432\", \"workPhoneNumber\" : \"+4787654321\", \"homePhoneNumber\" : \"+4776543210\" }, \"orderItems\": [ { \"reference\": \"P1\", \"name\": \"Product1\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"itemUrl\": \"https://example.com/products/123\", \"imageUrl\": \"https://example.com/product123.jpg\", \"description\": \"Product 1 description\", \"discountDescription\": \"Volume discount\", \"quantity\": 4, \"quantityUnit\": \"pcs\", \"unitPrice\": 300, \"discountPrice\": 200, \"vatPercent\": 2500, \"amount\": 1000, \"vatAmount\": 250 }, { \"reference\": \"P2\", \"name\": \"Product2\", \"type\": \"PRODUCT\", \"class\": \"ProductGroup1\", \"description\": \"Product 2 description\", \"quantity\": 1, \"quantityUnit\": \"pcs\", \"unitPrice\": 500, \"vatPercent\": 2500, \"amount\": 500, \"vatAmount\": 125 } ], \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } } } } Required Property Type Description ✔︎︎︎︎︎ paymentorder object The payment order object. ✔︎︎︎︎︎ └➔ operation string The operation that the payment order is supposed to perform. ✔︎︎︎︎︎ └➔ currency string The currency of the payment. ✔︎︎︎︎︎ └➔ amount integer The amount including VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEKand 5000 equals 50.00 SEK. ✔︎︎︎︎︎ └➔ vatAmount integer The amount of VAT in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. ✔︎︎︎︎︎ └➔ description string The description of the payment order. ✔︎︎︎︎︎ └➔ userAgent string The user agent of the payer. ✔︎︎︎︎︎ └➔ language string The language of the payer. ✔︎︎︎︎︎ └➔ generateRecurrenceToken bool Determines if a recurrence token should be generated. A recurrence token is primarily used to enable future recurring payments - with the same token - through server-to-server calls. Default value is false.   └➔ restrictedToInstruments array CreditCard, Invoice, Vipps, Swish and/or CreditAccount. Invoice supports the subtypes PayExFinancingNo, PayExFinancingSe and PayMonthlyInvoiceSe, separated by a dash, e.g.; Invoice-PayExFinancingNo. Limits the options available to the consumer in the payment menu. Default value is all supported payment instruments. Usage of this property requires an agreement with Swedbank Pay. ✔︎︎︎︎︎ └➔ urls object The urls object, containing the URLs relevant for the payment order. ✔︎︎︎︎︎ └─➔ hostUrls array The array of URIs valid for embedding of Swedbank Pay Hosted Views. ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment order to inspect it further.   └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled, either by the payer or by the merchant trough an abort request of the payment or paymentorder.   └─➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the payment menu needs to be loaded, to inspect and act on the current status of the payment. ✔︎︎︎︎︎ └─➔ callbackUrl string The URI to the API endpoint receiving POST requests on transaction activity related to the payment order. ✔︎︎︎︎︎ └─➔ termsOfServiceUrl string The URI to the merchant terms of service document the payer must accept in order to complete the payment. This is not the Swedbank Pay Terms of Service. Requires https. ✔︎︎︎︎︎ └➔ payeeInfo string The payeeInfo object, containing information about the payee. ✔︎︎︎︎︎ └─➔ payeeId string The ID of the payee, usually the merchant ID. ✔︎︎︎︎︎ └─➔ payeeReference string(30) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.   └─➔ payeeName string The name of the payee, usually the name of the merchant.   └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems.   └─➔ subsite String(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used.   └➔ payer object The payer object containing information about the payer relevant for the payment order. ︎︎︎ └─➔ consumerProfileRef string The consumer profile reference as obtained through initiating a consumer session.   └➔ orderItems array The array of items being purchased with the order. Used to print on invoices if the payer chooses to pay with invoice, among other things ✔︎︎︎︎︎ └─➔ reference string A reference that identifies the order item. ✔︎︎︎︎︎ └─➔ name string The name of the order item. ✔︎︎︎︎︎ └─➔ type string PRODUCT, SERVICE, SHIPPING_FEE, PAYMENT_FEE, DISCOUNT, VALUE_CODE or OTHER. The type of the order item. ✔︎︎︎︎︎ └─➔ class string The classification of the order item. Can be used for assigning the order item to a specific product category, such as MobilePhone. Note that class cannot contain spaces. Swedbank Pay may use this field for statistics.   └─➔ itemUrl string The URL to a page that can display the purchased item, product or similar. ︎︎︎ └─➔ imageUrl string The URL to an image of the order item.   └─➔ description string The human readable description of the order item.   └─➔ discountDescription string The human readable description of the possible discount. ✔︎︎︎︎︎ └─➔ quantity integer The 4 decimal precision quantity of order items being purchased. ✔︎︎︎︎︎ └─➔ quantityUnit string The unit of the quantity, such as pcs, grams, or similar. This is a free-text field and is used for your own book keeping. ✔︎︎︎︎︎ └─➔ unitPrice integer The price per unit of order item, including VAT.   └─➔ discountPrice integer If the order item is purchased at a discounted price. This property should contain that price, including VAT. ✔︎︎︎︎︎ └─➔ vatPercent integer The percent value of the VAT multiplied by 100, so 25% becomes 2500. ✔︎︎︎︎︎ └─➔ amount integer The total amount including VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK. ✔︎︎︎︎︎ └─➔ vatAmount integer The total amount of VAT to be paid for the specified quantity of this order item, in the lowest monetary unit of the currency. E.g. 10000 equals 100.00 SEK and 5000 equals 50.00 SEK.   └➔ riskIndicator array This optional array consist of information that helps verifying the payer. Providing these fields decreases the likelyhood of having to promt for 3-D Secure authenticaiton of the payer when they are authenticating the purchacse.   └─➔ deliveryEmailAdress string For electronic delivery, the email address to which the merchandise was delivered. Providing this field when appropriate decreases the likelyhood of a 3-D Secure authentication for the payer.   └─➔ deliveryTimeFrameIndicator string Indicates the merchandise delivery timeframe. 01 (Electronic Delivery) 02 (Same day shipping) 03 (Overnight shipping) 04 (Two-day or more shipping)   └─➔ preOrderDate string For a pre-ordered purchase. The expected date that the merchandise will be available. Format: YYYYMMDD   └─➔ preOrderPurchaseIndicator string Indicates whether the payer is placing an order for merchandise with a future availability or release date. 01 (Merchandise available) 02 (Future availability)   └─➔ shipIndicator string Indicates shipping method chosen for the transaction. 01 (Ship to cardholder’s billing address) 02 (Ship to another verified address on file with merchant)03 (Ship to address that is different than cardholder’s billing address)04 (Ship to Store / Pick-up at local store. Store address shall be populated in shipping address fields)05 (Digital goods, includes online services, electronic giftcards and redemption codes) 06 (Travel and Event tickets, not shipped) 07 (Other, e.g. gaming, digital service)   └─➔ giftCardPurchase bool true if this is a purchase of a gift card.   └─➔ reOrderPurchaseIndicator string Indicates whether the payer is placing an order for merchandise with a future availability or release date. 01 (Merchandise available) 02 (Future availability)   └➔ pickUpAddress object If shipIndicator set to 04, then prefill this with the payers pickUpAddress of the purchase to decrease the risk factor of the purchase.   └─➔ name string If shipIndicator set to 04, then prefill this with the payers name of the purchase to decrease the risk factor of the purchase.   └─➔ streetAddress string If shipIndicator set to 04, then prefill this with the payers streetAddress of the purchase to decrease the risk factor of the purchase.   └─➔ coAddress string If shipIndicator set to 04, then prefill this with the payers coAddress of the purchase to decrease the risk factor of the purchase.   └─➔ city string If shipIndicator set to 04, then prefill this with the payers city of the purchase to decrease the risk factor of the purchase.   └─➔ zipCode string If shipIndicator set to 04, then prefill this with the payers zipCode of the purchase to decrease the risk factor of the purchase.   └─➔ countryCode string If shipIndicator set to 04, then prefill this with the payers countryCode of the purchase to decrease the risk factor of the purchase. Response The response back should look something like this (abbreviated for brevity): Response HTTP/1.1 201 Created Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\" }, \"operations\": [ { \"href\": \"https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;culture=sv-SE\", \"rel\": \"view-paymentorder\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } Property Type Description paymentorder object The payment order object. └➔ id string The relative URI to the payment order. operations array The array of possible operations to perform, given the state of the payment order. The paymentorder object is abbreviated since it’s just the id and operations we are interested in. Store the id of the Payment Order in your system to look up status on the completed payment later. Then find the view-paymentorder operation and embed its href in a &lt;script&gt; element. That script will then load the Seamless View for the Payment Menu. We will look into how to hook that up next. info orderReference must be sent as a part of the POST request to paymentorders and must represent the order ID of the webshop or merchant website. Payment Menu Front End To load the payment menu from the JavaScript URL obtained in the back end API response, it needs to be set as a script element’s src attribute. You can cause a page reload and do this with static HTML or you can avoid the page refresh by invoking the POST to create the payment order through Ajax and then create the script element with JavaScript, all inside the event handler for onConsumerIdentified. The HTML code will be unchanged in this example. JavaScript var request = new XMLHttpRequest(); request.addEventListener('load', function () { // We will assume that our own backend returns the // exact same as what SwedbankPay returns. response = JSON.parse(this.responseText); var script = document.createElement('script'); // This assumes the operations from the response of the POST of the // payment order is returned verbatim from the server to the Ajax: var operation = response.operations.find(function (o) { return o.rel === 'view-consumer-identification'; }); script.setAttribute('src', operation.href); script.onload = function () { payex.hostedView.consumer({ // The container specifies which id the script will look for // to host the checkin component container: 'checkin', onConsumerIdentified: function onConsumerIdentified(consumerIdentifiedEvent) { // When the consumer is identified, we need to perform an AJAX request // to our server to forward the consumerProfileRef in a server-to-server // POST request to the Payment Orders resource in order to initialize // the Payment Menu. var request = new XMLHttpRequest(); request.addEventListener('load', function () { response = JSON.parse(this.responseText); // This is identical to how we get the 'view-consumer-identification' // script from the check-in. var script = document.createElement('script'); var operation = response.operations.find(function (o) { return o.rel === 'view-paymentorder'; }); script.setAttribute('src', operation.href); script.onload = function () { // When the 'view-paymentorder' script is loaded, we can initialize the // Payment Menu inside our 'payment-menu' container. payex.hostedView.paymentMenu({ container: 'payment-menu', culture: 'sv-SE' }).open(); }; // Append the Payment Menu script to the &lt;head&gt; var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Like before, you should replace the address here with // your own endpoint. request.open('POST', '&lt;Your-Backend-Endpoint-Here&gt;', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // In this example, we send the entire Consumer Identified Event Argument // Object as JSON to the server, as it contains the consumerProfileRef. request.send(JSON.stringify(consumerIdentifiedEvent)); }, onShippingDetailsAvailable: function onShippingDetailsAvailable(shippingDetailsAvailableEvent) { console.log(shippingDetailsAvailableEvent); } }).open(); }; // Appending the script to the head var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Place in your own API endpoint here. request.open('POST', '&lt;Your-Backend-Endpoint-Here&gt;', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // We send in the previously mentioned request here to the checkin endpoint. request.send(JSON.stringify({ operation: 'initiate-consumer-session', language: 'sv-SE', shippingAddressRestrictedToCountryCodes : ['NO', 'SE'] })); This should bring up the Payment Menu in a Seamless View, looking like this: When the consumer completes the payment, the Payment Menu script will be signaled and a full redirect to the completeUrl sent in with the Payment Order will be performed. When the completeUrl on your server is hit, you can inspect the status on the stored paymentorder.id on the server, and then perform capture. If the payment is a Sale or one-phase purchase, it will be automatically captured. A third scenario is if the goods are sent physically to the payer; then you should await capture until after the goods have been sent. You may open and close the payment menu using .open() and .close() functions. You can also invoke .refresh() to update the Payment Menu after any changes to the order. Now that you have completed the Payment Menu integration, you can move on to finalizing the payment in the After Payment section. Back: Checkin Next: Capture",
    "tags": "",
    "url": "/checkout/payment-menu.html"
  },{
    "title": "Public Migration Key",
    "text": "In order to send sensitive credit card data to Swedbank Pay, you need to use our Public Migration Key to encrypt the data in transmission. Contact our support at support.ecom@payex.com for more information regarding this procedure. Key size: 4096 bits RealName: SwedbankPay UserID: SwedbankPay &lt;support.ecom@payex.com&gt; Fingerprint: 4725 70B8 16C8 B0C8 835D FCFC 1633 7829 266A 0373 Key ID: 1633 7829 266A 0373 To encrypt files with Swedbank Pay’s Public Migration Key, you need copy and paste it from below and save it to a file called SwedbankPay.key. Public Key -----BEGIN PGP PUBLIC KEY BLOCK----- mQINBF46XsgBEACh1Yz2neopGj1UdGC+jDW+Cspq126X58EK1tWdo6mv3wpzN5GB nb9iQVg68oyUSUWiGiezmqVkkoUmPNLsJo6K95eurte+zoKGhM4b2iWeuZj/4V/Q EgnRLYWgiZKNJvZ6wONw3oRayuHAqb38RkfEv6oVG8+Xj2ZmkV7azI34WjCvf8Ba G1SzTUNXnYWUc2cYJ+gQrggfliL2w3HkevuLBtXfthFobVqhI/0WUn6mBPLWJt3Z 4ydGTu+xUDcdAVYJHJblQ4wRhjoVtHgsd8gZerpO2Ol8MDvnfc1HRqzFg2bYkg1X Hu9smqb8CcH+qeCHhA9vzpKM95qVkXLkugyGRZ01kqnfWrtx1OzrBpEVFyN3LqxC 4TL2YrUGb312MFHiRR2aqPTd9GLKMxBhU+Ofcqs/vN10Gc4s1OsW2vNdnJ/3ENhm 7tpfZ6CcmbuXQLhQmjaBBV0vYfIT0CU0ZqyNLS/Z1vh1JVUIIuEvaCiNxJJqnCRp vu532d9FV6GygeBpAAbrhiM3+r+0xC36AquX+4/rtmgsQ24suTTb7+TJtB/2g9P9 3OVFdMGG5m+iU6g9oehC89miLNBinEQSvZkKffxs1g+DdskWKkhOCe07PWbuatvQ x0OLGc3nKuys886Tm//KEmIuDmZmDLEqIXqNIYarFMG7j7fuB3nAy4Gp2QARAQAB tCRTd2VkYmFua1BheSA8c3VwcG9ydC5lY29tQHBheWV4LmNvbT6JAk4EEwEIADgW IQRHJXC4FsiwyINd/PwWM3gpJmoDcwUCXjpeyAIbAwULCQgHAgYVCgkICwIEFgID AQIeAQIXgAAKCRAWM3gpJmoDcycKD/4rJbtDc9eRtLt6Iw6DrXaCHMZM8XcPvqcL MKDn2TP2QLybJUhQMnx8ToCaeR7O53uG1DaI3W5swA9iT8gW1IDtH3yl9ALkoB2O 7bKI2kf9Lb4pT83sNQdcsgR8qpcVH2+MXZ0ytoPhMtcPbW7J8C2SQceziRJ73iOK B3u0zPU0LBZy8r96AhTesoYX6CdYpeDVoo19HpL6qlTuxx3qV5ZVjvYer4aFwc9e 5Mev9DnsI63tM4Vk2kJJozFyTovzhWMUCot6TOAzPrlAqxwYPan0UaD/96k6Yp3m riXgkbIXqtFFKFLn5TgI1AQrdLyw4nfe2Q8Pcr1KXcM8qpW0e331HwhJSZrZR/j3 44Fmr5naYJurdjd9fk+czkIoyklwnnpRuRfove6DSYHIYu9M3jpeSc+C5jrtmwwe wrHPJAgYVqi/hP98CPOmyK5+R/l4cPQhE3VLVoM++AdkejD4JXcgbSu/xsAu8CW3 uJKr/PefUAasJI1ki/+opIaJwyzrY9t30Vdq1uN4yQLSeAO0jS6+7bYThjs9u0VG ATBACuCHXreJGsGpkN6TU2HjxlbeG+v09oABc5W+/jEIx+V46quG+neu1rg2V5Zs /nwo1kMMiwBLwEdXGFzQmzVAjWQVThffvkcy5WWR86xsDG3b2Rfg9bkKcXoDG1RT Tj1G/lQmq7kCDQReOl7IARAAvh5DpnSVH+FQr3l2ujGtJfeP40hCp860vIk3oJi3 c0uVumeG1dl0z3uZGGGnKy5MTfiNTK4iQmd1bOuSX/muoLxvHY94Vb6n+1ZzWyPZ 85SsOsmJMyrYmLW2TiXAbqH/9HJ7N4kxwkXUtRFJhnGgEIIH0ZX3tzteAFaONCBw OGR9+WWH7KzZT+Pqj8sfCJRA4q0WcAxAdgYZxP/2VG7iFl9sB3meBvqDzpUGCrlq 9Q/r8aSrlVd/VKbd5SwLPd8TWdOVKto41gr/BvvANh9CNSOAEUNkUiQOTBv2U7Zt wkPJST199i+WbrEIUlZVFYU43KG9bRb5q0paq1ToXpUv+mcm2zdVRMP2bk8nJtxL Xs9S60jLeSBa6J68fo16RodfhCrIoTahIZVZaOOe015qxZpAlg3KRmG1gLCPygAE TkNXQ2NpmN3Q1Iq16rDalKmVND6/D2Wmx0BG9/F05ufyqAnEgrIYTGUiHtGS4SLu psmXOFILuX9X5inZKDILhmhE6Z9nI2tKpptDxBOK2R4hvZBlzXaNMdR42gKPma5S gheLHA+eknRxUtR6/C6iyjb/Z7bqFT7eP2/mCsNFLKkWjy0NtWvM97f8/f1UySPn yGnSsR/cjl3iljThIjx0iSV8+HoFK5m167a3Ft0ulTcd4wmM2Gk3pzMC4yjzKTGz /8MAEQEAAYkCNgQYAQgAIBYhBEclcLgWyLDIg138/BYzeCkmagNzBQJeOl7IAhsM AAoJEBYzeCkmagNzZD8P/ArC4M7oaK5ty9Sn5FSply1clG0AVqEtBU5qoOMaWPUZ gcYjrtz7bCT7sWpA2jB+ghyocmRbhHfyA1VlmSVzDH5WOm8b2bKolatlXWEKzxhI Y/FpNy3mI1WGVV4fn1Hg06Mt5Jbuf+TdkgTjMzpiJkJu24HrWPvCiVOhMZQqkZT9 Qfbb4XxK3/vv3j4haC43xHzgMwIvZ0qxDdRhPQRybIch2WodVx6IAcNCq9I73+Q5 tRxk29tNSLptZk3u6NB775MaJTXi8y+laRI93q8983GSqEJ5CeVuVpeHkTa+K87V nA/QV/ocM/NurB1O5U7uSz+O3Jy5KZkza085NQath+pguETviXJncBdKCt4hcj2n vCL6VvDIlpEHUWQPqxjKgq6Aywnx33qSEr9RS+U4jClB809o9AaBe4DkbgWrTIxT p3bU2qSEphZ8Udj1gN+GSkq5R2KRr2A7KJ5xUVkPlYiBhIKqRm6E/woYncS/iWy7 leIbChSz+CL2HAm2+dQ+/mthKIbfJlef6Cc3mGWnTDPgizsoCim2xbaOMDCx6Y2U 75tMiPBo88ypQCRrWenRUNCMdCM8n2QmlgCj76U9WxrQLER/Z6LwgKrlpC58zZ7H 94fPv+XRrJ3AWQW6QlqGd2s9XDrBE9riGWCOcG6uaVoq1rPnBSeRi3dnJYeK02ZO =9U50 -----END PGP PUBLIC KEY BLOCK----- To encrypt files with Swedbank Pay’s Public Migration Key, you must import it with the following command: Import Key gpg2 --import SwedbankPay.key After this is imported, you should verify the key with comparing the fingerprint on key, with the fingerprint on this information site. If this is a match, you should mark the key as trusted with the following command: Trust Key gpg2 --edit-key SwedbankPay Select trust and 5 You can now encrypt files with Swedbank Pay’s Public Migration Key with the following command: Encrypt File gpg2 --armor --encrypt -r SwedbankPay CARDDATA.csv When the above command has executed, the gpg tool will have created a file named CARDDATA.csv.asc, which contains the encrypted data.",
    "tags": "",
    "url": "/resources/public-migration-key.html"
  },{
    "title": "Swedbank Pay Payments Vipps Redirect",
    "text": "Vipps Payments is a two-phase payment instrument supported by the major Norwegian banks. In the redirect scenario, Swedbank Pay receives a mobile number (msisdn) from the payer through Swedbank Pay Payments. Swedbank Pay performs a payment that the payer must confirm through the Vipps mobile app. Introduction When the payer starts the purchase process, you make a POST request towards Swedbank Pay with the collected Purchase information. This will generate a payment object with a unique paymentID. You will receive a Redirect URL to a hosted page. You need to redirect the payer to the Redirect payment where the payer must push the payment button. This triggers a POST towards Swedbank Pay. The payer is redirected to a Vipps payment page where he or she is prompted to enter their mobile number. Swedbank Pay handles the dialogue with Vipps and the consumer confirms the purchase in the Vipps app. To receive the state of the transaction you need to do a GET request containing the paymentID generated in the first step. You redirect the payer to collect the payer’s mobile number. Purchase flow The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The links will take you directly to the API description for the specific request. sequenceDiagram Browser-&gt;&gt;Merchant: start purchase (pay with VIPPS) activate Merchant Merchant-&gt;&gt;SwedbankPay: POST &lt;Create Vipps payment&gt; note left of Merchant: First API request activate SwedbankPay SwedbankPay--&gt;&gt;Merchant: payment resource deactivate SwedbankPay Merchant--&gt;&gt;Browser: Redirect to payment page note left of Browser:redirect to PayEx Browser--&gt;&gt;SwedbankPay: enter mobile number activate SwedbankPay SwedbankPay--&gt;&gt;Vipps_API: Initialize Vipps payment activate Vipps_API Vipps_API--&gt;&gt;SwedbankPay: response SwedbankPay--&gt;&gt;Browser: Authorization response (State=Pending) note left of Browser: check your phone deactivate Merchant Vipps_API--&gt;&gt;Vipps_App: Confirm Payment UI Vipps_App--&gt;&gt;Vipps_App: Confirmation Dialogue Vipps_App--&gt;&gt;Vipps_API: Confirmation Vipps_API--&gt;&gt;SwedbankPay: make payment activate SwedbankPay SwedbankPay--&gt;&gt;SwedbankPay: execute payment SwedbankPay--&gt;&gt;Vipps_API: response deactivate SwedbankPay deactivate Vipps_API SwedbankPay--&gt;&gt;SwedbankPay: authorize result SwedbankPay--&gt;&gt;Browser: authorize result Browser--&gt;&gt;Merchant: Redirect to merchant note left of Browser: Redirect to merchant activate Merchant SwedbankPay--&gt;&gt;Merchant: Payment Callback Merchant--&gt;&gt;SwedbankPay: GET &lt;Vipps payments&gt; note left of Merchant: Second API request SwedbankPay--&gt;&gt;Merchant: Payment resource deactivate SwedbankPay Merchant--&gt;&gt;Browser: Display authorize result deactivate Merchant Intent Authorization (two-phase): The intent of the payment identifies how and when the charge will be effectuated. This determines the type of transaction used during the payment process. The intent of a Vipps purchase is always Authorization. The amount will be reserved but not charged. You will later (i.e. if a physical product, when you are ready to ship the purchased products) have to make a Capture or Cancel request. General link Defining callbackUrl: When implementing a scenario, it is strongly recommended to set a callbackUrl in the POST request. If callbackUrl is set, Swedbank Pay will send a POST request to this URL when the consumer has fulfilled the payment. See the Callback API description for more information. Operations The API requests are displayed in the purchase flow. You can create a Vipps payment with the operation value set to Purchase. See the Purchase example below. Purchase A Purchase payment is a straightforward way to charge the the payer. It is followed up by posting a capture, cancellation or reversal transaction. Request POST /psp/vipps/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"prices\": [ { \"type\": \"Vipps\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"userAgent\": \"Mozilla/5.0...\", \"pageStripdown\": true, \"language\": \"nb-NO\", \"urls\": { \"hostUrls\": [ \"https://example.net\" ], \"completeUrl\": \"https://example.net/payment-completed\", \"cancelUrl\": \"https://example.net/payment-canceled\", \"callbackUrl\": \"https://example.net/payment-callback\", \"logoUrl\": \"https://example.net/payment-logo.png\", \"termsOfServiceUrl\": \"https://example.net/payment-terms.pdf\", \"paymentUrl\": \"https://example.net/payment-cart\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\" }, \"prefillInfo\": { \"msisdn\": \"+4792345678\" } } } Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"instrument\": \"Vipps\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"transactions\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"reversals\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" }, \"urls\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"settings\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" } }, \"operations\": [ { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/vipps/payments/ec2a9b09-601a-42ae-8e33-a5737e1cf177/authorizations\", \"rel\": \"create-authorization\" }, { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/vipps/payments/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"update-payment-abort\" }, { \"method\": \"GET\", \"href\": \"https://api.externalintegration.payex.com/vipps/payments/authorize/8fb05a835f2fc227dc7bca9abaf649b919ba8a572deb448bff543dd5806dacb7\", \"rel\": \"redirect-authorization\" } ] } Required Property Type Description ✔︎︎︎︎︎ payment object The payment object contains information about the specific payment. ✔︎︎︎︎︎ └➔ operation string The operation that the payment is supposed to perform. The [Purchase][purchase] operation is used in our example. ✔︎︎︎︎︎ └➔ intent string Authorization. Reserves the amount, and is followed by a cancellation or capture of funds. ✔︎︎︎︎︎ └➔ currency string NOK ✔︎︎︎︎︎ └➔ prices object The prices resource lists the prices related to a specific payment. ✔︎︎︎︎︎ └─➔ type string   ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK 5000 = 50.00 NOK. ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.   └➔ payerReference string The reference to the payer (consumer/end user) from the merchant system. E.g mobile number, customer number etc. ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - [see user agent definition][user-agent-definition] ✔︎︎︎︎︎ └➔ language string nb-NO ✔︎︎︎︎︎ └➔ urls object The urls resource lists urls that redirects users to relevant sites. ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further.   └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with paymentUrl; only cancelUrl or paymentUrl can be used, not both.   └─➔ callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See [callback][callback] for details. ✔︎︎︎︎︎ └➔ payeeInfo object The payeeInfo contains information about the payee. ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. ✔︎︎︎︎︎ └─➔ payeeReference string(50*) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See [payeeReference][payee-reference] for details.   └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.   └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference String(50) The order reference should reflect the order reference found in the merchant’s systems.   └─➔ subsite String(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used. Authorizations The authorizations resource contains information about the authorization transactions made on a specific payment. Request HTTP/1.1 200 OK Content-Type: application/json GET /psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177 HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;MerchantToken&gt; Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"authorization\": { \"vippsTransactionId\": \"5619328800\", \"msisdn\": \"+47xxxxxxxx\", \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"transaction\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2018-09-05T15:01:39.8658084Z\", \"updated\": \"2018-09-05T15:01:42.2119509Z\", \"type\": \"Authorization\", \"state\": \"Completed\", \"number\": 72100003090, \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Vipps Test\", \"payeeReference\": \"Postman1536157124\", \"isOperational\": false, \"operations\": [] } } } Property Type Description   ✔︎︎︎︎︎ payment string The relative URI of the payment this authorization transactions resource belongs to. ✔︎︎︎︎︎ └➔ authorizations.id string The relative URI of the current authorization transactions resource. ✔︎︎︎︎︎ └➔ authorizations.authorizationList array The array of authorization transaction objects. ✔︎︎︎︎︎ └➔ authorizations.authorizationList[] object The authorization transaction object described in the authorization resource below.         Back: Introduction Next: Implement Seamless view",
    "tags": "",
    "url": "/payments/vipps/redirect.html"
  },{
    "title": "Swedbank Pay MobilePay Online Payments – Redirect",
    "text": "MobilePay Online Payments is a two-phase payment instrument which can be implemented by the supported redirect scenario. Swedbank Pay receives the MobilePay details from the payer through Swedbank Pay Payments. The payment will then be performed by Swedbank Pay and confirmed by the payer through the MobilePay app. Introduction When you have prepared your merchant/webshop site, you make a POST request towards Swedbank Pay with your Purchase information. You will receive a Redirect URL, leading to a secure Swedbank Pay hosted environment, in response. You need to redirect the browser of the end-user/consumer to that URL so that the user may enter their MobilePay details. When the payment is completed, Swedbank Pay will redirect the browser back to your merchant/webshop site. Finally you need to make a GET request towards Swedbank Pay with the paymentID received in the first step, which will return the purchase result. API Requests The API requests are displayed in the purchase flow. The options you can choose from when creating a payment with key operation set to value Purchase are listed below. Intent Authorization (two-phase): The intent of a MobilePay Online purchase is always Authorization. The amount will be reserved but not charged. You will later (i.e. if a physical product, when you are ready to ship the purchased products) have to make a Capture or Cancel request. General link Defining callbackUrl: When implementing a scenario, it is strongly recommended to set a callbackUrl in the POST request. If callbackUrl is set, Swedbank Pay will send a POST request to this URL when the consumer has fulfilled the payment. Purchase flow The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The links will take you directly to the API description for the specific request. The diagram also shows in high level, the sequence of the process of a complete purchase. sequenceDiagram participant Consumer participant Merchant participant SwedbankPay as Swedbank Pay participant MobilePay_API as MobilePay API participant MobilePay_App as MobilePay App Consumer-&gt;&gt;Merchant: start purchase (pay with MobilePay) activate Merchant Merchant-&gt;&gt;SwedbankPay: POST &lt;Create MobilePay Online payment&gt; note left of Merchant: First API request activate SwedbankPay SwedbankPay--&gt;&gt;Merchant: payment resource deactivate SwedbankPay SwedbankPay --&gt;&gt; SwedbankPay: Create payment Merchant--&gt;&gt;Consumer: Redirect to payment page note left of Consumer: redirect to MobilePay Consumer--&gt;&gt;SwedbankPay: enter mobile number activate SwedbankPay SwedbankPay--&gt;&gt;MobilePay_API: Initialize MobilePay Online payment activate MobilePay_API MobilePay_API--&gt;&gt;SwedbankPay: response SwedbankPay--&gt;&gt;Consumer: Authorization response (State=Pending) note left of Consumer: check your phone deactivate Merchant MobilePay_API--&gt;&gt;MobilePay_App: Confirm Payment UI MobilePay_App--&gt;&gt;MobilePay_App: Confirmation Dialogue MobilePay_App--&gt;&gt;MobilePay_API: Confirmation MobilePay_API--&gt;&gt;SwedbankPay: make payment activate SwedbankPay SwedbankPay--&gt;&gt;SwedbankPay: execute payment SwedbankPay--&gt;&gt;MobilePay_API: response deactivate SwedbankPay deactivate MobilePay_API SwedbankPay--&gt;&gt;SwedbankPay: authorize result SwedbankPay--&gt;&gt;Consumer: authorize result Consumer--&gt;&gt;Merchant: Redirect to merchant note left of Consumer: Redirect to merchant activate Merchant SwedbankPay--&gt;&gt;Merchant: Payment Callback Merchant--&gt;&gt;SwedbankPay: GET &lt;MobilePay payments&gt; note left of Merchant: Second API request SwedbankPay--&gt;&gt;Merchant: Payment resource deactivate SwedbankPay Merchant--&gt;&gt;Consumer: Display authorize result deactivate Merchant Purchase Request POST /psp/mobilepay/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"DKK\", \"prices\": [ { \"type\": \"Visa\", \"amount\": 1500, \"vatAmount\": 0, \"FeeAmount\": 5 }, { \"type\": \"MasterCard\", \"amount\": 1500, \"vatAmount\": 0, \"FeeAmount\": 10 } ], \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"da-DK\", \"urls\": { \"hostUrls\": [\"https://example.com\", \"https://example.net\"], \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"callbackUrl\": \"http://example.com/payment-callback\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" }, \"prefillInfo\": { \"msisdn\": \"+4522222222\" } }, \"mobilepay\": { \"shoplogoUrl\": \"https://example.com/shop-logo.png\" } } Required Property Data type Description ✔︎︎︎︎︎ payment object The payment object. ✔︎︎︎︎︎ └➔ operation string Purchase ✔︎︎︎︎︎ └➔ intent string Authorization ✔︎︎︎︎︎ └➔ currency string NOK, SEK, DKK, USD or EUR. ✔︎︎︎︎︎ └➔ prices object The prices object. ✔︎︎︎︎︎ └─➔ type string Visa (for card type Visa), MC (for card type Mastercard) ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 DKK, 5000 = 50.00 DKK. ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant.   └─➔ feeAmount integer If the amount given includes Fee, this may be displayed for the user in the payment page (redirect only). ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.   └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like mobile number, customer number etc. ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - [see user agent definition][user-agent] ✔︎︎︎︎︎ └➔ language string fi-FI, da-DK or en-US. ✔︎︎︎︎︎ └➔ urls object The URLs object containing the urls used for this payment. ✔︎︎︎︎︎ └─➔ completeUrl string The URI that Swedbank Pay will redirect back to when the payment page is completed. This does not indicate a successful payment, only that it has reached a completion state. A GET request needs to be performed on the payment to inspect it further. ✔︎︎︎︎︎ └─➔ cancelUrl string The URI that Swedbank Pay will redirect back to when the user presses the cancel button in the payment page.   └─➔ callbackUrl string The URI that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See [callback][callback-reference] for details. ✔︎︎︎︎︎ └➔ payeeInfo object This object contains the identificators of the payee of this payment. ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. ✔︎︎︎︎︎ └─➔ payeeReference string(50) A unique reference from the merchant system. Read more about payeeReference   └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.   └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference String(50) The order reference should reflect the order reference found in the merchant’s systems.   └─➔ subsite String(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used.   └➔ prefillInfo.msisdn string umber will be prefilled on payment page, if valid.   └➔ mobilepay.shoplogoUrl string URI to logo that will be visible at MobilePay Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"prices\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 75100000121, \"created\": \"2018-09-11T10:58:27.4236127Z\", \"updated\": \"2018-09-11T10:58:30.8254419Z\", \"instrument\": \"MobilePay\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"DKK\", \"amount\": 3000, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.2.0\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"da-DK\", \"transactions\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"urls\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeinfo\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/mobilepay/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/mobilepay/payments/authorize/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"rel\": \"redirect-authorization\" } ] } Back: Introduction Next: After Payment",
    "tags": "",
    "url": "/payments/mobile-pay/redirect.html"
  },{
    "title": "Swedbank Pay Card Payments – Redirect",
    "text": "The basic redirect purchase scenario is the simplest and most common way to implement Card Payments. Introduction Redirect is the integration that lets Swedbank Pay handle the payments, while you handle your core activities. When ready to pay, the consumer will be redirected to a secure Swedbank Pay hosted site. Finally, the consumer will be redirected back to your website after the payment process. This is how the payment window might look like: Purchase flow sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer-&gt;&gt;-Merchant: start purchase activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST /psp/creditcard/payments activate SwedbankPay note left of Payer: First API request SwedbankPay--&gt;&gt;-Merchant: rel: redirect-authorization ① activate Merchant Merchant--&gt;&gt;-Payer: authorization page activate Payer Payer-&gt;&gt;-SwedbankPay: access authorization page activate SwedbankPay note left of Payer: redirect to SwedbankPay ② SwedbankPay--&gt;&gt;-Payer: display purchase information activate Payer Payer-&gt;&gt;Payer: input creditcard information ③ Payer-&gt;&gt;-SwedbankPay: submit creditcard information opt Card supports 3-D Secure note left of Payer: Authentication Challenge ④ SwedbankPay--&gt;&gt;Payer: redirect to IssuingBank activate Payer Payer-&gt;&gt;-IssuingBank: 3-D Secure authentication process activate IssuingBank IssuingBank-&gt;&gt;-Payer: 3-D Secure authentication process activate Payer Payer-&gt;&gt;-SwedbankPay: access authentication page activate SwedbankPay end SwedbankPay--&gt;&gt;-Payer: CompleteUrl ⑤ activate Payer Payer-&gt;&gt;-SwedbankPay: GET &lt;payment.id&gt; ⑥ activate SwedbankPay note left of Merchant: Second API request SwedbankPay--&gt;&gt;-Merchant: rel: redirect-authorization activate Merchant Merchant--&gt;&gt;-Payer: display purchase result opt Callback is set activate SwedbankPay SwedbankPay-&gt;&gt;SwedbankPay: Payment is updated SwedbankPay-&gt;&gt;-Merchant: POST Payment Callback end Explanations ① rel: redirect-authorization is the name of one of the operations, sent as a response from Swedbank Pay to the Merchant. The href in this operation is the redirect URL to a Swedbank Pay payment page. ② The consumer is being redirected to a secure Swedbank Pay hosted page ③ The payment window is presented and the consumer can insert card information for authorization. ④ If needed the consumer must go through an authorization challenge to verify the identity. ⑤ The Payer reaches the CompleteUrl which you defined in the initial POST request. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. ⑥ Send a GET request with the paymentId to check the state of the transaction. Click the link for a complete list of payment and transaction states. 3-D Secure Swedbank Pay will handle 3-D Secure authentication when this is required. When dealing with card payments, 3-D Secure authentication of the cardholder is an essential topic. There are two alternative outcomes of a credit card payment: 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. Redirect Back End When properly set up in your merchant/webshop site and the payer starts the purchase process, you need to make a POST request towards Swedbank Pay with your Purchase information. This will generate a payment object with a unique paymentID. You will receive a redirect URL to a Swedbank Pay payment page. Intent The intent of the payment identifies how and when the charge will be effectuated. This determines the type of transaction used during the payment process. Authorization (two-phase): If you want the credit card to reserve the amount, you will have to specify that the intent of the purchase is Authorization. The amount will be reserved but not charged. You will (i.e. when you are ready to ship the purchased products) have to make a capture or cancel request later on to fulfill the transaction. AutoCapture (one-phase): If you want the credit card to be charged right away, you will have to specify that the intent of the purchase is AutoCapture. This is only allowed if the consumer purchases digital products. The credit card will be charged automatically after authorization and you don’t need to do any more financial operations to fulfill the transaction. Operations The API requests are displayed in the purchase flow. You can create a card payment with following operation options: Purchase Recur Payout Verify Our payment example uses the Purchase value. Purchase A Purchase payment is a straightforward way to charge the card of the payer. It is followed up by posting a capture, cancellation or reversal transaction. An example of an abbreviated POST request is provided below. Each individual Property of the JSON document is described in the following section. An example of an expanded POST request is available in the other features section. info To minimize the risk for a challenge request (Strong Customer Authentication – “SCA”) on card payments, it’s recommended that you add as much data as possible to the riskIndicator object in the request below. Request POST /psp/creditcard/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"prices\": [{ \"type\": \"CreditCard\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\": { \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"callbackUrl\": \"http://example.com/payment-callback\", \"logoUrl\": \"http://example.com/payment-logo.png\", \"termsOfServiceUrl\": \"http://example.com/payment-terms.pdf\", }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or123\", }, \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } } } } Required Property Type Description   ✔︎︎︎︎︎ payment object The payment object   ✔︎︎︎︎︎ └➔ operation string Determines the initial operation, that defines the type card payment created. Purchase. Used to charge a card. It is followed up by a capture or cancel operation. Recur.Used to charge a card on a recurring basis. Is followed up by a capture or cancel operation (if not Autocapture is used, that is). Payout. Used to deposit funds directly to credit card. No more requests are necessary from the merchant side. Verify. Used when authorizing a card withouth reserveing any funds. It is followed up by a verification transaction.   ✔︎︎︎︎︎ └➔ intent string Authorization. Reserves the amount, and is followed by a cancellation or capture of funds. AutoCapture. A one phase option that enable capture of funds automatically after authorization.   ✔︎︎︎︎︎ └➔ currency string NOK, SEK, DKK, USD or EUR.   ✔︎︎︎︎︎ └➔ prices array The prices resource lists the prices related to a specific payment.   ✔︎︎︎︎︎ └─➔ type string Use the generic type CreditCard if you want to enable all card brands supported by merchant contract. Use card brands like Visa (for card type Visa), MasterCard (for card type Mastercard) and others if you want to specify different amount for each card brand. If you want to use more than one amount you must have one instance in the prices node for each card brand. You will not be allowed to both specify card brands and CreditCard at the same time in this field. See the Prices resource and prices object types for more information.   ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest monetary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK.   ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant.   ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.     └➔ payerReference string The reference to the payer (consumer/end user) from the merchant system. E.g mobile number, customer number etc.     └➔ generatePaymentToken boolean true or false. Set this to true if you want to create a paymentToken for future use as One Click.     └➔ generateRecurrenceToken boolean true or false. Set this to true if you want to create a recurrenceToken for future use Recurring purchases (subscription payments).   ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - see user agent definition   ✔︎︎︎︎︎ └➔ language string nb-NO, sv-SE or en-US.   ✔︎ └➔ urls object The object containing URLs relevant for the payment.     └─➔ hostUrls array The array of URLs valid for embedding of Swedbank Pay Hosted Views. If not supplied, view-operation will not be available.   ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further.     └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with paymentUrl; only cancelUrl or paymentUrl can be used, not both.     └─➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment. Only used in Seamless Views. If both cancelUrl and paymentUrl is sent, the paymentUrl will used.     └─➔ callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details.     └─➔ logoUrl string The URL that will be used for showing the customer logo. Must be a picture with maximum 50px height and 400px width. Require https.     └─➔ termsOfServiceUrl string A URL that contains your terms and conditions for the payment, to be linked on the payment page. Require https.   ✔︎︎︎︎︎ └➔ payeeInfo string The payeeInfo object, containing information about the payee.   ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay.   ✔︎︎︎︎︎ └─➔ payeeReference string(50*) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.     └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.     └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.     └─➔ orderReference String(50) The order reference should reflect the order reference found in the merchant’s systems.     └─➔ subsite String(40) The subsite field can be used to perform [split settlement][split-settlement] on the payment. The subsites must be resolved with Swedbank Pay [reconciliation][settlement-and-reconciliation] before being used.     └➔ riskIndicator array This optional array consist of information that helps verifying the payer. Providing these fields decreases the likelyhood of having to promt for 3-D Secure authenticaiton of the payer when they are authenticating the purchacse.     └─➔ deliveryEmailAddress string Optional (increased chance for frictionless flow if set). For electronic delivery, the email address to which the merchandise was delivered.     └─➔ deliveryTimeFrameIndicator string Optional (increased chance for frictionless flow if set). Indicates the merchandise delivery timeframe.01 (Electronic Delivery)02 (Same day shipping)03 (Overnight shipping)04 (Two-day or more shipping)     └─➔ preOrderDate string Optional (increased chance for frictionless flow if set). For a pre-ordered purchase. The expected date that the merchandise will be available.FORMAT: “YYYYMMDD”     └─➔ preOrderPurchaseIndicator string Optional (increased chance for frictionless flow if set). Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.01 (Merchandise available)02 (Future availability)     └─➔ shipIndicator string Optional (increased chance for frictionless flow if set). Indicates shipping method chosen for the transaction. 01 (Ship to cardholder’s billing address)02 (Ship to another verified address on file with merchant)03 (Ship to address that is different than cardholder’s billing address)04 (Ship to Store / Pick-up at local store. Store address shall be populated in shipping address fields)05 (Digital goods, includes online services, electronic giftcards and redemption codes)06 (Travel and Event tickets, not shipped)07 (Other, e.g. gaming, digital service)     └─➔ giftCardPurchase boolean Optional (increased chance for frictionless flow if set). true if this is a purchase of a gift card.     └─➔ reOrderPurchaseIndicator string Optional (increased chance for frictionless flow if set). Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.01 (Merchandise available)02 (Future availability)     └➔ pickUpAddress object If shipIndicator set to 4, then prefil this.     └─➔ name string If shipIndicator set to 4, then prefil this.     └─➔ streetAddress string If shipIndicator set to 4, then prefil this.     └─➔ coAddress string If shipIndicator set to 4, then prefil this.     └─➔ city string If shipIndicator set to 4, then prefil this.     └─➔ zipCode string If shipIndicator set to 4, then prefil this.     └─➔ countryCode string If shipIndicator set to 4, then prefil this.   Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"instrument\": \"CreditCard\", \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"transactions\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" }, \"urls\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"settings\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" } }, \"operations\": [ { \"rel\": \"update-payment-abort\", \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"rel\": \"redirect-authorization\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/payments/authorize/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"method\": \"GET\", \"contentType\": \"text/html\" }, { \"rel\": \"view-authorization\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/core/scripts/client/px.creditcard.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } When you receive the redirect url from Swedbank Pay, you redirect the payer there to complete the payment. This ensures that card details and other personal information is entered in a secure environment. Swedbank Pay handles all authentication during this phase. After an attempted payment, Swedbank Pay will redirect the Payer to one of two specified URLs: completeUrl or cancelUrl. If the payer cancel at any point during payment, he or she will reach the cancelUrl. If the payment session is followed through completely, the payer will reach the completeUrl. info Important: Both successful and rejected payments are labeled as completed. This means that when you reach this point, you need to make sure that the payment has gone through before you let the payer know that the payment was successful. You do this by doing a GET request. This request has to include the payment Id generated from the initial POST request, so that you can receive the state of the transaction. If you have chosen Seamless View, the completeUrl and cancelUrl will display directly inside the iframe. General info No 3-D Secure and card acceptance: There are optional parameters that can be used in relation to 3-D Secure and card acceptance. By default, most credit card agreements with an acquirer will require that you use 3-D Secure for card holder authentication. However, if your agreement allows you to make a card payment without this authentication, or that specific cards can be declined, you may adjust these optional parameters when posting in the payment. This is specified in the technical reference section for creating credit card payments – you will find the link in the sequence diagram below. link Defining callbackUrl: When implementing a scenario, it is optional to set a callbackUrl in the POST request. If callbackUrl is set Swedbank Pay will send a POST request to this URL when the consumer has fulfilled the payment. See the Callback API description for more information. Card Payments in Mobile Apps The implementation sequence for this scenario is identical to the standard Redirect scenario, but also includes explanations of how to include this redirect in mobile apps or in mobile web pages. Screenshots for Payments You will redirect the consumer/end-user to Swedbank Pay hosted pages to collect the card information. API Requests for Payments The API requests are displayed in the purchase flow. You can create a card payment with following operation options: Purchase Recur Payout Verify Our payment example below uses the Purchase value. Purchase flow mobile The sequence diagram below shows a high level description of a complete purchase, and the two requests you have to send to Swedbank Pay. The links will take you directly to the corresponding API description. When dealing with card payments, 3-D Secure authentication of the cardholder is an essential topic. There are two alternative outcomes of a credit card payment: 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer-&gt;&gt;-Merchant: start purchase activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST /psp/creditcard/payments activate SwedbankPay note left of Merchant: First API Request SwedbankPay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Payer: authorization page activate Payer note left of Payer: redirect to SwedbankPay Payer-&gt;&gt;-Merchant: access merchant page activate Merchant Merchant-&gt;&gt;-SwedbankPay: GET &lt;payment.id&gt; activate SwedbankPay note left of Merchant: Second API request SwedbankPay--&gt;&gt;-Merchant: rel: redirect-authorization activate Merchant Merchant--&gt;&gt;-Payer: display purchase result sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer-&gt;&gt;-Merchant: start purchase activate Payer Merchant-&gt;&gt;-SwedbankPay: POST /psp/creditcard/payments activate Merchant note left of Payer: First API request SwedbankPay--&gt;-Merchant: payment resource activate SwedbankPay Merchant--&gt;&gt;-Payer: authorization page activate Merchant Payer-&gt;&gt;-SwedbankPay: access authorization page activate Payer note left of Payer: redirect to SwedbankPay SwedbankPay--&gt;&gt;-Payer: display purchase information activate SwedbankPay Payer-&gt;&gt;Payer: input creditcard information Payer-&gt;&gt;-SwedbankPay: submit creditcard information activate Payer opt Card supports 3-D Secure SwedbankPay--&gt;&gt;-Payer: redirect to IssuingBank activate SwedbankPay Payer-&gt;&gt;IssuingBank: 3-D Secure authentication process Payer-&gt;&gt;-SwedbankPay: access authentication page activate Payer end SwedbankPay--&gt;&gt;-Payer: redirect to merchant activate SwedbankPay note left of Payer: redirect back to merchant Payer-&gt;&gt;-Merchant: access merchant page activate Payer Merchant-&gt;&gt;-SwedbankPay: GET &lt;payment.id&gt; activate Merchant note left of Merchant: Second API request SwedbankPay--&gt;&gt;-Merchant: rel: redirect-authorization activate SwedbankPay Merchant--&gt;&gt;Payer: display purchase result activate Merchant opt Callback is set activate SwedbankPay SwedbankPay-&gt;&gt;SwedbankPay: Payment is updated SwedbankPay-&gt;&gt;Merchant: POST Payment Callback activate SwedbankPay end Back: Introduction Next: Seamless View",
    "tags": "",
    "url": "/payments/card/redirect.html"
  },{
    "title": "Swedbank Pay Payments Invoice Redirect",
    "text": "Introduction When properly set up in your merchant/webshop site and the payer starts the purchase process, you need to make a POST request towards Swedbank Pay with your Purchase information. This will generate a payment object with a unique paymentID. You will receive a redirect URL to a Swedbank Pay payment page. You need to redirect the payer’s browser to that specified URL so that the payer can enter the credit card details in a secure Swedbank Pay environment. Swedbank Pay will redirect the payer’s browser to - one of two specified URLs, depending on whether the payment session is followed through completely or cancelled beforehand. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. When you detect that the payer reach your completeUrl , you need to do a GET request to receive the state of the transaction, containing the paymentID generated in the first step, to receive the state of the transaction. Options before posting a payment All valid options when posting a payment with operation equal to FinancingConsumer, are described in other features.   Norway Finland Sweden operation FinancingConsumer FinancingConsumer FinancingConsumer currency NOK EUR SEK invoiceType PayExFinancingNO PayExFinancingFI PayExFinancingSE An invoice payment is always two-phased based - you create an Authorize transaction, that is followed by a Capture or Cancel request. Defining CallbackURL: When implementing a scenario, it is optional to set a CallbackURL in the POST request. If callbackURL is set, then Swedbank Pay will send a postback request to this URL when the consumer has fulfilled the payment. See the Callback API description here. Invoice flow The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The diagram also shows in high level, the sequence of the process of a complete purchase. sequenceDiagram Consumer-&gt;&gt;Merchant: Start purchase activate Merchant note left of Merchant: First API request Merchant-&gt;&gt;-Swedbank Pay: POST &lt;Invoice Payment&gt; (operation=FinancingConsumer) activate Swedbank Pay Swedbank Pay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Consumer: authorization page activate Consumer note left of Consumer: redirect to Swedbank Pay Consumer-&gt;&gt;-Swedbank Pay: enter consumer details activate Swedbank Pay Swedbank Pay--&gt;&gt;-Consumer: redirect to merchant activate Consumer note left of Consumer: redirect back to Merchant Consumer-&gt;&gt;-Merchant: access merchant page activate Merchant note left of Merchant: Second API request Merchant-&gt;&gt;-Swedbank Pay: GET &lt;Invoice payment&gt; activate Swedbank Pay Swedbank Pay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Consumer: display purchase result API Requests The API requests are displayed in the purchase flow. You can complete the invoice payment with following operation options: Financing Consumer Recur Verify Our payment example below uses the FinancingConsumer value. Financing Consumer Request HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"operation\": \"FinancingConsumer\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"prices\": [ { \"type\": \"Invoice\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"payerReference\": \"SomeReference\", \"generateReccurenceToken\": false, \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"callbackUrl\": \"http://example.com/payment-callback\", \"logoUrl\": \"http://example.com/logo.png\", \"termsOfServiceUrl\": \"http://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"PR123\", \"payeeName\": \"Merchant1\", \"productCategory\": \"PC1234\", \"subsite\": \"MySubsite\" } \"invoice\": { \"invoiceType\": \"PayExFinancingSe\" } } Required Property Type Description ✔︎︎︎︎︎ payment object The payment object contains information about the specific payment. ✔︎︎︎︎︎ └➔ operation string The operation that the payment is supposed to perform. The FinancingConsumer operation is used in our example. Take a look at the Other Feature section for a full examples of the following operation options: FinancingConsumer, Recur, Verify ✔︎︎︎︎︎ └➔ intent string Authorization is the only intent option for invoice. Reserves the amount, and is followed by a cancellation or capture of funds. ✔︎︎︎︎︎ └➔ currency string NOK, SEK, DKK, USD or EUR. ✔︎︎︎︎︎ └➔ prices object The prices resource lists the prices related to a specific payment. ✔︎︎︎︎︎ └─➔ type string Use the Invoice type here ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK 5000 = 50.00 SEK. ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.   └➔ payerReference string The reference to the payer (consumer/end user) from the merchant system. E.g mobile number, customer number etc.   └➔ generateRecurrenceToken boolean true or false. Set this to true if you want to create a recurrenceToken for future use Recurring purchases (subscription payments). ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - see user agent definition ✔︎︎︎︎︎ └➔ language string nb-NO, sv-SE or en-US. ✔︎︎︎︎︎ └➔ urls object The urls resource lists urls that redirects users to relevant sites.   └─➔ hostUrl array The array of URLs valid for embedding of Swedbank Pay Hosted Views. If not supplied, view-operation will not be available. ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further.   └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with paymentUrl; only cancelUrl or paymentUrl can be used, not both.   └─➔ callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details.   └─➔ logoUrl string The URL that will be used for showing the customer logo. Must be a picture with maximum 50px height and 400px width. Require https.   └─➔ termsOfServiceUrl string A URL that contains your terms and conditions for the payment, to be linked on the payment page. Require https. ✔︎︎︎︎︎ └➔ payeeInfo object The payeeInfo contains information about the payee. ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. ✔︎︎︎︎︎ └─➔ payeeReference string(30*) A unique reference from the merchant system, which is used as a receipt/invoice number in Invoice Payments. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.   └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.   └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference String(50) The order reference should reflect the order reference found in the merchant’s systems.   └─➔ subsite String(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"instrument\": \"Invoice\", \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"FinancingConsumer\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"amount\": 1500, \"remainingCaptureAmount\": 1000, \"remainingCancellationAmount\": 1000, \"remainingReversalAmount\": 500, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"transactions\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" }, \"payeeInfo\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"urls\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"settings\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" }, \"approvedLegalAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/approvedlegaladdress\" }, \"maskedApprovedLegalAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/maskedapprovedlegaladdress\" } }, \"operations\": [ { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"method\": \"PATCH\" }, { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\", \"rel\": \"create-authorize\", \"method\": \"POST\" }, { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/approvedlegaladdress\", \"rel\": \"create-approved-legal-address\", \"method\": \"POST\" } ] } Payment Resource The payment resource is central to all payment instruments. All operations that target the payment resource directly produce a response similar to the example seen below. The response given contains all operations that are possible to perform in the current state of the payment. Request GET /psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/ HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"transactions\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" }, \"payeeInfo\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"urls\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"settings\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" }, \"approvedLegalAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/approvedlegaladdress\" }, \"maskedApprovedLegalAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/maskedapprovedlegaladdress\" } }, \"approvedLegalAddress\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/approvedlegaladdress\" }, \"operations\": [ { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"rel\": \"create-capture\", \"method\": \"POST\" }, { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\", \"rel\": \"create-cancel\", \"method\": \"POST\" }, { \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/approvedlegaladdress\", \"rel\": \"create-approved-legal-address\", \"method\": \"POST\" } ] } If a GET method is used from paymentUI with a paymentToken, the following operations can be returned, depending on state of the payment and the last transaction. HTTP/1.1 200 OK Content-Type: application/json { \"href\": \"https://example.com/cancelUrl\", \"rel\": \"redirect-merchant-cancel\", \"method\": \"GET\" } { \"href\": \"https://example.com/completeUrl\", \"rel\": \"redirect-merchant-complete\", \"method\": \"GET\" } { \"href\": \"https://example.com/cancelUrl\", \"rel\": \"redirect-merchant-cancel\", \"method\": \"GET\" } { \"href\": \"https://example.com/completeUrl\", \"rel\": \"redirect-merchant-complete\", \"method\": \"GET\" } Property Type Description payment object The payment object contains information about the specific payment. └➔ id string The relative URI of the payment. └➔ number integer The payment number , useful when there’s need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. └➔ created string The ISO-8601 date of when the payment was created. └➔ updated string The ISO-8601 date of when the payment was updated. └➔ state string Ready , Pending , Failed or Aborted . Indicates the state of the payment. This field is only for status display purposes. To └➔ prices object The prices resource lists the prices related to a specific payment. └➔ prices.id string The relative URI of the current prices resource. └➔ description string(40) A textual description of maximum 40 characters of the purchase. └➔ payerReference string The reference to the payer (consumer/end-user) from the merchant system, like e-mail address, mobile number, customer number etc. └➔ userAgent string The user agent string of the consumer’s browser. └➔ language string nb-NO , sv-SE or en-US └➔ urls string The URI to the urls resource where all URIs related to the payment can be retrieved. └➔ payeeInfo string The URI to the payeeinfo resource where the information about the payee of the payment can be retrieved. operations array The array of possible operations to perform └─➔ method string The HTTP method to use when performing the operation. └─➔ href string The target URI to perform the operation against. └─➔ rel string The name of the relation the operation has to the current resource. Operations The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. The only thing that should be hard coded in the client is the value of the rel and the request that will be sent in the HTTP body of the request for the given operation. Operation Description update-payment-abort Aborts the payment order before any financial transactions are performed. redirect-authorization Contains the URI that is used to redirect the consumer to the Swedbank Pay Payments containing the card authorization UI. view-authorization Contains the JavaScript href that is used to embed the card authorization UI directly on the webshop/merchant site create-capture Creates a capture transaction in order to charge the reserved funds from the consumer. create-cancellation Creates a cancellation transaction that cancels a created, but not yet captured payment. Options after posting a payment Head over to after payment to see what you can do when a payment is completed. Here you will also find info on Capture, Cancel, and Reversal. Back: Introduction Next: Seamless View",
    "tags": "",
    "url": "/payments/invoice/redirect.html"
  },{
    "title": "Swedbank Pay Payments Swish Redirect",
    "text": "Swish is a one-phase payment instrument supported by the major Swedish banks. Swish Payments Redirect is where Swedbank Pay performs a payment that the payer confirms in the Swish mobile app. The consumer initiates the payment by supplying the Swish registered mobile number (msisdn), connected to the Swish app. Introduction When the payer starts the purchase process, you make a POST request towards Swedbank Pay with the collected Purchase information. This will generate a payment object with a unique paymentID. You either receive a Redirect URL to a hosted page or a JavaScript source in response. You need to redirect the payer to the payment page where she is prompted to enter the Swish registered mobile number. This triggers the initiation of a sales transaction. Swedbank Pay handles the dialogue with Swish and the consumer confirms the purchase in the Swish app. Swedbank Pay will redirect the payer’s browser to - or display directly in the iFrame - one of two specified URLs, depending on whether the payment session is followed through completely or cancelled beforehand. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. The consumer/end-user is redirected to Swedbank Pay hosted pages and prompted to insert her phone number to initiate the sales transaction. Purchase flow The sequence diagram below shows the requests you have to send to Swedbank Pay to make a purchase. The links will take you directly to the API description for the specific request. sequenceDiagram activate Browser Browser-&gt;&gt;-Merchant: start purchase activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST &lt;Swish create payment&gt; (operation=PURCHASE) activate SwedbankPay note left of Merchant: First API request SwedbankPay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Browser: redirect to payments page activate Browser note left of SwedbankPay: redirect to Swedbank Pay (If Redirect scenario) Browser-&gt;&gt;-SwedbankPay: enter mobile number activate SwedbankPay SwedbankPay--x-Browser: Tell consumer to open Swish app Swish_API-&gt;&gt;Swish_App: Ask for payment confirmation activate Swish_App Swish_App--&gt;&gt;-Swish_API: Consumer confirms payment activate Swish_API opt Callback Swish_API--&gt;&gt;-SwedbankPay: Payment status activate SwedbankPay SwedbankPay--&gt;&gt;-Swish_API: Callback response activate Swish_API SwedbankPay--x-Merchant: Transaction callback end SwedbankPay--&gt;&gt;Browser: Redirect to merchant (If Redirect scenario) activate Browser Browser--&gt;&gt;-Merchant: Redirect activate Merchant Merchant-&gt;&gt;-SwedbankPay: GET &lt;Swish payment&gt; activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: Payment response activate Merchant Merchant--&gt;&gt;-Browser: Payment Status Operations The API requests are displayed in the purchase flow. Swish is a one-phase payment instrument that is based on sales transactions not involving capture or cancellation operations. The options you can choose from when creating a payment with key operation set to value Purchase are listed below. General link Defining CallbackURL: When implementing a scenario, it is strongly recommended to set a [CallbackURL][callback-url] in the POST request. If callbackURL is set Swedbank Pay will send a postback request to this URL when the consumer has fulfilled the payment. You need to do a GET request, containing the paymentID generated in the first step, to receive the state of the transaction. API Requests All valid options when posting in a payment with operation equal to Purchase. The Purchase example shown below. Request POST /psp/swish/payments Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Sale\", \"currency\": \"SEK\", \"prices\": [ { \"type\": \"Swish\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": \"https://example.com\", \"paymentUrl\": \"http://example.com/perform-payment\", \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"callbackUrl\": \"https://example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"ref-123456\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\" }, \"prefillInfo\": { \"msisdn\": \"+46739000001\" } }, \"swish\": { \"enableEcomOnly\": false } } Required Property Type Description ✔︎︎︎︎︎ payment object The payment object contains information about the specific payment. ✔︎︎︎︎︎ └➔ operation string The operation that the payment is supposed to perform. The [Purchase][purchase] operation is used in our example. ✔︎︎︎︎︎ └➔ intent string Sale. ✔︎︎︎︎︎ └➔ currency string SEK. ✔︎︎︎︎︎ └➔ prices object The prices array lists the prices related to a specific payment. ✔︎︎︎︎︎ └─➔ type string Swish. ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK 5000 = 50.00 SEK. ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.   └─➔ paymentAgeLimit integer Positive number sets required age limit to fulfill the payment.   └➔ payerReference string The reference to the payer (consumer/end user) from the merchant system. E.g mobile number, customer number etc. ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - [see user agent definition][user-agent-definition] ✔︎︎︎︎︎ └➔ language string nb-NO, sv-SE or en-US. ✔︎︎︎︎︎ └➔ urls object The urls resource lists urls that redirects users to relevant sites. ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further.   └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with paymentUrl; only cancelUrl or paymentUrl can be used, not both.   └─➔ callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details.   └─➔ logoUrl string The URL that will be used for showing the customer logo. Must be a picture with maximum 50px height and 400px width. Require https.   └─➔ termsOfServiceUrl string A URL that contains your terms and conditions for the payment, to be linked on the payment page. Require https. ✔︎︎︎︎︎ └➔ payeeInfo object The payeeInfo contains information about the payee. ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. ✔︎︎︎︎︎ └─➔ payeeReference string(50*) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.   └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.   └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference string(50) The order reference should reflect the order reference found in the merchant’s systems.   └─➔ subsite string(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used.   └─➔ msisdn string Number will be prefilled on payment page, if valid. The mobile number must have a country code prefix and be 8 to 15 digits in length.   └➔ swish object An object that holds different scenarios for Swish payments.   └─➔ ecomOnlyEnabled boolean true if to only enable Swish on browser based transactions.; otherwise false to also enable Swish transactions via in-app payments. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 992308, \"created\": \"2017-10-23T08:38:57.2248733Z\", \"instrument\": \"Swish\", \"operation\": \"Purchase\", \"intent\": \"Sale\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 0, \"description\": \"Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"Mozilla/5.0\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeinfo\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales\", \"rel\": \"create-sale\" } ] } Back: Introduction Next: Seamless View",
    "tags": "",
    "url": "/payments/swish/redirect.html"
  },{
    "title": "Release Notes",
    "text": "The latest updates about our releases will be published on this page. info Version numbers The version numbers used in headers on this page refers to the version of this very documentation, not to a version of any APIs described by it. March 2020 Version 1.7.7 This change contains build updates for the page. :octocat: Version 1.7.6 Several links has been corrected. The chance of 404 is now much lower. Other small text changes and clarifications. Version 1.7.5 New page! Technical reference into has been moved from the front page to technical information. Front page got a slimmer look. :swimmer: Abort reference is back in credit card reference. Swish error code reference got a face lift, check it out here :candy:. February 2020 Version 1.7.4 Described the M-Commerce flow for Swish Direct. Alphabetize the terms in Terminology. Version 1.7.3 Expanded information about the field restrictedToInstruments. Added information about the field receiptReference. Added information about direct integration in Credit card. Added and fixed several missing headings in template files. Expanded information about verify. Created new page for Checkout Capture. Mobile Pay Online was previously only refered to as Mobile Pay, this has been corrected. Version 1.7.2 Removed several duplicate headers in other-features pages. Added unscheduled purchase information in card payments. We have added card logos when selecting card in payment menu. See updated screenshot of payment menu. Version 1.7.1 All sections have been released. :trophy: Version 1.7 README is updated with info about includes. Added several includes. Updated payeeReference description in Checkout and Invoice section. Using snake case consistently. Added section for unscheduled purchase in Card section. Fixed JavaScript example in Checkin section. Added info about mobile verification in Swish Other Features. Added section about Authenticated Merchants in Checkout section. Cleanup in Vipps Other Features. paymentRestrictedToAgeLimit and paymentRestrictedToSocialSecurityNumber added to swish object in Swish Redirect. paymentAgeLimit , socialSecurityNumber added to the new payerInfo object in Swish Seamless View. Properties added in Swish. Added section about migration key in Resources section. January 2020 Version 1.6.3 restrictedToInstruments added back to Payment Order purchase requests. Direct Debit section and mentions in various includes removed. Various improvements and fixes. Version 1.6.2 The Payments and Card Payments sections are reviewed and released. Version 1.6.1 email, msisdn, workPhoneNumber and homePhoneNumber added to the payer object in Payment Order requests. cardholder added to Card Payments Purchase requests. Various improvements and fixes. Version 1.6 Credit Payments (née “Credit Account”) sections have been deleted from the Swedbank Pay Developer Portal. The Swish Payments and Vipps Payments have received a few updates and are now ready for another round of review. MobilePay Payments is now ready for review. paymentAgeLimit is now added in Swish Payments. The Terminology page is updated and 3-D Secure 2.0 (3DS2) , PSD2 and SCA explanations are added. Added descriptions for Payment States And Transaction States everywhere appropriate. Google Analytics has been added to Developer Portal. Version 1.5 The review of Invoice Payments is complete and as such the section is now released and ready for use. The Card Payments section has received an overhaul, inching it closer to release. The Swish Payments and Vipps Payments sections are ready for review. The Direct Debit, MobilePay Payments and Credit Payments (née “Credit Account”) sections have received a few updates, inching them all closer to review. Version 1.4 Updated Swish Redirect and Swish Direct sections in preparations for review and the transition from PayEx Developer Portal. Added Data Protection section. Payment Orders now support orderItems in all operations. Added Terminology page. Clarified what the awaitingActivity state means for different payment instruments. Removed erroneous noCVC in examples for One-Click Card Payments section. Added description for the onBillingDetailsAvailable event in the Checkin Front End section. December 2019 Update in checkin module We have added support for specifying language as input in checkin module, language. Supported languages are Norwegian, Swedish and English. Consumers outside Sweden and Norway can now purchase in our Checkout service. You can specify supported countries for shipment in a new input parameter, shippingAddressRestrictedToCountryCodes, in our checkin module. Updated API specification can be found here. The parameters language and shippingAddressRestrictedToCountryCodes have replaced the former consumerCountryCode. The parameters msisdn and email have been made obsolete due to GDPR rules. This information cannot be sent in without an explicit consent from the consumer. November 2019 Welcome, Swedbank Pay Developer Portal PayEx’ Commerce offerings are being rebranded to Swedbank Pay and as a result of that rebranding, PayEx Checkout is now known as Swedbank Pay Checkout and its documentation can be found on here. Support international phone numbers in Swish We have added support for sending in international phone numbers in the request. Check our Swish documentation here. This is supported in API, and when consumer enters their phone number on the payment page. Order Items The input parameter quantity in OrderItems-node is now updated to decimal. You may send up to 4 decimals. See updated documentation here October 2019 Payment Url Credit Card We have added the URL property called paymentUrl for Card Seamless View (previously added for Vipps and Checkout), that will be used when the user is returned from 3rd party. The URL should represent the page in where the payment Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the hosted payment view was added, in order to initiate the payment. Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment as the one that initiated the payment originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. When the JavaScript is invoked after return of the consumer, the consumer will either be redirected to the completeUrl (event onPaymentCompleted) or if payment has failed, see an error-message and get the option to retry the payment. August 2019 Order Items On Payment Orders, itemDescriptions and vatSummary has been replaced with the more versatile and powerful orderItems. While itemDescriptions will continue to work, it is recommended that all integrations switch over to orderItems as soon as possible. When orderItems is used, itemDescriptions must be removed from all requests as the two cannot be used simultaneously. Payment Url For our Seamless Views (currently Vipps or in Checkout), we have added a new URL property called paymentUrl that will be used when user is returned from 3rd party. The URL should represent the page of where the payment hosted view was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the hosted payment view was added to in order to initiate the payment. Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment or Payment Order as the one that initiated the payment originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment or Payment Order stored. When the JavaScript is invoked after return of the consumer, the consumer will either be redirected to the completeUrl, or, if payment failed, see an error-message, and get the option to retry the payment. If paymentUrl is not implemented, retry of payments will not be possible in either individual payment instruments such as Vipps or in Checkout. It makes it more tedious to retry payment as the whole process including the creation of the payment or payment order needs to be performed again. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer.",
    "tags": "",
    "url": "/resources/release-notes.html"
  },{
    "title": "Swedbank Pay Payments Vipps Seamless View",
    "text": "The Seamless View scenario gives your customers the opportunity to pay with Vipps directly within your webshop. Introduction Vipps is a two-phase payment instrument supported by the major Norwegian banks. In the Seamless View scenario, Swedbank Pay receives a mobile number (MSISDN) from the payer through Swedbank Pay Payments. Swedbank Pay performs a payment that the payer must confirm through the Vipps mobile app. Purchase flow The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The links will take you directly to the API description for the specific request. sequenceDiagram Browser-&gt;&gt;Merchant: start purchase (pay with VIPPS) activate Merchant Merchant-&gt;&gt;-SwedbankPay: POST /psp/vipps/payments ① activate SwedbankPay note left of Merchant: First API request SwedbankPay--&gt;&gt;-Merchant: rel: view-payment ② activate Merchant Merchant--&gt;&gt;-Browser: authorization page activate Browser note left of Browser: Open iframe ③ Browser-&gt;&gt;Browser: Enter mobile number ④ Browser--&gt;&gt;-SwedbankPay: Passing data for authorization activate SwedbankPay SwedbankPay--&gt;&gt;-Vipps.API: POST &lt;rel:create-auhtorization&gt; ⑤ activate Vipps.API Vipps.API--&gt;&gt;-SwedbankPay: response activate SwedbankPay SwedbankPay--&gt;&gt;-Browser: Authorization response (State=AwaitingActivity) ⑥ activate Browser note left of Browser: check your phone Vipps.API--&gt;&gt;Vipps_App: Confirm Payment UI activate Vipps_App note left of Vipps.API: Dialogue with Vipps ⑦ Vipps_App--&gt;&gt;Vipps_App: Confirmation Dialogue Vipps_App--&gt;&gt;-Vipps.API: Confirmation activate Vipps.API Vipps.API--&gt;&gt;-SwedbankPay: make payment activate SwedbankPay SwedbankPay--&gt;&gt;SwedbankPay: execute payment SwedbankPay--&gt;&gt;-Vipps.API: response activate Vipps.API Vipps.API--&gt;&gt;-SwedbankPay: authorize result activate SwedbankPay SwedbankPay--&gt;&gt;-Browser: Display authorize result Explainations ① When the payer starts the purchase process, you make a POST request towards Swedbank Pay with the collected Purchase information. ② rel: view-payment is a value in one of the operations, sent as a response from Swedbank Pay to the Merchant. ③ Open iframe creates the Swedbank Pay hosted iframe. ④ The consumer UI page displays the payment window as content inside of the iframe. The consumer can insert mobile information for authorization. ⑤ A POST request is sent to the Vipps API with the mobile number for authorization. ⑥ The response will contain the state of the transaction. It will normally be AwaitingActivity in this phase of the payment, meaning we are awaiting a response from Vipps. ⑦ Swedbank Pay handles the dialogue with Vipps and the consumer confirms the purchase in the Vipps app. Payment Url For our Seamless Views, the property called paymentUrl will be used when the consumer is redirected out of the Seamless View (the iframe). The consumer is redirected out of frame when selecting Vipps as payment instrument. The URL should represent the page of where the Payment Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the Seamless View was added to in order to initiate the payment process. info Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment as the one that initiated the payment process originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer. Seamless View Back End When properly set up in your merchant/webshop site and the payer starts the purchase process, you need to make a POST request towards Swedbank Pay with your Purchase information. This will generate a payment object with a unique paymentID. You will receive a response in which you can find the JavaScript source in the view-payment operation. Intent Authorization (two-phase): The intent of a Vipps purchase is always Authorization. The amount will be reserved but not charged. You will later (i.e. if a physical product, when you are ready to ship the purchased products) have to make a Capture or Cancel request. Operations The API requests are displayed in the purchase flow above. You can create a Vipps payment with the purchase operation Purchase A Purchase payment is a straightforward way to charge the card of the payer. It is followed up by posting a capture, cancellation or reversal transaction. An example of an abbreviated POST request is provided below. Each individual Property of the JSON document is described in the following section. An example of an expanded POST request is available in the other features section. info To minimize the risk for a challenge request (Strong Customer Authentication – “SCA”) on card payments, it’s recommended that you add as much data as possible to the riskIndicator object in the request below. Request POST /psp/vipps/payments HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"prices\": [ { \"type\": \"Vipps\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Vipps Test\", \"payerReference\": \"ABtimestamp\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"nb-NO\", \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"paymentUrl\": \"http://example.com/perform-payment\", \"callbackUrl\": \"http://example.com/payment-callback\", \"logoUrl\": \"https://example.com/path/to/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"payeeReference\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" }, \"prefillInfo\": { \"msisdn\": \"+4798765432\" } } } Required Property Type Description ✔︎︎︎︎︎ payment object The payment object contains information about the specific payment. ✔︎︎︎︎︎ └➔ operation string The Purchase operation is used in our example. Take a look at the create payment section for a full example of the Purchase operation. ✔︎︎︎︎︎ └➔ intent string Authorization. Reserves the amount, and is followed by a cancellation or capture of funds. AutoCapture. A one phase option that enable capture of funds automatically after authorization. ✔︎︎︎︎︎ └➔ currency string NOK ✔︎︎︎︎︎ └➔ prices object The prices resource lists the prices related to a specific payment. ✔︎︎︎︎︎ └─➔ type string Use the Vipps value. See the Prices resource and prices object types for more information. ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK 5000 = 50.00 NOK. ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.   └➔ payerReference string The reference to the payer (consumer/end user) from the merchant system. E.g mobile number, customer number etc.   └➔ generatePaymentToken boolean true or false. Set this to true if you want to create a paymentToken for future use as One Click.   └➔ generateRecurrenceToken boolean true or false. Set this to true if you want to create a recurrenceToken for future use Recurring purchases (subscription payments). ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - see user agent definition ✔︎︎︎︎︎ └➔ language string nb-NO or en-US. ✔︎︎︎︎︎ └➔ urls object The urls resource lists urls that redirects users to relevant sites.   └─➔ hostUrls array The array of URLs valid for embedding of Swedbank Pay Hosted Views. If not supplied, view-operation will not be available. ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further.   └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with paymentUrl; only cancelUrl or paymentUrl can be used, not both.   └─➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment. Only used in Seamless Views. If both cancelUrl and paymentUrl is sent, the paymentUrl will used.   └─➔ callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details.   └─➔ logoUrl string The URL that will be used for showing the customer logo. Must be a picture with maximum 50px height and 400px width. Require https.   └─➔ termsOfServiceUrl string A URL that contains your terms and conditions for the payment, to be linked on the payment page. Require https. ✔︎︎︎︎︎ └➔ payeeInfo object The payeeInfo contains information about the payee. ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. ✔︎︎︎︎︎ └─➔ payeeReference string(50*) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.   └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.   └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference String(50) The order reference should reflect the order reference found in the merchant’s systems.   └➔ prefillInfo object An object that holds prefill information that can be inserted on the payment page.   └─➔ msisdn string Number will be prefilled on payment page, if valid. Only Norwegian phone numbers are supported. The country code prefix is +47   └─➔ subsite String(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 72100003079, \"created\": \"2018-09-05T14:18:44.4259255Z\", \"instrument\": \"Vipps\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"NOK\", \"prices\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"amount\": 0, \"description\": \"Vipps Test\", \"payerReference\": \"AB1536157124\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.2.0\", \"userAgent\": \"Mozilla/5.0 weeeeee\", \"language\": \"nb-NO\", \"urls\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeinfo\" }, \"metadata\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/metadata\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/vipps/payments/authorize/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-authorization\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/vipps/core/scripts/client/px.vipps.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;Culture=sv-SE\", \"rel\": \"view-payment\", \"contentType\": \"application/javascript\" } ] } The key information in the response is the view-payment operation. You will need to embed its href in a &lt;script&gt; element. The script will enable loading the payment page in an iframe in our next step. Seamless View Front End You need to embed the script source on your site to create a hosted-view in an iframe; so that she can enter the required information in a secure Swedbank Pay hosted environment. A simplified integration has these following steps: Create a container that will contain the Seamless View iframe: &lt;div id=\"swedbank-pay-seamless-view-page\"&gt;. Create a &lt;script&gt; source within the container. Embed the href value obtained in the POST request in the &lt;script&gt; element. Example: &lt;script id=\"payment-page-script\" src=\"https://ecom.dev.payex.com/vipps/core/ scripts/client/px.vipps.client.js\"&gt;&lt;/script&gt; The previous two steps gives this HTML: HTML &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Swedbank Pay Seamless View is Awesome!&lt;/title&gt; &lt;!-- Here you can specify your own javascript file --&gt; &lt;script src=&lt;YourJavaScriptFileHere&gt;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"swedbank-pay-seamless-view-page\"&gt; &lt;script id=\"payment-page-script\" src=\"https://ecom.dev.payex.com/vipps/core/scripts/client/px.vipps.client.js\"&gt;&lt;/script&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; Lastly, initiate the Seamless View with a JavaScript call to open the iframe embedded on your website. JavaScript &lt;script language=\"javascript\"&gt; payex.hostedView.vipps({ // The container specifies which id the script will look for to host the // iframe component. container: \"swedbank-pay-seamless-view-page\" }).open(); &lt;/script&gt; This is how the payment might look like: Authorization Transaction Use the mobile number from the consumer to create an authorization transaction. Request POST /psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations HTTP/1.1 Host: api.externalintegration.payex.com Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"transaction\": { \"msisdn\": \"+4798765432\" } } Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"authorization\": { \"vippsTransactionId\": \"5619328800\", \"msisdn\": \"+4798765432\", \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations/\", \"transaction\": { \"id\": \"/psp/vipps/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Authorization\", \"state\": \"AwaitingActivity\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": true, \"operations\": [] } } Property Type Description payment string The relative URI of the payment this transaction belongs to. authorization object The authorization object. └➔ vippsTransactionId string The ID of the Vipps transaction. └➔ msisdn string The mobile number of the consumer. Only Norwegian phone numbers are supported. The country code prefix is +47 └➔ id string The relative URI of the current authorization resource. transaction object The transaction object. └➔ id string The relative URI of the current transaction resource. └➔ created string The ISO-8601 date and time of when the transaction was created. └➔ updated string The ISO-8601 date and time of when the transaction was created. └➔ type string Indicates the transaction type. └➔ state string Initialized, AwaitingActivity, Completed or Failed. Indicates the state of the transaction. └➔ number string The transaction number, useful when there’s need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. └➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 NOK. └➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. └➔ description string A human readable description of maximum 40 characters of the transaction. └➔ payeeReference string A unique reference for the transaction. └➔ failedReason string The human readable explanation of why the payment failed. └➔ isOperational bool true if the transaction is operational; otherwise false. └➔ operations array The array of operations that are possible to perform on the transaction in its current state. Back: Redirect Next: After payments",
    "tags": "",
    "url": "/payments/vipps/seamless-view.html"
  },{
    "title": "Swedbank Pay Payments Swish Seamless View",
    "text": "The Seamless View scenario gives your customers the opportunity to pay with Swish directly within your webshop. Introduction The Seamless View integration provide you with the Swish payment solution directly on your website. This gives the consumer a frictionless experience as we are handling the payment in the implemented iframe on your page (see example below). Purchase flow sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer-&gt;&gt;-Merchant: start purchase activate Merchant note left of Payer: First API request Merchant-&gt;&gt;-SwedbankPay: POST /psp/swish/payments ① activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: rel: view-sales ② activate Merchant Merchant--&gt;&gt;-Payer: confirmation page activate Payer note left of Payer: Open iframe ③ Payer-&gt;&gt;Payer: Input mobile number Payer-&gt;&gt;-SwedbankPay: Show Consumer UI page in iframe - Authorization ④ activate SwedbankPay opt Card supports 3-D Secure SwedbankPay--&gt;&gt;-Payer: redirect to IssuingBank activate Payer Payer-&gt;&gt;IssuingBank: 3-D Secure authentication process activate IssuingBank IssuingBank-&gt;&gt;-Payer: 3-D Secure authentication process Payer-&gt;&gt;-SwedbankPay: access authentication page end SwedbankPay--&gt;&gt;Merchant: Event: OnPaymentComplete ⑤ activate Merchant note left of Merchant: Second API request. Merchant-&gt;&gt;-SwedbankPay: GET &lt;payment.id&gt; ⑥ activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: rel: view-sales activate Merchant Merchant--&gt;&gt;-Payer: display purchase result activate Payer opt Callback is set ⑦ activate SwedbankPay SwedbankPay-&gt;&gt;SwedbankPay: Payment is updated SwedbankPay-&gt;&gt;-Merchant: POST Payment Callback end Explainations ① When the payer starts the purchase process, you make a POST request towards Swedbank Pay with the collected Purchase information. ② view-sales is a rel value in one of the operations, sent as a response from Swedbank Pay to the Merchant. ③ Open iframe creates the Swedbank Pay hosted iframe. ④ Show Consumer UI page in iframe displays the payment window as content inside of the iframe. The consumer can insert mobile information for authorization. ⑤ Event: OnPaymentComplete is when er payment is complete. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. ⑥ To get the transaction result, you need to follow up with a GET request using the paymentID received in the first step. ⑦ If CallbackURL is set you will receive a payment callback when the Swish dialogue is completed, and you will have to make a GET request to check the payment status. Payment Url For our Seamless Views, the property called paymentUrl will be used when the consumer is redirected out of the Seamless View (the iframe). The consumer is redirected out of frame when selecting Swish as payment instrument. The URL should represent the page of where the Payment Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the Seamless View was added to in order to initiate the payment process. info Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment as the one that initiated the payment process originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer. Seamless View Back End When properly set up in your merchant/webshop site and the payer starts the purchase process, you need to make a POST request towards Swedbank Pay with your Sales information. This will generate a payment object with a unique paymentID. You will receive a JavaScript source in response. Intent The intent of the payment identifies how and when the charge will be effectuated. This determines the type of transaction used during the payment process. Authorization (two-phase): If you want the credit card to reserve the amount, you will have to specify that the intent of the purchase is Authorization. The amount will be reserved but not charged. You will (i.e. when you are ready to ship the purchased products) have to make a capture or cancel request later on to fulfill the transaction. Operations The API requests are displayed in the purchase flow above. You can create a Swish payment with the purchase operation Purchase A Purchase payment is a straightforward way to charge the card of the payer. It is followed up by posting a capture, cancellation or reversal transaction. An example of an abbreviated POST request is provided below. Each individual Property of the JSON document is described in the following section. An example of an expanded POST request is available in the other features section. Request POST /psp/swish/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Sale\", \"currency\": \"SEK\", \"prices\": [{ \"type\": \"Swish\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"generatePaymentToken\": false, \"generateRecurrenceToken\": false, \"payerReference\": \"AB1234\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": [\"http://example.com\"], \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"paymentUrl\": \"http://example.com/perform-payment\", \"callbackUrl\": \"http://example.com/payment-callback\", \"logoUrl\": \"https://example.com/payment-logo.png\", \"termsOfServiceUrl\": \"https://example.com/payment-terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or123\", \"subsite\": \"MySubsite\" }, \"prefillInfo\": { \"msisdn\": \"+46987654321\" } }, \"swish\": { \"enableEcomOnly\": false } } Required Property Type Description ✔︎︎︎︎︎ payment object The payment object contains information about the specific payment. ✔︎︎︎︎︎ └➔ operation string The operation that the payment is supposed to perform. The Purchase operation is used in our example. Take a look at the create card payment section for a full examples of the following operation options: Purchase. ✔︎︎︎︎︎ └➔ intent string AutoCapture. A one phase option that enable capture of funds. ✔︎︎︎︎︎ └➔ currency string SEK ✔︎︎︎︎︎ └➔ prices object The prices resource lists the prices related to a specific payment. ✔︎︎︎︎︎ └─➔ type string Use the generic type CreditCard if you want to enable all card brands supported by merchant contract. Use card brands like Visa (for card type Visa), MasterCard (for card type Mastercard) and others if you want to specify different amount for each card brand. If you want to use more than one amount you must have one instance in the prices node for each card brand. You will not be allowed to both specify card brands and CreditCard at the same time in this field. See the Prices resource and prices object types for more information. ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK 5000 = 50.00 SEK. ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant.   └➔ paymentAgeLimit integer Positive number sets requried age limit to fulfill the payment. ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.   └➔ payerReference string The reference to the payer (consumer/end user) from the merchant system. E.g mobile number, customer number etc. ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - see user agent definition ✔︎︎︎︎︎ └➔ language string nb-NO, sv-SE or en-US. ✔︎︎︎︎︎ └➔ urls object The urls resource lists urls that redirects users to relevant sites.   └─➔ hostUrls array The array of URLs valid for embedding of Swedbank Pay Hosted Views. If not supplied, view-operation will not be available. ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further.   └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with paymentUrl; only cancelUrl or paymentUrl can be used, not both.   └─➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment. Only used in Seamless Views. If both cancelUrl and paymentUrl is sent, the paymentUrl will used.   └─➔ callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details.   └─➔ logoUrl string The URL that will be used for showing the customer logo. Must be a picture with maximum 50px height and 400px width. Require https.   └─➔ termsOfServiceUrl string A URL that contains your terms and conditions for the payment, to be linked on the payment page. Require https. ✔︎︎︎︎︎ └➔ payeeInfo object The payeeInfo contains information about the payee. ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. ✔︎︎︎︎︎ └─➔ payeeReference string(50*) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.   └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.   └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference String(50) The order reference should reflect the order reference found in the merchant’s systems.   └➔ prefillInfo object An object that holds prefill information that can be inserted on the payment page.   └─➔ msisdn string Number will be prefilled on payment page, if valid. The mobile number must have a country code prefix and be 8 to 15 digits in length.   └─➔ subsite String(40) The subsite field can be used to perform split settlement on the payment. The subsites must be resolved with Swedbank Pay reconciliation before being used.   └➔ swish object An object that holds different scenarios for Swish payments.   └─➔ enableEcomOnly boolean true if to only enable Swish on browser-based transactions.; otherwise false to also enable Swish transactions via mobile app. Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"instrument\": \"Swish\", \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Sale\", \"currency\": \"SEK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.20.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"transactions\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"captures\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" }, \"urls\" : { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\" : { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"settings\": { \"id\": \"/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" } }, \"operations\": [ { \"href\": \"https://api.externalintegration.payex.com/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/swish/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/sales\", \"rel\": \"create-sale\" }, { \"href\": \"https://ecom.externalintegration.payex.com/swish/payments/authorize/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-sale\", \"method\": \"GET\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.dev.payex.com/swish/core/scripts/client/px.swish.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"view-sales\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/swish/core/scripts/client/px.swish.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"view-sales\", \"contentType\": \"application/javascript\" } ] } The key information in the response is the view-sales operation. You will need to embed its href in a &lt;script&gt; element. The script will enable loading the payment page in an iframe in our next step. Seamless View Front End You need to embed the script source on your site to create a hosted-view in an iframe; so that she can enter the required information in a secure Swedbank Pay hosted environment. A simplified integration has these following steps: Create a container that will contain the Seamless View iframe: &lt;div id=\"swedbank-pay-seamless-view-page\"&gt;. Create a &lt;script&gt; source within the container. Embed the href value obtained in the POST request in the &lt;script&gt; element. Example: &lt;script id=\"payment-page-script\" src=\"https://ecom.dev.payex.com/swish/core/ scripts/client/px.swish.client.js\"&gt;&lt;/script&gt; The previous two steps gives this HTML: HTML &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Swedbank Pay Seamless View is Awesome!&lt;/title&gt; &lt;!-- Here you can specify your own javascript file --&gt; &lt;script src=&lt;YourJavaScriptFileHere&gt;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"swedbank-pay-seamless-view-page\"&gt; &lt;script id=\"payment-page-script\" src=\"https://ecom.dev.payex.com/swish/core/scripts/client/px.swish.client.js\"&gt;&lt;/script&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; Lastly, initiate the Seamless View with a JavaScript call to open the iframe embedded on your website. JavaScript &lt;script language=\"javascript\"&gt; payex.hostedView.swish({ // The container specifies which id the script will look for to host the // iframe component. container: \"swedbank-pay-seamless-view-page\" }).open(); &lt;/script&gt;",
    "tags": "",
    "url": "/payments/swish/seamless-view.html"
  },{
    "title": "Swedbank Pay Payments Invoice Seamless View",
    "text": "The Seamless View scenario represents the opportunity to implement Invoice directly in your webshop. Introduction Seamless View provides an integration of the payment process directly on your website. This solution offers a smooth shopping experience with Swedbank Pay payment pages seamlessly integrated in an iframe on your website. The costumer does not need to leave your webpage, since we are handling the payment in the iframe on your page. Purchase Flow The sequence diagram below shows a high level description of the invoice process. sequenceDiagram Consumer-&gt;&gt;Merchant: Start purchase activate Merchant note left of Merchant: First API request Merchant-&gt;&gt;-SwedbankPay: POST /psp/invoice/payments ① activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: rel: view-authorization ② activate Merchant Merchant--&gt;&gt;-Consumer: Display all details and final price activate Consumer note left of Consumer: Open iframe ③ Consumer-&gt;&gt;Consumer: Input email and mobile number Consumer-&gt;&gt;-Merchant: Confirm purchase activate Merchant note left of Merchant: Second API request Merchant-&gt;&gt;-SwedbankPay: Post psp/invoice/authorization ④ activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: Transaction result activate Merchant note left of Merchant: Third API request Merchant-&gt;&gt;-SwedbankPay: GET &lt;payment.id&gt; ⑤ activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: payment resource activate Merchant Merchant--&gt;&gt;-Consumer: Display result info Note that the invoice will not be created/distributed before you have made a capture request. The Capture/Cancel/Reversal options are described in the after payment section. The link will take you directly to the API descriptions for the requests. Explainations ① Start with collecting all purchase information and make a POST request towards Swedbank Pay to create an invoice payment. Use the FinancingConsumer operation. ② The response from the payment resource contains operations that can be performed on the resource. The relevant operation in our example is rel: view-authorization. ③ Open iframe creates the Swedbank Pay hosted iframe. ④ To create the authorization transaction, you need to make a second POST request where you send in the consumer data. Use the FinancingConsumer activity ⑤ To get the authorization result, you need to follow up with a GET request using the paymentID received in the first step. Finally, when you are ready to ship your order, you will have to make a POST request to make a Capture. At this point Swedbank Pay will generate the invoice to the consumer. API requests The API requests are displayed in the invoice flow. The options you can choose from when creating a payment with key operation set to Value FinancingConsumer are listed below. An invoice payment is always two-phased based - you create an Authorize transaction, that is followed by a Capture or Cancel request. Defining CallbackURL: When implementing a scenario, it is optional to set a CallbackURL in the POST request. If callbackURL is set Swedbank Pay will send a postback request to this URL when the consumer has fulfilled the payment. See the Callback API description here. Seamless View Back End When properly set up in your merchant/webshop site and the payer starts the invoice process, you need to make a POST request towards Swedbank Pay with your invoice information. This will generate a payment object with a unique paymentID. You will receive a JavaScript source in response. Options before posting a payment Different countries have different values for the properties. The table below showcase the values for the respective countries: POST Request Options   Norway FInland Sweden operation FinancingConsumer FinancingConsumer FinancingConsumer currency NOK EUR SEK invoiceType PayExFinancingNO PayExFinancingFI PayExFinancingSE Intent The intent of the payment identifies how and when the charge will be effectuated. This determines the type of transaction used during the payment process. Authorization (two-phase): If you want the credit card to reserve the amount, you will have to specify that the intent of the purchase is Authorization. The amount will be reserved but not charged. You will (i.e. when you are ready to ship the purchased products) have to make a capture or cancel request later on to fulfill the transaction. Operations The API requests are displayed in the purchase flow above. You can create an invoice payment with following operation options: FinancingConsumer (We use this value in our examples) Recur Verify FinancingConsumer A FinancingConsumer payment is a straightforward way to invoice a payer. It is followed up by posting a capture, cancellation or reversal transaction. An example of an abbreviated POST request is provided below. Each individual Property of the JSON document is described in the following section. An example of an expanded POST request is available in the other features section. Request POST /psp/invoice/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"FinancingConsumer\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"prices\": [ { \"type\": \"Invoice\", \"amount\": 4201, \"vatAmount\": 0 } ], \"description\": \"Test Invoice\", \"userAgent\": \"Mozilla/5.0...\", \"generatePaymentToken\": false, \"generateRecurrenceToken\": false, \"paymentToken\": \"\" \"language\": \"sv-SE\", \"urls\": { \"hosturls\": [ \"http://example.com\" ], \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"callbackUrl\": \"http://example.com/payment-callback\", \"termsOfServiceUrl\": \"http://example.com/payment-terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\" } }, \"invoice\": { \"invoiceType\": \"PayExFinancingSe\" } } Required Property Type Description ✔︎︎︎︎︎ payment object The payment object contains information about the specific payment. ✔︎︎︎︎︎ └➔ operation string The operation that the payment is supposed to perform. The FinancingConsumer operation is used in our example. Take a look at the create payment section for a full examples of the following operation options: FinancingConsumer, Recur, and Verify ✔︎︎︎︎︎ └➔ intent string Authorization. Reserves the amount, and is followed by a cancellation or capture of funds. ✔︎︎︎︎︎ └➔ currency string NOK or SEK. ✔︎︎︎︎︎ └➔ prices object The prices resource lists the prices related to a specific payment. ✔︎︎︎︎︎ └─➔ type string Use the invoice value See the Prices resource and prices object types for more information. ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest momentary units of the selected currency. E.g. 10000 = 100.00 SEK 5000 = 50.00 SEK. ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.   └➔ payerReference string The reference to the payer (consumer/end user) from the merchant system. E.g mobile number, customer number etc.   └➔ generatePaymentToken boolean true or false. Set this to true if you want to create a paymentToken for future use as One Click.   └➔ generateRecurrenceToken boolean true or false. Set this to true if you want to create a recurrenceToken for future use Recurring purchases (subscription payments). ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - see user agent definition ✔︎︎︎︎︎ └➔ language string nb-NO, sv-SE or en-US. ✔︎︎︎︎︎ └➔ urls object The urls resource lists urls that redirects users to relevant sites.   └─➔ hostUrls array The array of URLs valid for embedding of Swedbank Pay Hosted Views. If not supplied, view-operation will not be available. ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further.   └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with paymentUrl; only cancelUrl or paymentUrl can be used, not both.   └─➔ callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details.   └─➔ termsOfServiceUrl string A URL that contains your terms and conditions for the payment, to be linked on the payment page. Require https. ✔︎︎︎︎︎ └➔ payeeInfo object The payeeInfo contains information about the payee. ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. ✔︎︎︎︎︎ └─➔ payeeReference string(30*) A unique reference from the merchant system, which is used as a receipt/invoice number in Invoice Payments. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.   └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.   └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.   └─➔ orderReference String(50) The order reference should reflect the order reference found in the merchant’s systems. ✔︎︎︎︎︎ └─➔ invoiceType String PayExFinancingSe, PayExFinancingNo or PayExFinancingFi depending on which country you’re doing business with PayEx in. (Other external financing partner names must be agreed upon with Swedbank Pay.) Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"instrument\": \"Invoice\", \"created\": \"YYYY-MM-DDThh:mm:ssZ\", \"updated\": \"YYYY-MM-DDThh:mm:ssZ\", \"operation\": \"FinancingConsumer\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"SEK\", \"prices\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"amount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeinfo\" }, \"metadata\": { \"id\": \"/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/metadata\" } }, \"operations\": [ { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/approvedlegaladdress\", \"rel\": \"create-approved-legal-address\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\", \"rel\": \"create-authorization\", \"contentType\": \"application/json\" }, { \"method\": \"PATCH\", \"href\": \"https://api.externalintegration.payex.com/psp/invoice/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/invoice/payments/authorize/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-authorization\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/invoice/core/scripts/client/px.invoice.client.js?afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065&amp;operation=authorize\", \"rel\": \"view-authorization\", \"contentType\": \"application/javascript\" } ] } The key information in the response is the view-authorization operation. You will need to embed its href in a &lt;script&gt; element. The script will enable loading the payment page in an iframe in our next step. Seamless View Front End You need to embed the script source on your site to create a hosted-view in an iframe; so that she can enter the payment details in a secure Swedbank Pay hosted environment. A simplified integration has these following steps: Create a container that will contain the Seamless View iframe: &lt;div id=\"swedbank-pay-seamless-view-page\"&gt;. Create a &lt;script&gt; source within the container. Embed the href value obtained in the POST request in the &lt;script&gt; element. Example: &lt;script id=\"payment-page-script\" src=\"https://ecom.dev.payex.com/invoice/core/ scripts/client/px.invoice.client.js\"&gt;&lt;/script&gt; The previous two steps gives this HTML: HTML &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Swedbank Pay Seamless View is Awesome!&lt;/title&gt; &lt;!-- Here you can specify your own javascript file --&gt; &lt;script src=&lt;YourJavaScriptFileHere&gt;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"swedbank-pay-seamless-view-page\"&gt; &lt;script id=\"payment-page-script\" src=\"https://ecom.dev.payex.com/invoice/core/scripts/client/px.invoice.client.js\"&gt;&lt;/script&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; Lastly, initiate the Seamless View with a JavaScript call to open the iframe embedded on your website. JavaScript &lt;script language=\"javascript\"&gt; payex.hostedView.invoice({ // The container specifies which id the script will look for to host the // iframe component. container: \"swedbank-pay-seamless-view-page\" }).open(); &lt;/script&gt; Back: Redirect Next: Direct",
    "tags": "",
    "url": "/payments/invoice/seamless-view.html"
  },{
    "title": "Swedbank Pay Card Payments – Seamless View",
    "text": "The Seamless View purchase scenario represents the opportunity to implement card payments directly in your webshop. Introduction Seamless View provides an integration of the payment process directly on your website. This solution offers a smooth shopping experience with Swedbank Pay payment pages seamlessly integrated in an iframe on your website. The costumer does not need to leave your webpage, since we are handling the payment in the iframe on your page. Purchase Flow sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer-&gt;&gt;-Merchant: start purchase activate Merchant note left of Payer: First API request Merchant-&gt;&gt;-SwedbankPay: POST /psp/creditcard/payments activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: rel: view-authorization ① activate Merchant Merchant--&gt;&gt;-Payer: authorization page activate Payer note left of Payer: Open iframe ② Payer-&gt;&gt;Payer: Input creditcard information Payer-&gt;&gt;-SwedbankPay: Show Consumer UI page in iframe - Authorization ③ activate SwedbankPay opt Card supports 3-D Secure SwedbankPay--&gt;&gt;-Payer: redirect to IssuingBank activate Payer Payer-&gt;&gt;IssuingBank: 3-D Secure authentication process activate IssuingBank IssuingBank-&gt;&gt;-Payer: 3-D Secure authentication process Payer-&gt;&gt;-IssuingBank: access authentication page end IssuingBank --&gt;&gt;+ Payer: Redirect back to paymentUrl (merchant) deactivate IssuingBank SwedbankPay--&gt;&gt;Merchant: Event: OnPaymentComplete ④ activate Merchant note left of Merchant: Second API request. Merchant-&gt;&gt;-SwedbankPay: GET &lt;payment.id&gt; activate SwedbankPay SwedbankPay--&gt;&gt;-Merchant: rel: view-payment activate Merchant Merchant--&gt;&gt;-Payer: display purchase result activate Payer opt Callback is set activate SwedbankPay SwedbankPay-&gt;&gt;SwedbankPay: Payment is updated SwedbankPay-&gt;&gt;-Merchant: POST Payment Callback end Explainations ① rel: view-authorization is a value in one of the operations, sent as a response from Swedbank Pay to the Merchant. ② Open iframe creates the Swedbank Pay hosted iframe. ③ Show Consumer UI page in iframe displays the payment window as content inside of the iframe. The consumer can insert card information for authorization. ④ Event: OnPaymentComplete is when er payment is complete. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. 3-D Secure Swedbank Pay will handle 3-D Secure authentication when this is required. When dealing with credit card payments, 3-D Secure authentication of the cardholder is an essential topic. There are two alternative outcome of a credit card payment: 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. Payment Url For our Seamless Views, the property called paymentUrl will be used when the consumer is redirected out of the Seamless View (the iframe). The consumer is redirected out of frame when at the 3-D Secure verification for Card Payments. The URL should represent the page of where the Payment Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, paymentUrl should be set to the same URL as that of the page where the JavaScript for the Seamless View was added to in order to initiate the payment process. info Please note that the paymentUrl must be able to invoke the same JavaScript URL from the same Payment as the one that initiated the payment process originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer. Seamless View Back End When properly set up in your merchant/webshop site and the payer starts the purchase process, you need to make a POST request towards Swedbank Pay with your Purchase information. This will generate a payment object with a unique paymentID. You will receive a JavaScript source in response. Intent The intent of the payment identifies how and when the charge will be effectuated. This determines the type of transaction used during the payment process. Authorization (two-phase): If you want the credit card to reserve the amount, you will have to specify that the intent of the purchase is Authorization. The amount will be reserved but not charged. You will (i.e. when you are ready to ship the purchased products) have to make a capture or cancel request later on to fulfill the transaction. AutoCapture (one-phase): If you want the credit card to be charged right away, you will have to specify that the intent of the purchase is AutoCapture. This is only allowed if the consumer purchases digital products. The credit card will be charged automatically after authorization and you don’t need to do any more financial operations to fulfill the transaction. Operations The API requests are displayed in the purchase flow above. You can create a card payment with following operation options: Purchase (We use this value in our examples) Recur Payout Verify Purchase A Purchase payment is a straightforward way to charge the card of the payer. It is followed up by posting a capture, cancellation or reversal transaction. An example of an abbreviated POST request is provided below. Each individual Property of the JSON document is described in the following section. An example of an expanded POST request is available in the other features section. info To minimize the risk for a challenge request (Strong Customer Authentication – “SCA”) on card payments, it’s recommended that you add as much data as possible to the riskIndicator object in the request below. Request POST /psp/creditcard/payments HTTP/1.1 Authorization: Bearer &lt;AccessToken&gt; Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"prices\": [{ \"type\": \"CreditCard\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\": { \"hostUrls\": [\"http://example.com\"], \"completeUrl\": \"http://example.com/payment-completed\", \"cancelUrl\": \"http://example.com/payment-canceled\", \"paymentUrl\": \"http://example.com/perform-payment\", \"callbackUrl\": \"http://example.com/payment-callback\", \"logoUrl\": \"http://example.com/payment-logo.png\", \"termsOfServiceUrl\": \"http://example.com/payment-terms.pdf\", }, \"payeeInfo\": { \"payeeId\": \"5cabf558-5283-482f-b252-4d58e06f6f3b\" \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or123\", }, \"riskIndicator\": { \"deliveryEmailAddress\": \"olivia.nyhuus@payex.com\", \"deliveryTimeFrameIndicator\": \"01\", \"preOrderDate\": \"19801231\", \"preOrderPurchaseIndicator\": \"01\", \"shipIndicator\": \"01\", \"giftCardPurchase\": false, \"reOrderPurchaseIndicator\": \"01\", \"pickUpAddress\": { \"name\": \"Olivia Nyhus\", \"streetAddress\": \"Saltnestoppen 43\", \"coAddress\": \"\", \"city\": \"Saltnes\", \"zipCode\": \"1642\", \"countryCode\": \"NO\" } } } } Required Property Type Description   ✔︎︎︎︎︎ payment object The payment object   ✔︎︎︎︎︎ └➔ operation string Determines the initial operation, that defines the type card payment created. Purchase. Used to charge a card. It is followed up by a capture or cancel operation. Recur.Used to charge a card on a recurring basis. Is followed up by a capture or cancel operation (if not Autocapture is used, that is). Payout. Used to deposit funds directly to credit card. No more requests are necessary from the merchant side. Verify. Used when authorizing a card withouth reserveing any funds. It is followed up by a verification transaction.   ✔︎︎︎︎︎ └➔ intent string Authorization. Reserves the amount, and is followed by a cancellation or capture of funds. AutoCapture. A one phase option that enable capture of funds automatically after authorization.   ✔︎︎︎︎︎ └➔ currency string NOK, SEK, DKK, USD or EUR.   ✔︎︎︎︎︎ └➔ prices array The prices resource lists the prices related to a specific payment.   ✔︎︎︎︎︎ └─➔ type string Use the generic type CreditCard if you want to enable all card brands supported by merchant contract. Use card brands like Visa (for card type Visa), MasterCard (for card type Mastercard) and others if you want to specify different amount for each card brand. If you want to use more than one amount you must have one instance in the prices node for each card brand. You will not be allowed to both specify card brands and CreditCard at the same time in this field. See the Prices resource and prices object types for more information.   ✔︎︎︎︎︎ └─➔ amount integer Amount is entered in the lowest monetary units of the selected currency. E.g. 10000 = 100.00 NOK, 5000 = 50.00 SEK.   ✔︎︎︎︎︎ └─➔ vatAmount integer If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant.   ✔︎︎︎︎︎ └➔ description string(40) A textual description max 40 characters of the purchase.     └➔ payerReference string The reference to the payer (consumer/end user) from the merchant system. E.g mobile number, customer number etc.     └➔ generatePaymentToken boolean true or false. Set this to true if you want to create a paymentToken for future use as One Click.     └➔ generateRecurrenceToken boolean true or false. Set this to true if you want to create a recurrenceToken for future use Recurring purchases (subscription payments).   ✔︎︎︎︎︎ └➔ userAgent string The user agent reference of the consumer’s browser - see user agent definition   ✔︎︎︎︎︎ └➔ language string nb-NO, sv-SE or en-US.   ✔︎ └➔ urls object The object containing URLs relevant for the payment.     └─➔ hostUrls array The array of URLs valid for embedding of Swedbank Pay Hosted Views. If not supplied, view-operation will not be available.   ✔︎︎︎︎︎ └─➔ completeUrl string The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A GET request needs to be performed on the payment to inspect it further.     └─➔ cancelUrl string The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with paymentUrl; only cancelUrl or paymentUrl can be used, not both.     └─➔ paymentUrl string The URI that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment. Only used in Seamless Views. If both cancelUrl and paymentUrl is sent, the paymentUrl will used.     └─➔ callbackUrl string The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See callback for details.     └─➔ logoUrl string The URL that will be used for showing the customer logo. Must be a picture with maximum 50px height and 400px width. Require https.     └─➔ termsOfServiceUrl string A URL that contains your terms and conditions for the payment, to be linked on the payment page. Require https.   ✔︎︎︎︎︎ └➔ payeeInfo string The payeeInfo object, containing information about the payee.   ✔︎︎︎︎︎ └─➔ payeeId string This is the unique id that identifies this payee (like merchant) set by Swedbank Pay.   ✔︎︎︎︎︎ └─➔ payeeReference string(50*) A unique reference from the merchant system. It is set per operation to ensure an exactly-once delivery of a transactional operation. See payeeReference for details.     └─➔ payeeName string The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay.     └─➔ productCategory string A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process.     └─➔ orderReference String(50) The order reference should reflect the order reference found in the merchant’s systems.     └─➔ subsite String(40) The subsite field can be used to perform [split settlement][split-settlement] on the payment. The subsites must be resolved with Swedbank Pay [reconciliation][settlement-and-reconciliation] before being used.     └➔ riskIndicator array This optional array consist of information that helps verifying the payer. Providing these fields decreases the likelyhood of having to promt for 3-D Secure authenticaiton of the payer when they are authenticating the purchacse.     └─➔ deliveryEmailAddress string Optional (increased chance for frictionless flow if set). For electronic delivery, the email address to which the merchandise was delivered.     └─➔ deliveryTimeFrameIndicator string Optional (increased chance for frictionless flow if set). Indicates the merchandise delivery timeframe.01 (Electronic Delivery)02 (Same day shipping)03 (Overnight shipping)04 (Two-day or more shipping)     └─➔ preOrderDate string Optional (increased chance for frictionless flow if set). For a pre-ordered purchase. The expected date that the merchandise will be available.FORMAT: “YYYYMMDD”     └─➔ preOrderPurchaseIndicator string Optional (increased chance for frictionless flow if set). Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.01 (Merchandise available)02 (Future availability)     └─➔ shipIndicator string Optional (increased chance for frictionless flow if set). Indicates shipping method chosen for the transaction. 01 (Ship to cardholder’s billing address)02 (Ship to another verified address on file with merchant)03 (Ship to address that is different than cardholder’s billing address)04 (Ship to Store / Pick-up at local store. Store address shall be populated in shipping address fields)05 (Digital goods, includes online services, electronic giftcards and redemption codes)06 (Travel and Event tickets, not shipped)07 (Other, e.g. gaming, digital service)     └─➔ giftCardPurchase boolean Optional (increased chance for frictionless flow if set). true if this is a purchase of a gift card.     └─➔ reOrderPurchaseIndicator string Optional (increased chance for frictionless flow if set). Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.01 (Merchandise available)02 (Future availability)     └➔ pickUpAddress object If shipIndicator set to 4, then prefil this.     └─➔ name string If shipIndicator set to 4, then prefil this.     └─➔ streetAddress string If shipIndicator set to 4, then prefil this.     └─➔ coAddress string If shipIndicator set to 4, then prefil this.     └─➔ city string If shipIndicator set to 4, then prefil this.     └─➔ zipCode string If shipIndicator set to 4, then prefil this.     └─➔ countryCode string If shipIndicator set to 4, then prefil this.   Response HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 1234567890, \"instrument\": \"CreditCard\", \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"payerReference\": \"AB1234\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/prices\" }, \"transactions\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/transactions\" }, \"authorizations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/authorizations\" }, \"captures\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\" }, \"reversals\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/reversals\" }, \"cancellations\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/cancellations\" }, \"urls\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/urls\" }, \"payeeInfo\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/payeeInfo\" }, \"settings\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/settings\" } }, \"operations\": [ { \"rel\": \"update-payment-abort\", \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"rel\": \"redirect-authorization\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/payments/authorize/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"method\": \"GET\", \"contentType\": \"text/html\" }, { \"rel\": \"view-authorization\", \"href\": \"https://ecom.externalintegration.payex.com/creditcard/core/scripts/client/px.creditcard.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } The key information in the response is the view-authorization operation. You will need to embed its href in a &lt;script&gt; element. The script will enable loading the payment page in an iframe in our next step. Seamless View Front End You need to embed the script source on your site to create a hosted-view in an iframe; so that she can enter the credit card details in a secure Swedbank Pay hosted environment. A simplified integration has these following steps: Create a container that will contain the Seamless View iframe: &lt;div id=\"swedbank-pay-seamless-view-page\"&gt;. Create a &lt;script&gt; source within the container. Embed the href value obtained in the POST request in the &lt;script&gt; element. Example: &lt;script id=\"payment-page-script\" src=\"https://ecom.dev.payex.com/creditcard/core/ scripts/client/px.creditcard.client.js\"&gt;&lt;/script&gt; The previous two steps gives this HTML: HTML &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Swedbank Pay Seamless View is Awesome!&lt;/title&gt; &lt;!-- Here you can specify your own javascript file --&gt; &lt;script src=&lt;YourJavaScriptFileHere&gt;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"swedbank-pay-seamless-view-page\"&gt; &lt;script id=\"payment-page-script\" src=\"https://ecom.dev.payex.com/creditcard/core/scripts/client/px.creditcard.client.js\"&gt;&lt;/script&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; Lastly, initiate the Seamless View with a JavaScript call to open the iframe embedded on your website. JavaScript &lt;script language=\"javascript\"&gt; payex.hostedView.creditCard({ // The container specifies which id the script will look for to host the // iframe component. container: \"swedbank-pay-seamless-view-page\" }).open(); &lt;/script&gt; Seamless View Events During operation in the seamless view, several events can occur. They are described below. onPaymentCreated This event triggers when a user actively attempts to perform a payment. The onPaymentCreated event is raised with the following event argument object: onPaymentCreated event object { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"instrument\": \"creditcard\", } Property Type Description id string The relative URI to the payment. instrument string Creditcard onPaymentCompleted This event triggers when a payment has completed successfully. The onPaymentCompleted event is raised with the following event argument object: onPaymentCompleted event object { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"redirectUrl\": \"https://en.wikipedia.org/wiki/Success\" } Property Type Description id string The relative URI to the payment. redirectUrl string The URI the user will be redirect to after a completed payment. onPaymentCanceled This event triggers when the user cancels the payment. The onPaymentCanceled event is raised with the following event argument object: onPaymentCanceled event object { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"redirectUrl\": \"https://en.wikipedia.org/wiki/Canceled\" } Property Type Description id string The relative URI to the payment. redirectUrl string The URI the user will be redirect to after a canceled payment. onPaymentFailed This event triggers when a payment has failed, disabling further attempts to perform a payment. The onPaymentFailed event is raised with the following event argument object: onPaymentFailed event object { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"redirectUrl\": \"https://en.wikipedia.org/wiki/Failed\" } Property Type Description id string The relative URI to the payment. redirectUrl string The URI the user will be redirect to after a failed payment. onPaymentTermsOfService This event triggers when the user clicks on the “Display terms and conditions” link. The onPaymentTermsOfService event is raised with the following event argument object: onPaymentTermsOfService event object { \"origin\": \"owner\", \"openUrl\": \"https://example.org/terms.html\" } Property Type Description origin string owner, merchant. The value is always merchant unless Swedbank Pay hosts the view. openUrl string The URI containing Terms of Service and conditions. onError This event triggers during terminal errors or if the configuration fails validation. The onError event will be raised with the following event argument object: onError event object { \"origin\": \"creditcard\", \"messageId\": \"ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"details\": \"Descriptive text of the error\" } Property Type Description origin string creditcard, identifies the system that originated the error. messageId string A unique identifier for the message. details string A human readable and descriptive text of the error. Redirect Next: Direct",
    "tags": "",
    "url": "/payments/card/seamless-view.html"
  },{
    "title": "Search",
    "text": "",
    "tags": "",
    "url": "/search.html"
  },{
    "title": "Swedbank Pay Developer Portal",
    "text": "Connection and Protocol All requests towards Swedbank Pay API Platform are made with HTTP/1.1 over a secure a TLS 1.2 (or higher) connection. Older HTTP clients running on older operating systems and frameworks might receive connection errors when connecting to Swedbank Pay’s APIs. This is most likely due to the connection being made from the client with TLS 1.0 or even SSL, which are all insecure and deprecated. If such is the case, ensure that you are able to connect over a TLS 1.2 connection by reading information regarding your programming languages and environments (Java, PHP Curl, PHP Zend, Ruby, Python, Node.js Request). You can inspect Swedbank Pay’s TLS and cipher suite support at SSL Labs. Support for HTTP/2 in our APIs is being investigated. Headers All requests against the API Platform should have a few common headers: HTTP request POST /some/resource HTTP/1.1 Content-Type: application/json; charset=utf-8 Accept: application/problem+json; q=1.0, application/json; q=0.9 Authorization: \"Bearer 123456781234123412341234567890AB\" Session-Id: 779da454399742248f2942bb064c4707 Forwarded: for=82.115.151.177; host=example.com; proto=https Required Header Description ✔︎ Content-Type The content type of the body of the HTTP request. Usually set to application/json. ✔︎ Accept The content type accepted by the client. Usually set to application/json and application/problem+json so both regular responses as well as errors can be received properly. ✔︎ Authorization The OAuth 2 Access Token is generated in Swedbank Pay Admin. See the admin guide on how to get started.   Session-Id A trace identifier used to trace calls through the API Platform (ref RFC 7329). Each request must mint a new GUID/UUID. If no Session-Id is provided, Swedbank Pay will generate one for the request.   Forwarded The IP address of the consumer as well as the host and protocol of the consumer-facing web page. When the header is present, only the for parameter containing the consumer IP address is required, the other parameters are optional. See RFC 7239 for details. URI Usage The base URIs of the API Platform are: Environment Base URL Test https://api.externalintegration.payex.com/ Production https://api.payex.com/ An important part of REST is its use of hypermedia. Instead of having to perform complex state management and hard coding URIs and the availability of different operations in the client, this task is moved to the server. The client simply follows links and performs operations provided by the API, given the current state of the resource. The server controls the state and lets the client know through hypermedia what’s possible in the current state of the resource. To get an introduction to hypermedia, please watch this 20 minute video. warning Don’t build URIs It is very important that only the base URIs of Swedbank Pay’s APIs are stored in your system. All other URIs are returned dynamically in the response. Swedbank Pay cannot guarantee that your implementation will remain working if you store any other URIs in your system. When performing requests, please make sure to use the complete URIs that are returned in the response. Do not attempt to parse or build upon the returned data – you should not put any special significance to the information you might glean from an URI. URIs should be treated as opaque identifiers you can use to retrieve the identified resource – nothing more, nothing less. If you don’t follow this advice, your integration most assuredly will break when Swedbank Pay makes updates in the future. Uniform Responses When a POST or PATCH request is performed, the whole target resource representation is returned in the response, as when performing a GET request on the resource URI. This is an economic approach that limits the number of necessary GET requests. Expansion The payment resource contain the ID of related sub-resources in its response properties. These sub-resources can be expanded inline by using the request parameter expand. This is an effective way to limit the number of necessary calls to the API, as you return several properties related to a Payment resource in a single request. Note that the expand parameter is available to all API requests but only applies to the request response. This means that you can use the expand parameter on a POST or PATCHrequest to get a response containing the target resource including expanded properties. This example below add the urls and authorizations property inlines to the response, enabling you to access information from these sub-resources. HTTP request with expansion GET /psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1?$expand=urls,authorizations HTTP/1.1 Host: api.externalintegration.payex.com To avoid unnecessary overhead, you should only expand the nodes you need info about. Data Types Some datatypes, like currency, dates and amounts, are managed in a coherent manner across the entire API Platform. Currency All currencies are expressed according to the ISO 4217 standard, e.g SEK, EUR, NOK. Dates All dates are expressed according to the ISO 8601 standard that combine dates, time and timezone data into a string, e.g. 2018-09-14T13:21:57.6627579Z. Locale When defining locale, we use the combination of language (ISO 639-1) and country codes (ISO 3166), e.g. nb-NO, sv-SE, en-US. Monetary Amounts All monetary amounts are entered in the lowest momentary units of the selected currency. The amount of SEK and NOK are in ören/ører, and EUR is in cents. Another way to put it is that the code amount is expressed as if the true amount is multiplied by 100. True amount Code amount NOK 100.00 10000 SEK 50.00 5000 € 10.00 1000 Operations When a resource is created and during its lifetime, it will have a set of operations that can be performed on it. Which operations that are available in a given state varies depending on payment instrument used, what the access token is authorized to do, etc. A subset of possible operations are described below. Visit the technical reference page of a payment instrument for instrument specific operations. JSON with Operations { \"payment\": {}, \"operations\": [ { \"href\": \"http://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"rel\": \"update-payment-abort\", \"method\": \"PATCH\" }, { \"href\": \"https://ecom.externalintegration.payex.com/creditcard/payments/authorize/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-authorization\", \"method\": \"GET\" }, { \"href\": \"https://ecom.externalintegration.payex.com/swish/core/scripts/client/px.swish.client.js?token=afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"view-payment\", \"method\": \"GET\", \"contentType\": \"application/javascript\" }, { \"href\": \"https://api.externalintegration.payex.com/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/captures\", \"rel\": \"create-capture\", \"method\": \"POST\" } ] } Property Description href The target URI to perform the operation against. rel The name of the relation the operation has to the current resource. method The HTTP method to use when performing the operation. The operations should be performed as described in each response and not as described here in the documentation. Always use the href and method as specified in the response by finding the appropriate operation based on its rel value. PayeeReference The payeeReference given when creating transactions and payments has some specific processing rules depending on specifications in the contract. It must be unique for every operation, used to ensure exactly-once delivery of a transactional operation from the merchant system. Its length and content validation is dependent on whether the transaction.number or the payeeReference is sent to the acquirer. If you select Option A in the settlement process (Swedbank Pay will handle the settlement), Swedbank Pay will send the transaction.number to the acquirer and the payeeReference may have the format of string(30). If you select Option B in the settlement process (you will handle the settlement yourself), Swedbank Pay will send the payeeReference to the acquirer and it will be limited to the format of string(12) and all characters must be digits. Read more about the settlement process here. Callback When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform a callback to inform the payee (merchant) about this update. Setting a callbackUrl in the HTTP POST API is optional, but highly recommended. If a payer closes the browser window, a network error or something else happens that prevents the payer from being redirect from Swedbank Pay back to the merchant website, the callback is what ensures that you receive information about what happened with the payment. When a change or update from the back-end system are made on a payment or transaction, Swedbank Pay will perform an asynchronous server-to-server callback to inform the payee (merchant) about this update. Swedbank Pay will make an HTTP POST to the callbackUrl that was specified when the payee (merchant) created the payment. When the callbackUrl receives such a callback, an HTTP GET request must be made on the payment or on the transaction. The retrieved payment or transaction resource will give you the necessary information about the recent change/update. The callback will be retried if it fails. Below are the retry timings, in seconds from the initial transaction time: 30 seconds 60 seconds 360 seconds 432 seconds 864 seconds 1265 seconds The callback is sent from the following IP address: 82.115.146.1 A callback should return a 200 OK response. Payment Instrument Callback { \"payment\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1\", \"number\": 222222222 }, \"transaction\": { \"id\": \"/psp/creditcard/payments/7e6cdfc3-1276-44e9-9992-7cf4419750e1/&lt;transaction type&gt;/ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"number\": 333333333 } } Parameter Description &lt;transaction type&gt; authorizations, captures, cancellations, reversals The sequence diagram below shows the HTTP POST you will receive from Swedbank Pay, and the two GET requests that you make to get the updated status. sequenceDiagram Participant Merchant Participant SwedbankPay as Swedbank Pay activate SwedbankPay SwedbankPay-&gt;&gt;+Merchant: POST &lt;callbackUrl&gt; deactivate SwedbankPay note left of Merchant: Callback by Swedbank Pay Merchant--&gt;&gt;+SwedbankPay: HTTP response Merchant-&gt;&gt;+SwedbankPay: GET creditcard payment deactivate Merchant note left of Merchant: First API request SwedbankPay--&gt;&gt;+Merchant: payment resource deactivate SwedbankPay Problems When performing operations against the API, it will respond with a problem message that contain details of the error type if the request could not be successfully performed. Regardless of why the error occurred, the problem message will follow the same structure as specified in the Problem Details for HTTP APIs (RFC 7807) specification. The structure of a problem message will look like this: Problem Example { \"type\": \"https://api.payex.com/psp/errordetail/creditcard/inputerror\", \"title\": \"There was an input error\", \"detail\": \"Please correct the errors and retry the request\", \"instance\": \"ec2a9b09-601a-42ae-8e33-a5737e1cf177\", \"status\": 400, \"action\": \"RetryNewData\", \"problems\": [{ \"name\": \"CreditCardParameters.Issuer\", \"description\": \"minimum one issuer must be enabled\" }] } Property Type Description type string The URI that identifies the error type. This is the only property usable for programmatic identification of the type of error! When dereferenced, it might lead you to a human readable description of the error and how it can be recovered from. title string The title contains a human readable description of the error. detail string A detailed, human readable description of the error and how you can recover from it. instance string The identifier of the error instance. This might be of use to Swedbank Pay support personnel in order to find the exact error and the context it occurred in. status integer The HTTP status code that the problem was served with. action string The action indicates how the error can be recovered from. problems array The array of problem detail objects. └➔ name string The name of the property, header, object, entity or likewise that was erroneous. └➔ description string The human readable description of what was wrong with the property, header, object, entity or likewise identified by name. Common Problems All common problem types will have a URI in the format https://api.payex.com/psp/errordetail/&lt;payment-instrument&gt;/&lt;error-type&gt;. The URI is an identifier that you can hard-code and implement logic around. It is currently not not possible to dereference this URI, although that might be possible in the future. Type Status Description inputerror 400 The server cannot or will not process the request due to an apparent client error (e.g. malformed request syntax, size to large, invalid request). forbidden 403 The request was valid, but the server is refusing the action. The necessary permissions to access the resource might be lacking. notfound 404 The requested resource could not be found, but may be available in the future. Subsequent requests are permissible. systemerror 500 A generic error message. configurationerror 500 A error relating to configuration issues. Payment Instrument Specific Problems Problem types for a specific payment instrument will have a URI in the format https://api.payex.com/psp/errordetail/&lt;payment-instrument&gt;/&lt;error-type&gt;. You can read more about the payment instrument specific problem messages below: Card Payments Invoice Payments Swish Payments Vipps Payments",
    "tags": "",
    "url": "/home/technical-information.html"
  },{
    "title": "Swedbank Pay Resources",
    "text": "A Access Token The OAauth 2 Access token needed to access Swedbank Pay eCom APIs. Tokens are generated in Swedbank Pay Admin. Learn how to getting started in the Admin Manual. Account Receivable Consumer The AccountReceivableConsumer API is the fundament for Swedbank Pay Invoice Payments service. It is a service where Swedbank Pay helps produce and distribute invoices to consumers/end-users. Authorization The first part of a two-phase transaction where a certain amount is blocked on the payer’s account. The authorized amount is unavailable for the consumer, ensuring that the merchant receive the money during the subsequent capture phase. C Callback If callbackURL is set, a Callback is triggered when a change or update from the back-end system are made on a payment or transaction. Swedbank Pay performs a callback to inform the payee/merchant about this kind of update. Cancellation Used to cancel authorized and not yet captured transactions. If a cancellation is performed after doing a part-capture, it will only affect the not yet captured authorization amount. Capture The second part of a two-phase transaction where the authorized amount is sent from the payer to the payee. It is possible to do a part-capture on a subset of the authorized amount. Several captures on the same payment are possible, up to the total authorization amount. Checkin Checkin is the first part of the Swedbank Pay Checkout flow (prior to displaying the Payment Menu), where the payer is identified by email and mobile phone number. Consumer The person doing the purchase, equivalent to Payer. Consumers The Consumers resource stores information about the consumer/payer of the sold services or goods. It is the fundament of Checkin in Swedbank Pay Checkout. F Financing Consumer The FinancingConsumer Invoice API is the fundament for Swedbank Pay Invoice Payments service. It is a service where Swedbank Pay helps improve cashflow by purchasing merchant invoices. H Header An HTTP header used to carry information when doing an API Request. All API requests share some common headers. I Intent An intent is a payment parameter that determine the possible activity states available for a payment option (e.g. Purchase). Intents differ depening on payment instrument. Creating a payment within a one-phase payment flow (Swish, Direct debit) must have the intent to create a Sale. This is in contrast to a two-phase payment flow that have the intent to create an Authorization. Card payments also have specific intents that determine whether an AutoCapture is implemented (the credit card is charged directly like one-phase transaction). O One-phase payment flow A one-phase payment is a payment done in one step. The amount is settled in one transactional step. Operation A payment operation determines what kind of payment that should be implemented. Available payment operations vary, depending on payment instrument. The most common operation all instruments share is the Purchase operation. Card Payments have several others, such as Payout, Verify and Recur. Operations Operations consist of an array of contextual links / actions that direct the payment flow in a given state of the payment resource (i.e. creating a capture transaction, creating a reversal transaction, returning a redirect URL, etc). Operations are HATEOAS driven and managed through API calls. P Payee The company that receive funds for the payment. Payee ID The ID of the company that receive funds for the payment. Also referred to as Merchant ID. Payer The person doing the purchase, equivalent to Consumer. Payment A payment is the main resource in all of Swedbank Pay RESTful APIs, and a fundamental building block for each payment instrument during the payment process. The payment resource of each payment instrument is architectually similar, although it is tailor-made to manage the specifics of each instrument. It can be in different states and contain several different types of transactions. The state of the payment decides the operations that are available. Payment Menu A hosted view - embedded on a website - showing available payment instruments during payment scenario. The Payment Menu is the second part of the Swedbank Pay Checkout flow (after checkin). Payment Orders The Payment Orders resource is used when initiating a payment process using the Payment Menu and Swedbank Pay Checkout. What payment instrument the payment order will make use of is up to the payer. The payment order is a container for the payment method object selected, acessed through the sub-resources payments and currentPayment. Payment token A payment token is generated through a card purchase or card verification. It contains all necessary payment details to enable subsequent server-to-server payments. Used in One-click payments and recurring payment scenarios (Card, Invoice and Swedbank Pay Checkout). Payout The payment option that initiates a payout payment process. A Payout payment is a deposit directly to credit card. PSD2 PSD2 is the second Payment Services Directive, being the requirement for strong customer authentication. It is performed with multi-factor authentication, on the majority of electronic payments. Purchase The payment operation that initiates a purchase payment process. R Recur The payment operation that initiates a recurring payment process. It is a payment that references a recurrenceToken created through a previous payment in order to charge the same card. Reversal Used to reverse a payment. It is only possible to reverse a payment that has been captured and not yet reversed. S Sale A one-phase transaction where the amount is settled when the transaction has succeded. Payment instruments using sales transactions are Swish and Direct Bank Debit. SCA Strong Customer Authentication, which is a requirement from EU Revised Directive on Payment Services (PSD2). This implements the multi-factor authentication, for stronger security of electronic payments. Swedbank Pay Admin The eCommerce Admin interface where you perform day to day operations on payments processed by Swedbank Pay. The Admin manual consists of two parts,[Getting Started and Interface and Search. Swedbank Pay Direct API A payment flow where the implementer (Swedbank Pay customer) handles all user intreraction and make direct API calls to Swedbank Pay (server-to-server). Swedbank Pay Seamless View A payment flow were the consumer interact with pages developed by Swedbank Pay directly through an iframe, directly embedded in the webshop/merchant site. Swedbank Pay Payment Pages A payment flow where the consumer get redirected to a payment page developed and hosted by Swedbank Pay. T Two-phase payment flow A payment done in two steps. Authorization and capture. The most common payment instrument using two-phase payments is card payments. V Verify The payment operation that initiates a verification payment process. It is a payment that lets you post verifications to confirm the validity of card information, without reserving or charging any amount. This option is used to generate a payment- or recurrence token, that can be used in a recurring payments scenarios or for one-clickpayments, without charging the card in the process. 0-9 3-D Secure 2.0 (3DS2) The new authentication protocol for online card payments. The protocol is XML-based and designed to be an additional security layer for online credit and debit card transactions.",
    "tags": "",
    "url": "/resources/terminology.html"
  },{
    "title": "Test Data",
    "text": "Testing, are we? Good! Here’s some data you can use to test and verify your integration! Swedbank Pay Checkout Test Data During a Swedbank Pay Checkout implementation you can use the test data related to the different payment instruments listed below. To see Swedbank Pay Checkout in action, please visit our demoshop To test a logged in user in the Demo Shop, please use the following test data: Norway Type Data Description Email olivia.nyhuus@payex.com The e-mail address of the payer. Mobile number +47 98765432 The mobile phone number of the payer. Format Norway: +47 99999999. SSN 26026708248 The social security number of the payer. Format Norway: DDMMYYXXXXX ZipCode 1642 The city zip code. Format Norway: XXXX Sweden Type Data Description Email leia.ahlstrom@payex.com The e-mail address of the payer. Mobile number +46 739000001 The mobile phone number of the payer. Format Sweden: +46 707777777. SSN 199710202392 The social security number of the payer. Format Sweden: YYYYMMDDXXXX. ZipCode 17674 The city zip code. Format Sweden: XXXXX Denmark Type Data Description Mobile number +4522222222 The mobile phone number of the payer. Format Denmark: +45 22222222 Credit Card Test Data Visa Card number Expiry CVC Type of test data 4925000000000004 After the current month Any Loopback only 4581097032723517 After the current month Any Loopback only 4581099940323133 After the current month Any Loopback only Mastercard Card number Expiry CVC Type of test data 5226600159865967 After the current month Any Loopback only 5226603115488031 After the current month Any Loopback only 5226604266737382 After the current month Any Loopback only 5226600156995650 After the current month Any Loopback only American Express Card number Expiry CVC Type of test data 377601000000000 After the current month 525 Amex &amp; loopback JCB Card number Expiry CVC 3569990010082211 After the current month 123 Diners Card number Expiry CVC 6148201829798 After the current month 832 Maestro Card number Expiry CVC Type of test data 6764429999947470 03/17 066 Evry &amp; loopback Dankort Card number Expiry CVC Type of test data 5019994016316467 10/23 375 NETS &amp; loopback 5019994001307083 05/21 615 NETS &amp; loopback Visa/DanKort Card number Expiry CVC Type of test data 4571994016401817 10/17 212 NETS &amp; loopback 4571994016471869 01/19 829 NETS &amp; loopback Failure Testing For testing errors in transactions there are two different methods. The first method is performed through 3-D Secure, and the second method is for testing errors thorugh spesific amounts. 3-D Secure Method First, POST a Payment (operation purchase) and enter the link to the payment page. Example URL: - https://ecom.externalintegration.payex.com/creditcardv2/payments/authorize/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065 . Fill the data for either the Visa or MasterCard as shown below. Card type Card number Expiry CVC Type of test data Visa 4761739001010416 12/22 268 3-D Secure enrolled, ECI 5, Evry &amp; loopback MasterCard 5226612199533406 09/28 602 3-D Secure enrolled, ECI 6, Evry &amp; loopback After pressing the purchase button you will then be taken to a menu where you can select Authentication status, menu is displayed in the picture under: In this menu there is a few different options to choose from, choose the status you want to test. When selected, simply press the Continue button and the status you selected will be sent with the payment. Amount Error Testing Method We have some preset amounts that can be used to produce error codes. When making a payment (operation purchase) enter one of these numbers from the list below, in the prices object (“amount”: &lt; number&gt;,) before submitting a transaction. Then the error message displayed behind the numbers will be sent with your payment in the test environment. The amounts that can be used and produce error codes (transactionThirdPartyError): Number Error message 900313 REJECTED_BY_ACQUIRER_INVALID_AMOUNT 900330 REJECTED_BY_ACQUIRER_FORMAT_ERROR 900334 REJECTED_BY_ACQUIRER_POSSIBLE_FRAUD 900343 REJECTED_BY_ACQUIRER_CARD_STOLEN 900354 REJECTED_BY_ACQUIRER_CARD_EXPIRED 900351 REJECTED_BY_ACQUIRER_INSUFFICIENT_FUNDS 900359 CARD_DECLINED 900362 REJECTED_BY_PAYEX_CARD_BLACKLISTED 900391 ACQUIRER_HOST_OFFLINE Invoice Test Data Norway Type Data SSN 26026708248 Name Olivia Nyhuus Adress SaltnesToppen 43 City 1642 Saltnes Sweden Type Data Alternative data SSN 600307-1161 971020-2392 Name Azra Oliveira Leia Ahlstrom Adress Helgestavägen 9 Helgestavägen 9 City 19792 Bro 19792 Bro msisdn   +46739000001 email   leia.ahlstrom@payex.com Finland Type Data SSN 100584-451P Name Järvilehto Kimmo Adress Kiannonkatu 88 City 90500 Oulu Invoice Service Test Data Use any name, adress etc. Vipps Test Data For testing a positive purchase (in our external integration test environment), please use any mobile number, except within the range: 99999991-99999999, as these will trigger error messages. The error messages are documented in the table below. There will be no user dialog at the mobile phone when testing Vipps. Mobile number Error message 99999991 Vipps internal error 99999992 Request Validation error message on paticular request parameter 99999993 Transaction Id already exists in vipps 99999994 PSPID not enrolled in vipps 99999995 Invalid payment model type 99999996 User Vipps App version not supported 99999997 User not Registered with Vipps 99999998 Merchant not available or active Since there is no user dialog when testing Vipps in external integration, the following mobile numbers can be used to simulate consumer action/behaviour in Vipps application. Mobile number Simulation 99999990 Timeout, i.e. the consumer does not confirm the payment in the Vipps app in time. 99999989 Cancellation by consumer in app. Swish Test Data For testing a positive purchase (in our external integration test environment), please use any mobile number. E.g: +46 739000001 To simulate an error message, set description in POST Create Payment or Create Payment Order to one of the following values: Description Simulates RF07 Transaction declined TM01 Swish timed out before the payment was started BANKIDCL Payer cancelled BankId signing",
    "tags": "",
    "url": "/resources/test-data.html"
  }]};
